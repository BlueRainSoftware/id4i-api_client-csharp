/* 
 * ID4i API
 *
 * ID4i HTTP API
 *
 * OpenAPI spec version: 0.2.4-SNAPSHOT
 * Contact: info@bluerain.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using BlueRain.ID4i.Client;
using BlueRain.ID4i.Api;
using BlueRain.ID4i.Model;

namespace BlueRain.ID4i.Test
{
    /// <summary>
    ///  Class for testing CollectionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CollectionsApiTests
    {
        private CollectionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CollectionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CollectionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CollectionsApi
            //Assert.IsInstanceOfType(typeof(CollectionsApi), instance, "instance is a CollectionsApi");
        }

        
        /// <summary>
        /// Test AddElementsToCollection
        /// </summary>
        [Test]
        public void AddElementsToCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //ListOfId4ns listOfGuids = null;
            //instance.AddElementsToCollection(id4n, listOfGuids);
            
        }
        
        /// <summary>
        /// Test AddElementsToLabelledCollection
        /// </summary>
        [Test]
        public void AddElementsToLabelledCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string collectionId4n = null;
            //ListOfId4ns listOfGuids = null;
            //instance.AddElementsToLabelledCollection(collectionId4n, listOfGuids);
            
        }
        
        /// <summary>
        /// Test AddElementsToLogisticCollection
        /// </summary>
        [Test]
        public void AddElementsToLogisticCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string collectionId4n = null;
            //ListOfId4ns listOfGuids = null;
            //instance.AddElementsToLogisticCollection(collectionId4n, listOfGuids);
            
        }
        
        /// <summary>
        /// Test AddElementsToRoutingCollection
        /// </summary>
        [Test]
        public void AddElementsToRoutingCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string collectionId4n = null;
            //ListOfId4ns listOfGuids = null;
            //instance.AddElementsToRoutingCollection(collectionId4n, listOfGuids);
            
        }
        
        /// <summary>
        /// Test CreateLabelledCollection
        /// </summary>
        [Test]
        public void CreateLabelledCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateLabelledCollectionRequest createInfo = null;
            //var response = instance.CreateLabelledCollection(createInfo);
            //Assert.IsInstanceOf<Id4n> (response, "response is Id4n");
        }
        
        /// <summary>
        /// Test CreateLogisticCollection
        /// </summary>
        [Test]
        public void CreateLogisticCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateLogisticCollectionRequest createInfo = null;
            //var response = instance.CreateLogisticCollection(createInfo);
            //Assert.IsInstanceOf<Id4n> (response, "response is Id4n");
        }
        
        /// <summary>
        /// Test CreateRoutingCollection
        /// </summary>
        [Test]
        public void CreateRoutingCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateRoutingCollectionRequest createInfo = null;
            //var response = instance.CreateRoutingCollection(createInfo);
            //Assert.IsInstanceOf<Id4n> (response, "response is Id4n");
        }
        
        /// <summary>
        /// Test DeleteCollection
        /// </summary>
        [Test]
        public void DeleteCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //instance.DeleteCollection(id4n);
            
        }
        
        /// <summary>
        /// Test DeleteLabelledCollection
        /// </summary>
        [Test]
        public void DeleteLabelledCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //instance.DeleteLabelledCollection(id4n);
            
        }
        
        /// <summary>
        /// Test DeleteLogisticCollection
        /// </summary>
        [Test]
        public void DeleteLogisticCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //var response = instance.DeleteLogisticCollection(id4n);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteRoutingCollection
        /// </summary>
        [Test]
        public void DeleteRoutingCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //instance.DeleteRoutingCollection(id4n);
            
        }
        
        /// <summary>
        /// Test FindCollection
        /// </summary>
        [Test]
        public void FindCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //var response = instance.FindCollection(id4n);
            //Assert.IsInstanceOf<GuidCollection> (response, "response is GuidCollection");
        }
        
        /// <summary>
        /// Test FindLabelledCollection
        /// </summary>
        [Test]
        public void FindLabelledCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //var response = instance.FindLabelledCollection(id4n);
            //Assert.IsInstanceOf<GuidCollection> (response, "response is GuidCollection");
        }
        
        /// <summary>
        /// Test FindLogisticCollection
        /// </summary>
        [Test]
        public void FindLogisticCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //var response = instance.FindLogisticCollection(id4n);
            //Assert.IsInstanceOf<GuidCollection> (response, "response is GuidCollection");
        }
        
        /// <summary>
        /// Test FindRoutingCollection
        /// </summary>
        [Test]
        public void FindRoutingCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //var response = instance.FindRoutingCollection(id4n);
            //Assert.IsInstanceOf<GuidCollection> (response, "response is GuidCollection");
        }
        
        /// <summary>
        /// Test GetAllCollectionsOfOrganization
        /// </summary>
        [Test]
        public void GetAllCollectionsOfOrganizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //int? offset = null;
            //int? limit = null;
            //string type = null;
            //string label = null;
            //string labelPrefix = null;
            //var response = instance.GetAllCollectionsOfOrganization(organizationId, offset, limit, type, label, labelPrefix);
            //Assert.IsInstanceOf<PaginatedGuidCollection> (response, "response is PaginatedGuidCollection");
        }
        
        /// <summary>
        /// Test ListElementsOfCollection
        /// </summary>
        [Test]
        public void ListElementsOfCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ListElementsOfCollection(id4n, offset, limit);
            //Assert.IsInstanceOf<PaginatedGuidResponse> (response, "response is PaginatedGuidResponse");
        }
        
        /// <summary>
        /// Test ListElementsOfLabelledCollection
        /// </summary>
        [Test]
        public void ListElementsOfLabelledCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ListElementsOfLabelledCollection(id4n, offset, limit);
            //Assert.IsInstanceOf<PaginatedGuidResponse> (response, "response is PaginatedGuidResponse");
        }
        
        /// <summary>
        /// Test ListElementsOfLogisticCollection
        /// </summary>
        [Test]
        public void ListElementsOfLogisticCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ListElementsOfLogisticCollection(id4n, offset, limit);
            //Assert.IsInstanceOf<PaginatedGuidResponse> (response, "response is PaginatedGuidResponse");
        }
        
        /// <summary>
        /// Test ListElementsOfRoutingCollection
        /// </summary>
        [Test]
        public void ListElementsOfRoutingCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ListElementsOfRoutingCollection(id4n, offset, limit);
            //Assert.IsInstanceOf<PaginatedGuidResponse> (response, "response is PaginatedGuidResponse");
        }
        
        /// <summary>
        /// Test RemoveElementsFromCollection
        /// </summary>
        [Test]
        public void RemoveElementsFromCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //ListOfId4ns listOfGuids = null;
            //instance.RemoveElementsFromCollection(id4n, listOfGuids);
            
        }
        
        /// <summary>
        /// Test RemoveElementsFromLabelledCollection
        /// </summary>
        [Test]
        public void RemoveElementsFromLabelledCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string collectionId4n = null;
            //ListOfId4ns listOfGuids = null;
            //instance.RemoveElementsFromLabelledCollection(collectionId4n, listOfGuids);
            
        }
        
        /// <summary>
        /// Test RemoveElementsFromLogisticCollection
        /// </summary>
        [Test]
        public void RemoveElementsFromLogisticCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string collectionId4n = null;
            //ListOfId4ns listOfGuids = null;
            //instance.RemoveElementsFromLogisticCollection(collectionId4n, listOfGuids);
            
        }
        
        /// <summary>
        /// Test RemoveElementsFromRoutingCollection
        /// </summary>
        [Test]
        public void RemoveElementsFromRoutingCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string collectionId4n = null;
            //ListOfId4ns listOfGuids = null;
            //instance.RemoveElementsFromRoutingCollection(collectionId4n, listOfGuids);
            
        }
        
        /// <summary>
        /// Test SetCollection
        /// </summary>
        [Test]
        public void SetCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //GuidCollection request = null;
            //var response = instance.SetCollection(id4n, request);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SetLabelledCollection
        /// </summary>
        [Test]
        public void SetLabelledCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //GuidCollection request = null;
            //var response = instance.SetLabelledCollection(id4n, request);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SetLogisticCollection
        /// </summary>
        [Test]
        public void SetLogisticCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //GuidCollection request = null;
            //var response = instance.SetLogisticCollection(id4n, request);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SetRoutingCollection
        /// </summary>
        [Test]
        public void SetRoutingCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //GuidCollection request = null;
            //var response = instance.SetRoutingCollection(id4n, request);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateCollection
        /// </summary>
        [Test]
        public void UpdateCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //GuidCollection request = null;
            //var response = instance.UpdateCollection(id4n, request);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateLabelledCollection
        /// </summary>
        [Test]
        public void UpdateLabelledCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //GuidCollection request = null;
            //var response = instance.UpdateLabelledCollection(id4n, request);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateLogisticCollection
        /// </summary>
        [Test]
        public void UpdateLogisticCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //GuidCollection request = null;
            //var response = instance.UpdateLogisticCollection(id4n, request);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateRoutingCollection
        /// </summary>
        [Test]
        public void UpdateRoutingCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //GuidCollection request = null;
            //var response = instance.UpdateRoutingCollection(id4n, request);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
    }

}
