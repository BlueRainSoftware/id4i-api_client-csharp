/* 
 * ID4i API
 *
 * ID4i HTTP API
 *
 * OpenAPI spec version: 0.2.5-SNAPSHOT
 * Contact: info@bluerain.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using BlueRain.ID4i.Client;
using BlueRain.ID4i.Api;
using BlueRain.ID4i.Model;

namespace BlueRain.ID4i.Test
{
    /// <summary>
    ///  Class for testing ApiKeysApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ApiKeysApiTests
    {
        private ApiKeysApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ApiKeysApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ApiKeysApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ApiKeysApi
            //Assert.IsInstanceOfType(typeof(ApiKeysApi), instance, "instance is a ApiKeysApi");
        }

        
        /// <summary>
        /// Test AddApiKeyPrivilege
        /// </summary>
        [Test]
        public void AddApiKeyPrivilegeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //AddApiKeyPrivilegeRequest addApiKeyPrivilegeRequest = null;
            //instance.AddApiKeyPrivilege(key, addApiKeyPrivilegeRequest);
            
        }
        
        /// <summary>
        /// Test AddApiKeyPrivilegeForId4ns
        /// </summary>
        [Test]
        public void AddApiKeyPrivilegeForId4nsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string privilege = null;
            //ListOfId4ns id4ns = null;
            //instance.AddApiKeyPrivilegeForId4ns(key, privilege, id4ns);
            
        }
        
        /// <summary>
        /// Test CreateNewApiKey
        /// </summary>
        [Test]
        public void CreateNewApiKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ApiKeyCreationRequest creationRequest = null;
            //var response = instance.CreateNewApiKey(creationRequest);
            //Assert.IsInstanceOf<ApiKeyPresentation> (response, "response is ApiKeyPresentation");
        }
        
        /// <summary>
        /// Test DeleteApiKey
        /// </summary>
        [Test]
        public void DeleteApiKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //instance.DeleteApiKey(key);
            
        }
        
        /// <summary>
        /// Test GetApiKey
        /// </summary>
        [Test]
        public void GetApiKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //var response = instance.GetApiKey(key);
            //Assert.IsInstanceOf<ApiKeyPresentation> (response, "response is ApiKeyPresentation");
        }
        
        /// <summary>
        /// Test ListAllApiKeyPrivileges
        /// </summary>
        [Test]
        public void ListAllApiKeyPrivilegesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? id4nConcerning = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ListAllApiKeyPrivileges(id4nConcerning, offset, limit);
            //Assert.IsInstanceOf<ApiKeyPrivilegeInfoResponse> (response, "response is ApiKeyPrivilegeInfoResponse");
        }
        
        /// <summary>
        /// Test ListAllApiKeysOfOrganization
        /// </summary>
        [Test]
        public void ListAllApiKeysOfOrganizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ListAllApiKeysOfOrganization(organizationId, offset, limit);
            //Assert.IsInstanceOf<PaginatedApiKeyResponse> (response, "response is PaginatedApiKeyResponse");
        }
        
        /// <summary>
        /// Test ListApiKeyPrivileges
        /// </summary>
        [Test]
        public void ListApiKeyPrivilegesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ListApiKeyPrivileges(key, offset, limit);
            //Assert.IsInstanceOf<ApiKeyPrivilegePaginatedResponse> (response, "response is ApiKeyPrivilegePaginatedResponse");
        }
        
        /// <summary>
        /// Test ListId4ns
        /// </summary>
        [Test]
        public void ListId4nsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string privilege = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ListId4ns(key, privilege, offset, limit);
            //Assert.IsInstanceOf<Id4nPresentationPaginatedResponse> (response, "response is Id4nPresentationPaginatedResponse");
        }
        
        /// <summary>
        /// Test RemoveApiKeyPrivilege
        /// </summary>
        [Test]
        public void RemoveApiKeyPrivilegeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //RemoveApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest = null;
            //instance.RemoveApiKeyPrivilege(key, removeApiKeyPrivilegeRequest);
            
        }
        
        /// <summary>
        /// Test RemoveApiKeyPrivilegeForId4ns
        /// </summary>
        [Test]
        public void RemoveApiKeyPrivilegeForId4nsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string privilege = null;
            //ListOfId4ns id4ns = null;
            //instance.RemoveApiKeyPrivilegeForId4ns(key, privilege, id4ns);
            
        }
        
        /// <summary>
        /// Test UpdateApiKey
        /// </summary>
        [Test]
        public void UpdateApiKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //ApiKeyChangeRequest apiKeyChange = null;
            //instance.UpdateApiKey(key, apiKeyChange);
            
        }
        
    }

}
