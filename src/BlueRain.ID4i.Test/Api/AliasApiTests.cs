/* 
 * ID4i API
 *
 * ID4i HTTP API
 *
 * OpenAPI spec version: 0.2.4
 * Contact: info@bluerain.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using BlueRain.ID4i.Client;
using BlueRain.ID4i.Api;
using BlueRain.ID4i.Model;

namespace BlueRain.ID4i.Test
{
    /// <summary>
    ///  Class for testing AliasApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AliasApiTests
    {
        private AliasApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AliasApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AliasApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AliasApi
            //Assert.IsInstanceOfType(typeof(AliasApi), instance, "instance is a AliasApi");
        }

        
        /// <summary>
        /// Test AddGuidAlias
        /// </summary>
        [Test]
        public void AddGuidAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //string aliasType = null;
            //GuidAlias alias = null;
            //instance.AddGuidAlias(id4n, aliasType, alias);
            
        }
        
        /// <summary>
        /// Test GetGuidAliasTypes
        /// </summary>
        [Test]
        public void GetGuidAliasTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetGuidAliasTypes();
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test GetGuidAliases
        /// </summary>
        [Test]
        public void GetGuidAliasesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //var response = instance.GetGuidAliases(id4n);
            //Assert.IsInstanceOf<Dictionary<string, string>> (response, "response is Dictionary<string, string>");
        }
        
        /// <summary>
        /// Test RemoveGuidAlias
        /// </summary>
        [Test]
        public void RemoveGuidAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //string aliasType = null;
            //instance.RemoveGuidAlias(id4n, aliasType);
            
        }
        
        /// <summary>
        /// Test SearchByAlias
        /// </summary>
        [Test]
        public void SearchByAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string alias = null;
            //string aliasType = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.SearchByAlias(alias, aliasType, offset, limit);
            //Assert.IsInstanceOf<PaginatedGuidResponse> (response, "response is PaginatedGuidResponse");
        }
        
    }

}
