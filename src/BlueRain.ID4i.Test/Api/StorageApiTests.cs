/* 
 * ID4i API
 *
 * ID4i HTTP API
 *
 * OpenAPI spec version: 0.2.4-SNAPSHOT
 * Contact: info@bluerain.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using BlueRain.ID4i.Client;
using BlueRain.ID4i.Api;
using BlueRain.ID4i.Model;

namespace BlueRain.ID4i.Test
{
    /// <summary>
    ///  Class for testing StorageApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class StorageApiTests
    {
        private StorageApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new StorageApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of StorageApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' StorageApi
            //Assert.IsInstanceOfType(typeof(StorageApi), instance, "instance is a StorageApi");
        }

        
        /// <summary>
        /// Test DeleteDocument
        /// </summary>
        [Test]
        public void DeleteDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //string id4n = null;
            //string fileName = null;
            //var response = instance.DeleteDocument(organizationId, id4n, fileName);
            //Assert.IsInstanceOf<ResponseEntity> (response, "response is ResponseEntity");
        }
        
        /// <summary>
        /// Test GetDocument
        /// </summary>
        [Test]
        public void GetDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //string id4n = null;
            //string fileName = null;
            //var response = instance.GetDocument(organizationId, id4n, fileName);
            //Assert.IsInstanceOf<Document> (response, "response is Document");
        }
        
        /// <summary>
        /// Test GetPublicDocument
        /// </summary>
        [Test]
        public void GetPublicDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //string id4n = null;
            //string fileName = null;
            //var response = instance.GetPublicDocument(organizationId, id4n, fileName);
            //Assert.IsInstanceOf<Document> (response, "response is Document");
        }
        
        /// <summary>
        /// Test ListAllDocuments
        /// </summary>
        [Test]
        public void ListAllDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ListAllDocuments(id4n, offset, limit);
            //Assert.IsInstanceOf<PaginatedOwnedDocumentResponse> (response, "response is PaginatedOwnedDocumentResponse");
        }
        
        /// <summary>
        /// Test ListAllPublicDocuments
        /// </summary>
        [Test]
        public void ListAllPublicDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id4n = null;
            //long? organizationId = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ListAllPublicDocuments(id4n, organizationId, offset, limit);
            //Assert.IsInstanceOf<PaginatedOwnedDocumentResponse> (response, "response is PaginatedOwnedDocumentResponse");
        }
        
        /// <summary>
        /// Test ListDocuments
        /// </summary>
        [Test]
        public void ListDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //string id4n = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ListDocuments(organizationId, id4n, offset, limit);
            //Assert.IsInstanceOf<PaginatedDocumentResponse> (response, "response is PaginatedDocumentResponse");
        }
        
        /// <summary>
        /// Test ListPublicDocuments
        /// </summary>
        [Test]
        public void ListPublicDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //string id4n = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ListPublicDocuments(organizationId, id4n, offset, limit);
            //Assert.IsInstanceOf<PaginatedDocumentResponse> (response, "response is PaginatedDocumentResponse");
        }
        
        /// <summary>
        /// Test ReadDocument
        /// </summary>
        [Test]
        public void ReadDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //string id4n = null;
            //string fileName = null;
            //var response = instance.ReadDocument(organizationId, id4n, fileName);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test ReadFromMicrostorage
        /// </summary>
        [Test]
        public void ReadFromMicrostorageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organization = null;
            //string id4n = null;
            //var response = instance.ReadFromMicrostorage(organization, id4n);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test ReadPublicDocument
        /// </summary>
        [Test]
        public void ReadPublicDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //string id4n = null;
            //string fileName = null;
            //var response = instance.ReadPublicDocument(organizationId, id4n, fileName);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test UpdateDocumentMetadata
        /// </summary>
        [Test]
        public void UpdateDocumentMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //string id4n = null;
            //string fileName = null;
            //DocumentUpdate document = null;
            //var response = instance.UpdateDocumentMetadata(organizationId, id4n, fileName, document);
            //Assert.IsInstanceOf<Document> (response, "response is Document");
        }
        
        /// <summary>
        /// Test WriteToMicrostorage
        /// </summary>
        [Test]
        public void WriteToMicrostorageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organization = null;
            //string id4n = null;
            //string body = null;
            //string contentType = null;
            //long? contentLength = null;
            //var response = instance.WriteToMicrostorage(organization, id4n, body, contentType, contentLength);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
    }

}
