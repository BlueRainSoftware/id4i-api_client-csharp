/* 
 * ID4i API
 *
 * ID4i HTTP API
 *
 * OpenAPI spec version: 0.2.4
 * Contact: info@bluerain.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using BlueRain.ID4i.Client;
using BlueRain.ID4i.Api;
using BlueRain.ID4i.Model;

namespace BlueRain.ID4i.Test
{
    /// <summary>
    ///  Class for testing AccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AccountsApiTests
    {
        private AccountsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AccountsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AccountsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AccountsApi
            //Assert.IsInstanceOfType(typeof(AccountsApi), instance, "instance is a AccountsApi");
        }

        
        /// <summary>
        /// Test AddUserRoles
        /// </summary>
        [Test]
        public void AddUserRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //string username = null;
            //ChangeRoleRequest changeRoleRequest = null;
            //instance.AddUserRoles(organizationId, username, changeRoleRequest);
            
        }
        
        /// <summary>
        /// Test CompleteRegistration
        /// </summary>
        [Test]
        public void CompleteRegistrationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CompleteUserRegistrationRequest completeRegistration = null;
            //instance.CompleteRegistration(completeRegistration);
            
        }
        
        /// <summary>
        /// Test FindUserByUsername
        /// </summary>
        [Test]
        public void FindUserByUsernameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = instance.FindUserByUsername(username);
            //Assert.IsInstanceOf<UserPresentation> (response, "response is UserPresentation");
        }
        
        /// <summary>
        /// Test FindUsers
        /// </summary>
        [Test]
        public void FindUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string usernamePrefix = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.FindUsers(usernamePrefix, offset, limit);
            //Assert.IsInstanceOf<PaginatedUserPresentationResponse> (response, "response is PaginatedUserPresentationResponse");
        }
        
        /// <summary>
        /// Test GetAllOrganizationRoles
        /// </summary>
        [Test]
        public void GetAllOrganizationRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetAllOrganizationRoles(organizationId, offset, limit);
            //Assert.IsInstanceOf<PaginatedUserRolesResponse> (response, "response is PaginatedUserRolesResponse");
        }
        
        /// <summary>
        /// Test GetOrganizationsOfUser
        /// </summary>
        [Test]
        public void GetOrganizationsOfUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetOrganizationsOfUser(role, offset, limit);
            //Assert.IsInstanceOf<PaginatedOrganizationResponse> (response, "response is PaginatedOrganizationResponse");
        }
        
        /// <summary>
        /// Test GetUserRoles
        /// </summary>
        [Test]
        public void GetUserRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //string username = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetUserRoles(organizationId, username, offset, limit);
            //Assert.IsInstanceOf<PaginatedStringResponse> (response, "response is PaginatedStringResponse");
        }
        
        /// <summary>
        /// Test GetUsersOfOrganization
        /// </summary>
        [Test]
        public void GetUsersOfOrganizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetUsersOfOrganization(organizationId, offset, limit);
            //Assert.IsInstanceOf<PaginatedUserPresentationResponse> (response, "response is PaginatedUserPresentationResponse");
        }
        
        /// <summary>
        /// Test InviteUsers
        /// </summary>
        [Test]
        public void InviteUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //OrganizationUserInvitationListRequest invitationList = null;
            //instance.InviteUsers(organizationId, invitationList);
            
        }
        
        /// <summary>
        /// Test ListAllRoles
        /// </summary>
        [Test]
        public void ListAllRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string privilege = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ListAllRoles(privilege, offset, limit);
            //Assert.IsInstanceOf<RoleResponse> (response, "response is RoleResponse");
        }
        
        /// <summary>
        /// Test Login
        /// </summary>
        [Test]
        public void LoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AccountCredentials accountCredentials = null;
            //instance.Login(accountCredentials);
            
        }
        
        /// <summary>
        /// Test RegisterUser
        /// </summary>
        [Test]
        public void RegisterUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserRegistrationRequest userRegistration = null;
            //var response = instance.RegisterUser(userRegistration);
            //Assert.IsInstanceOf<UserRegistrationResponse> (response, "response is UserRegistrationResponse");
        }
        
        /// <summary>
        /// Test RemoveUserRoles
        /// </summary>
        [Test]
        public void RemoveUserRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //string username = null;
            //ChangeRoleRequest changeRoleRequest = null;
            //instance.RemoveUserRoles(organizationId, username, changeRoleRequest);
            
        }
        
        /// <summary>
        /// Test RequestPasswordReset
        /// </summary>
        [Test]
        public void RequestPasswordResetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PasswordResetRequest resetRequest = null;
            //var response = instance.RequestPasswordReset(resetRequest);
            //Assert.IsInstanceOf<SimpleMessageResponse> (response, "response is SimpleMessageResponse");
        }
        
        /// <summary>
        /// Test VerifyPasswordReset
        /// </summary>
        [Test]
        public void VerifyPasswordResetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PasswordResetVerificationRequest verificationRequest = null;
            //var response = instance.VerifyPasswordReset(verificationRequest);
            //Assert.IsInstanceOf<SimpleMessageResponse> (response, "response is SimpleMessageResponse");
        }
        
        /// <summary>
        /// Test VerifyUserRegistration
        /// </summary>
        [Test]
        public void VerifyUserRegistrationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RegistrationVerificationTokenPresentation token = null;
            //instance.VerifyUserRegistration(token);
            
        }
        
    }

}
