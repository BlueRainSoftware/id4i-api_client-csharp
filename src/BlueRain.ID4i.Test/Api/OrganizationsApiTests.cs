/* 
 * ID4i API
 *
 * ID4i HTTP API
 *
 * OpenAPI spec version: 0.2.4
 * Contact: info@bluerain.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using BlueRain.ID4i.Client;
using BlueRain.ID4i.Api;
using BlueRain.ID4i.Model;

namespace BlueRain.ID4i.Test
{
    /// <summary>
    ///  Class for testing OrganizationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class OrganizationsApiTests
    {
        private OrganizationsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new OrganizationsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of OrganizationsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' OrganizationsApi
            //Assert.IsInstanceOfType(typeof(OrganizationsApi), instance, "instance is a OrganizationsApi");
        }

        
        /// <summary>
        /// Test AddUserRoles
        /// </summary>
        [Test]
        public void AddUserRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //string username = null;
            //ChangeRoleRequest changeRoleRequest = null;
            //instance.AddUserRoles(organizationId, username, changeRoleRequest);
            
        }
        
        /// <summary>
        /// Test CreateOrganization
        /// </summary>
        [Test]
        public void CreateOrganizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Organization organization = null;
            //var response = instance.CreateOrganization(organization);
            //Assert.IsInstanceOf<Organization> (response, "response is Organization");
        }
        
        /// <summary>
        /// Test DeleteOrganization
        /// </summary>
        [Test]
        public void DeleteOrganizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //instance.DeleteOrganization(organizationId);
            
        }
        
        /// <summary>
        /// Test DeleteOrganizationBillingAddress
        /// </summary>
        [Test]
        public void DeleteOrganizationBillingAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //instance.DeleteOrganizationBillingAddress(organizationId);
            
        }
        
        /// <summary>
        /// Test DeleteOrganizationLogo
        /// </summary>
        [Test]
        public void DeleteOrganizationLogoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //instance.DeleteOrganizationLogo(organizationId);
            
        }
        
        /// <summary>
        /// Test FindOrganization
        /// </summary>
        [Test]
        public void FindOrganizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //var response = instance.FindOrganization(organizationId);
            //Assert.IsInstanceOf<Organization> (response, "response is Organization");
        }
        
        /// <summary>
        /// Test FindOrganizationAddress
        /// </summary>
        [Test]
        public void FindOrganizationAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //var response = instance.FindOrganizationAddress(organizationId);
            //Assert.IsInstanceOf<OrganizationAddress> (response, "response is OrganizationAddress");
        }
        
        /// <summary>
        /// Test FindOrganizationBillingAddress
        /// </summary>
        [Test]
        public void FindOrganizationBillingAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //var response = instance.FindOrganizationBillingAddress(organizationId);
            //Assert.IsInstanceOf<OrganizationAddress> (response, "response is OrganizationAddress");
        }
        
        /// <summary>
        /// Test GetAllCollectionsOfOrganization
        /// </summary>
        [Test]
        public void GetAllCollectionsOfOrganizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //int? offset = null;
            //int? limit = null;
            //string type = null;
            //string label = null;
            //string labelPrefix = null;
            //var response = instance.GetAllCollectionsOfOrganization(organizationId, offset, limit, type, label, labelPrefix);
            //Assert.IsInstanceOf<PaginatedGuidCollection> (response, "response is PaginatedGuidCollection");
        }
        
        /// <summary>
        /// Test GetAllOrganizationRoles
        /// </summary>
        [Test]
        public void GetAllOrganizationRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetAllOrganizationRoles(organizationId, offset, limit);
            //Assert.IsInstanceOf<PaginatedUserRolesResponse> (response, "response is PaginatedUserRolesResponse");
        }
        
        /// <summary>
        /// Test GetOrganizationsOfUser
        /// </summary>
        [Test]
        public void GetOrganizationsOfUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetOrganizationsOfUser(role, offset, limit);
            //Assert.IsInstanceOf<PaginatedOrganizationResponse> (response, "response is PaginatedOrganizationResponse");
        }
        
        /// <summary>
        /// Test GetUserRoles
        /// </summary>
        [Test]
        public void GetUserRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //string username = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetUserRoles(organizationId, username, offset, limit);
            //Assert.IsInstanceOf<PaginatedStringResponse> (response, "response is PaginatedStringResponse");
        }
        
        /// <summary>
        /// Test GetUsersOfOrganization
        /// </summary>
        [Test]
        public void GetUsersOfOrganizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetUsersOfOrganization(organizationId, offset, limit);
            //Assert.IsInstanceOf<PaginatedUserPresentationResponse> (response, "response is PaginatedUserPresentationResponse");
        }
        
        /// <summary>
        /// Test InviteUsers
        /// </summary>
        [Test]
        public void InviteUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //OrganizationUserInvitationListRequest invitationList = null;
            //instance.InviteUsers(organizationId, invitationList);
            
        }
        
        /// <summary>
        /// Test ListCountries
        /// </summary>
        [Test]
        public void ListCountriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ListCountries(offset, limit);
            //Assert.IsInstanceOf<PaginatedCountryResponse> (response, "response is PaginatedCountryResponse");
        }
        
        /// <summary>
        /// Test RemoveUserRoles
        /// </summary>
        [Test]
        public void RemoveUserRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //string username = null;
            //ChangeRoleRequest changeRoleRequest = null;
            //instance.RemoveUserRoles(organizationId, username, changeRoleRequest);
            
        }
        
        /// <summary>
        /// Test SetOrganizationLogo
        /// </summary>
        [Test]
        public void SetOrganizationLogoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //System.IO.Stream file = null;
            //var response = instance.SetOrganizationLogo(organizationId, file);
            //Assert.IsInstanceOf<PublicImagePresentation> (response, "response is PublicImagePresentation");
        }
        
        /// <summary>
        /// Test UpdateOrganization
        /// </summary>
        [Test]
        public void UpdateOrganizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //Organization organization = null;
            //var response = instance.UpdateOrganization(organizationId, organization);
            //Assert.IsInstanceOf<Organization> (response, "response is Organization");
        }
        
        /// <summary>
        /// Test UpdateOrganizationAddress
        /// </summary>
        [Test]
        public void UpdateOrganizationAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //OrganizationAddress addressResource = null;
            //var response = instance.UpdateOrganizationAddress(organizationId, addressResource);
            //Assert.IsInstanceOf<OrganizationAddress> (response, "response is OrganizationAddress");
        }
        
        /// <summary>
        /// Test UpdateOrganizationBillingAddress
        /// </summary>
        [Test]
        public void UpdateOrganizationBillingAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? organizationId = null;
            //OrganizationAddress addressResource = null;
            //var response = instance.UpdateOrganizationBillingAddress(organizationId, addressResource);
            //Assert.IsInstanceOf<OrganizationAddress> (response, "response is OrganizationAddress");
        }
        
    }

}
