/* 
 * ID4i API
 *
 * ID4i HTTP API
 *
 * OpenAPI spec version: 0.9.7
 * Contact: info@bluerain.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
    using RestSharp.Portable;
using BlueRain.ID4i.Client;
using BlueRain.ID4i.Model;
using Guid = BlueRain.ID4i.Model.Guid;

namespace BlueRain.ID4i.Api
{
    /// <summary>
        /// Represents a collection of functions to interact with the API endpoints
        /// </summary>
    public interface IHistoryApi : IApiAccessor
    {
    #region Synchronous Operations
        /// <summary>
            /// Add history item
            /// </summary>
        /// <remarks>
            /// Add a new history item
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="historyItem">The history item to publish</param>
        /// <returns></returns>
        void AddItem (string id4n, HistoryItem historyItem);

        /// <summary>
            /// Add history item
            /// </summary>
        /// <remarks>
            /// Add a new history item
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="historyItem">The history item to publish</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddItemWithHttpInfo (string id4n, HistoryItem historyItem);
        /// <summary>
            /// List history
            /// </summary>
        /// <remarks>
            /// Lists the history of a GUID
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="includePrivate">Also return private history entries (optional, default to true)</param>
        /// <param name="organization">Show only entries created by one of the given organizations. This parameter can be used multiple times. (optional)</param>
        /// <param name="type">Show only entries matching one of the given history item types. This parameter can be used multiple times. (optional)</param>
        /// <param name="qualifier">Show only entries matching one of the given history item qualifiers (additional property de.id4i.history.item.qualifier). This parameter can be used multiple times. (optional)</param>
        /// <param name="fromDate">From date time as UTC Date-Time format (optional)</param>
        /// <param name="toDate">To date time as UTC Date-Time format (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedResponseOfHistoryItem</returns>
        PaginatedResponseOfHistoryItem FilteredList (string id4n, bool? includePrivate = null, string organization = null, List<string> type = null, List<string> qualifier = null, DateTime? fromDate = null, DateTime? toDate = null, int? offset = null, int? limit = null);

        /// <summary>
            /// List history
            /// </summary>
        /// <remarks>
            /// Lists the history of a GUID
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="includePrivate">Also return private history entries (optional, default to true)</param>
        /// <param name="organization">Show only entries created by one of the given organizations. This parameter can be used multiple times. (optional)</param>
        /// <param name="type">Show only entries matching one of the given history item types. This parameter can be used multiple times. (optional)</param>
        /// <param name="qualifier">Show only entries matching one of the given history item qualifiers (additional property de.id4i.history.item.qualifier). This parameter can be used multiple times. (optional)</param>
        /// <param name="fromDate">From date time as UTC Date-Time format (optional)</param>
        /// <param name="toDate">To date time as UTC Date-Time format (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedResponseOfHistoryItem</returns>
        ApiResponse<PaginatedResponseOfHistoryItem> FilteredListWithHttpInfo (string id4n, bool? includePrivate = null, string organization = null, List<string> type = null, List<string> qualifier = null, DateTime? fromDate = null, DateTime? toDate = null, int? offset = null, int? limit = null);
        /// <summary>
            /// DEPRECATED - List history
            /// </summary>
        /// <remarks>
            /// DEPRECATED - please use filteredList with organization parameter to achieve the same functionality
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="includePrivate">Also return private history entries (optional, default to true)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedResponseOfHistoryItem</returns>
        PaginatedResponseOfHistoryItem List (string id4n, string organizationId, bool? includePrivate = null, int? offset = null, int? limit = null);

        /// <summary>
            /// DEPRECATED - List history
            /// </summary>
        /// <remarks>
            /// DEPRECATED - please use filteredList with organization parameter to achieve the same functionality
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="includePrivate">Also return private history entries (optional, default to true)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedResponseOfHistoryItem</returns>
        ApiResponse<PaginatedResponseOfHistoryItem> ListWithHttpInfo (string id4n, string organizationId, bool? includePrivate = null, int? offset = null, int? limit = null);
        /// <summary>
            /// Get history item
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="sequenceId">sequenceId</param>
        /// <returns>HistoryItem</returns>
        HistoryItem RetrieveItem (string id4n, string organizationId, int? sequenceId);

        /// <summary>
            /// Get history item
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="sequenceId">sequenceId</param>
        /// <returns>ApiResponse of HistoryItem</returns>
        ApiResponse<HistoryItem> RetrieveItemWithHttpInfo (string id4n, string organizationId, int? sequenceId);
        /// <summary>
            /// Update history item
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="sequenceId">sequenceId</param>
        /// <param name="update">update</param>
        /// <returns>HistoryItem</returns>
        HistoryItem UpdateItem (string id4n, string organizationId, int? sequenceId, HistoryItemUpdate update);

        /// <summary>
            /// Update history item
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="sequenceId">sequenceId</param>
        /// <param name="update">update</param>
        /// <returns>ApiResponse of HistoryItem</returns>
        ApiResponse<HistoryItem> UpdateItemWithHttpInfo (string id4n, string organizationId, int? sequenceId, HistoryItemUpdate update);
        /// <summary>
            /// Set history item visibility
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="sequenceId">sequenceId</param>
        /// <param name="visibility">History item visibility restrictions</param>
        /// <returns>HistoryItem</returns>
        HistoryItem UpdateItemVisibility (string id4n, string organizationId, int? sequenceId, Visibility visibility);

        /// <summary>
            /// Set history item visibility
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="sequenceId">sequenceId</param>
        /// <param name="visibility">History item visibility restrictions</param>
        /// <returns>ApiResponse of HistoryItem</returns>
        ApiResponse<HistoryItem> UpdateItemVisibilityWithHttpInfo (string id4n, string organizationId, int? sequenceId, Visibility visibility);
        #endregion Synchronous Operations
            #region Asynchronous Operations
                /// <summary>
                /// Add history item
                /// </summary>
                /// <remarks>
                /// Add a new history item
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="historyItem">The history item to publish</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task AddItemAsync (string id4n, HistoryItem historyItem);

                /// <summary>
                /// Add history item
                /// </summary>
                /// <remarks>
                /// Add a new history item
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="historyItem">The history item to publish</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> AddItemAsyncWithHttpInfo (string id4n, HistoryItem historyItem);
                /// <summary>
                /// List history
                /// </summary>
                /// <remarks>
                /// Lists the history of a GUID
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="includePrivate">Also return private history entries (optional, default to true)</param>
            /// <param name="organization">Show only entries created by one of the given organizations. This parameter can be used multiple times. (optional)</param>
            /// <param name="type">Show only entries matching one of the given history item types. This parameter can be used multiple times. (optional)</param>
            /// <param name="qualifier">Show only entries matching one of the given history item qualifiers (additional property de.id4i.history.item.qualifier). This parameter can be used multiple times. (optional)</param>
            /// <param name="fromDate">From date time as UTC Date-Time format (optional)</param>
            /// <param name="toDate">To date time as UTC Date-Time format (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedResponseOfHistoryItem</returns>
            System.Threading.Tasks.Task<PaginatedResponseOfHistoryItem> FilteredListAsync (string id4n, bool? includePrivate = null, string organization = null, List<string> type = null, List<string> qualifier = null, DateTime? fromDate = null, DateTime? toDate = null, int? offset = null, int? limit = null);

                /// <summary>
                /// List history
                /// </summary>
                /// <remarks>
                /// Lists the history of a GUID
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="includePrivate">Also return private history entries (optional, default to true)</param>
            /// <param name="organization">Show only entries created by one of the given organizations. This parameter can be used multiple times. (optional)</param>
            /// <param name="type">Show only entries matching one of the given history item types. This parameter can be used multiple times. (optional)</param>
            /// <param name="qualifier">Show only entries matching one of the given history item qualifiers (additional property de.id4i.history.item.qualifier). This parameter can be used multiple times. (optional)</param>
            /// <param name="fromDate">From date time as UTC Date-Time format (optional)</param>
            /// <param name="toDate">To date time as UTC Date-Time format (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedResponseOfHistoryItem)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedResponseOfHistoryItem>> FilteredListAsyncWithHttpInfo (string id4n, bool? includePrivate = null, string organization = null, List<string> type = null, List<string> qualifier = null, DateTime? fromDate = null, DateTime? toDate = null, int? offset = null, int? limit = null);
                /// <summary>
                /// DEPRECATED - List history
                /// </summary>
                /// <remarks>
                /// DEPRECATED - please use filteredList with organization parameter to achieve the same functionality
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="organizationId">organizationId</param>
            /// <param name="includePrivate">Also return private history entries (optional, default to true)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedResponseOfHistoryItem</returns>
            System.Threading.Tasks.Task<PaginatedResponseOfHistoryItem> ListAsync (string id4n, string organizationId, bool? includePrivate = null, int? offset = null, int? limit = null);

                /// <summary>
                /// DEPRECATED - List history
                /// </summary>
                /// <remarks>
                /// DEPRECATED - please use filteredList with organization parameter to achieve the same functionality
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="organizationId">organizationId</param>
            /// <param name="includePrivate">Also return private history entries (optional, default to true)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedResponseOfHistoryItem)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedResponseOfHistoryItem>> ListAsyncWithHttpInfo (string id4n, string organizationId, bool? includePrivate = null, int? offset = null, int? limit = null);
                /// <summary>
                /// Get history item
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="organizationId">organizationId</param>
            /// <param name="sequenceId">sequenceId</param>
            /// <returns>Task of HistoryItem</returns>
            System.Threading.Tasks.Task<HistoryItem> RetrieveItemAsync (string id4n, string organizationId, int? sequenceId);

                /// <summary>
                /// Get history item
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="organizationId">organizationId</param>
            /// <param name="sequenceId">sequenceId</param>
            /// <returns>Task of ApiResponse (HistoryItem)</returns>
                System.Threading.Tasks.Task<ApiResponse<HistoryItem>> RetrieveItemAsyncWithHttpInfo (string id4n, string organizationId, int? sequenceId);
                /// <summary>
                /// Update history item
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="organizationId">organizationId</param>
            /// <param name="sequenceId">sequenceId</param>
            /// <param name="update">update</param>
            /// <returns>Task of HistoryItem</returns>
            System.Threading.Tasks.Task<HistoryItem> UpdateItemAsync (string id4n, string organizationId, int? sequenceId, HistoryItemUpdate update);

                /// <summary>
                /// Update history item
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="organizationId">organizationId</param>
            /// <param name="sequenceId">sequenceId</param>
            /// <param name="update">update</param>
            /// <returns>Task of ApiResponse (HistoryItem)</returns>
                System.Threading.Tasks.Task<ApiResponse<HistoryItem>> UpdateItemAsyncWithHttpInfo (string id4n, string organizationId, int? sequenceId, HistoryItemUpdate update);
                /// <summary>
                /// Set history item visibility
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="organizationId">organizationId</param>
            /// <param name="sequenceId">sequenceId</param>
            /// <param name="visibility">History item visibility restrictions</param>
            /// <returns>Task of HistoryItem</returns>
            System.Threading.Tasks.Task<HistoryItem> UpdateItemVisibilityAsync (string id4n, string organizationId, int? sequenceId, Visibility visibility);

                /// <summary>
                /// Set history item visibility
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="organizationId">organizationId</param>
            /// <param name="sequenceId">sequenceId</param>
            /// <param name="visibility">History item visibility restrictions</param>
            /// <returns>Task of ApiResponse (HistoryItem)</returns>
                System.Threading.Tasks.Task<ApiResponse<HistoryItem>> UpdateItemVisibilityAsyncWithHttpInfo (string id4n, string organizationId, int? sequenceId, Visibility visibility);
            #endregion Asynchronous Operations
        }

        /// <summary>
        /// Represents a collection of functions to interact with the API endpoints
        /// </summary>
    public partial class HistoryApi : IHistoryApi
        {
        private BlueRain.ID4i.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HistoryApi(String basePath)
        {
        this.Configuration = new Configuration { BasePath = basePath };

        ExceptionFactory = BlueRain.ID4i.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HistoryApi(Configuration configuration = null)
        {
        if (configuration == null) // use the default one in Configuration
        this.Configuration = Configuration.Default;
        else
        this.Configuration = configuration;

        ExceptionFactory = BlueRain.ID4i.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
        return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
        // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlueRain.ID4i.Client.ExceptionFactory ExceptionFactory
        {
        get
        {
        if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
        {
        throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
        }
        return _exceptionFactory;
        }
        set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
        return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
        this.Configuration.AddDefaultHeader(key, value);
        }

            /// <summary>
            /// Add history item Add a new history item
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="historyItem">The history item to publish</param>
        /// <returns></returns>
            public void AddItem (string id4n, HistoryItem historyItem)
            {
        AddItemWithHttpInfo(id4n, historyItem);
            }

            /// <summary>
            /// Add history item Add a new history item
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="historyItem">The history item to publish</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> AddItemWithHttpInfo (string id4n, HistoryItem historyItem)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling HistoryApi->AddItem");
                    // verify the required parameter 'historyItem' is set
                    if (historyItem == null)
                    throw new ApiException(400, "Missing required parameter 'historyItem' when calling HistoryApi->AddItem");

            var localVarPath = "./api/v1/history/{id4n}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (historyItem != null && historyItem.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(historyItem); // http body (model) parameter
                }
                else
                {
                localVarPostBody = historyItem; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("AddItem", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Add history item Add a new history item
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="historyItem">The history item to publish</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task AddItemAsync (string id4n, HistoryItem historyItem)
                {
            await AddItemAsyncWithHttpInfo(id4n, historyItem);

                }

                /// <summary>
                /// Add history item Add a new history item
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="historyItem">The history item to publish</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> AddItemAsyncWithHttpInfo (string id4n, HistoryItem historyItem)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling HistoryApi->AddItem");
                        // verify the required parameter 'historyItem' is set
                        if (historyItem == null)
                        throw new ApiException(400, "Missing required parameter 'historyItem' when calling HistoryApi->AddItem");

                var localVarPath = "./api/v1/history/{id4n}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (historyItem != null && historyItem.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(historyItem); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = historyItem; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("AddItem", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// List history Lists the history of a GUID
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="includePrivate">Also return private history entries (optional, default to true)</param>
        /// <param name="organization">Show only entries created by one of the given organizations. This parameter can be used multiple times. (optional)</param>
        /// <param name="type">Show only entries matching one of the given history item types. This parameter can be used multiple times. (optional)</param>
        /// <param name="qualifier">Show only entries matching one of the given history item qualifiers (additional property de.id4i.history.item.qualifier). This parameter can be used multiple times. (optional)</param>
        /// <param name="fromDate">From date time as UTC Date-Time format (optional)</param>
        /// <param name="toDate">To date time as UTC Date-Time format (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedResponseOfHistoryItem</returns>
            public PaginatedResponseOfHistoryItem FilteredList (string id4n, bool? includePrivate = null, string organization = null, List<string> type = null, List<string> qualifier = null, DateTime? fromDate = null, DateTime? toDate = null, int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedResponseOfHistoryItem> localVarResponse = FilteredListWithHttpInfo(id4n, includePrivate, organization, type, qualifier, fromDate, toDate, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// List history Lists the history of a GUID
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="includePrivate">Also return private history entries (optional, default to true)</param>
        /// <param name="organization">Show only entries created by one of the given organizations. This parameter can be used multiple times. (optional)</param>
        /// <param name="type">Show only entries matching one of the given history item types. This parameter can be used multiple times. (optional)</param>
        /// <param name="qualifier">Show only entries matching one of the given history item qualifiers (additional property de.id4i.history.item.qualifier). This parameter can be used multiple times. (optional)</param>
        /// <param name="fromDate">From date time as UTC Date-Time format (optional)</param>
        /// <param name="toDate">To date time as UTC Date-Time format (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedResponseOfHistoryItem</returns>
            public ApiResponse< PaginatedResponseOfHistoryItem > FilteredListWithHttpInfo (string id4n, bool? includePrivate = null, string organization = null, List<string> type = null, List<string> qualifier = null, DateTime? fromDate = null, DateTime? toDate = null, int? offset = null, int? limit = null)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling HistoryApi->FilteredList");

            var localVarPath = "./api/v1/history/{id4n}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (includePrivate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includePrivate", includePrivate)); // query parameter
                if (organization != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "organization", organization)); // query parameter
                if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
                if (qualifier != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "qualifier", qualifier)); // query parameter
                if (fromDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
                if (toDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("FilteredList", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedResponseOfHistoryItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedResponseOfHistoryItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedResponseOfHistoryItem)));
            }

                /// <summary>
                /// List history Lists the history of a GUID
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="includePrivate">Also return private history entries (optional, default to true)</param>
            /// <param name="organization">Show only entries created by one of the given organizations. This parameter can be used multiple times. (optional)</param>
            /// <param name="type">Show only entries matching one of the given history item types. This parameter can be used multiple times. (optional)</param>
            /// <param name="qualifier">Show only entries matching one of the given history item qualifiers (additional property de.id4i.history.item.qualifier). This parameter can be used multiple times. (optional)</param>
            /// <param name="fromDate">From date time as UTC Date-Time format (optional)</param>
            /// <param name="toDate">To date time as UTC Date-Time format (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedResponseOfHistoryItem</returns>
            public async System.Threading.Tasks.Task<PaginatedResponseOfHistoryItem> FilteredListAsync (string id4n, bool? includePrivate = null, string organization = null, List<string> type = null, List<string> qualifier = null, DateTime? fromDate = null, DateTime? toDate = null, int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedResponseOfHistoryItem> localVarResponse = await FilteredListAsyncWithHttpInfo(id4n, includePrivate, organization, type, qualifier, fromDate, toDate, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// List history Lists the history of a GUID
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="includePrivate">Also return private history entries (optional, default to true)</param>
            /// <param name="organization">Show only entries created by one of the given organizations. This parameter can be used multiple times. (optional)</param>
            /// <param name="type">Show only entries matching one of the given history item types. This parameter can be used multiple times. (optional)</param>
            /// <param name="qualifier">Show only entries matching one of the given history item qualifiers (additional property de.id4i.history.item.qualifier). This parameter can be used multiple times. (optional)</param>
            /// <param name="fromDate">From date time as UTC Date-Time format (optional)</param>
            /// <param name="toDate">To date time as UTC Date-Time format (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedResponseOfHistoryItem)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedResponseOfHistoryItem>> FilteredListAsyncWithHttpInfo (string id4n, bool? includePrivate = null, string organization = null, List<string> type = null, List<string> qualifier = null, DateTime? fromDate = null, DateTime? toDate = null, int? offset = null, int? limit = null)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling HistoryApi->FilteredList");

                var localVarPath = "./api/v1/history/{id4n}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (includePrivate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includePrivate", includePrivate)); // query parameter
                    if (organization != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "organization", organization)); // query parameter
                    if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
                    if (qualifier != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "qualifier", qualifier)); // query parameter
                    if (fromDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
                    if (toDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("FilteredList", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedResponseOfHistoryItem>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedResponseOfHistoryItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedResponseOfHistoryItem)));
                }

            /// <summary>
            /// DEPRECATED - List history DEPRECATED - please use filteredList with organization parameter to achieve the same functionality
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="includePrivate">Also return private history entries (optional, default to true)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedResponseOfHistoryItem</returns>
            public PaginatedResponseOfHistoryItem List (string id4n, string organizationId, bool? includePrivate = null, int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedResponseOfHistoryItem> localVarResponse = ListWithHttpInfo(id4n, organizationId, includePrivate, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// DEPRECATED - List history DEPRECATED - please use filteredList with organization parameter to achieve the same functionality
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="includePrivate">Also return private history entries (optional, default to true)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedResponseOfHistoryItem</returns>
            public ApiResponse< PaginatedResponseOfHistoryItem > ListWithHttpInfo (string id4n, string organizationId, bool? includePrivate = null, int? offset = null, int? limit = null)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling HistoryApi->List");
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling HistoryApi->List");

            var localVarPath = "./api/v1/history/{id4n}/{organizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (includePrivate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includePrivate", includePrivate)); // query parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("List", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedResponseOfHistoryItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedResponseOfHistoryItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedResponseOfHistoryItem)));
            }

                /// <summary>
                /// DEPRECATED - List history DEPRECATED - please use filteredList with organization parameter to achieve the same functionality
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="organizationId">organizationId</param>
            /// <param name="includePrivate">Also return private history entries (optional, default to true)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedResponseOfHistoryItem</returns>
            public async System.Threading.Tasks.Task<PaginatedResponseOfHistoryItem> ListAsync (string id4n, string organizationId, bool? includePrivate = null, int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedResponseOfHistoryItem> localVarResponse = await ListAsyncWithHttpInfo(id4n, organizationId, includePrivate, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// DEPRECATED - List history DEPRECATED - please use filteredList with organization parameter to achieve the same functionality
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="organizationId">organizationId</param>
            /// <param name="includePrivate">Also return private history entries (optional, default to true)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedResponseOfHistoryItem)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedResponseOfHistoryItem>> ListAsyncWithHttpInfo (string id4n, string organizationId, bool? includePrivate = null, int? offset = null, int? limit = null)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling HistoryApi->List");
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling HistoryApi->List");

                var localVarPath = "./api/v1/history/{id4n}/{organizationId}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (includePrivate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includePrivate", includePrivate)); // query parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedResponseOfHistoryItem>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedResponseOfHistoryItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedResponseOfHistoryItem)));
                }

            /// <summary>
            /// Get history item 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="sequenceId">sequenceId</param>
        /// <returns>HistoryItem</returns>
            public HistoryItem RetrieveItem (string id4n, string organizationId, int? sequenceId)
            {
        ApiResponse<HistoryItem> localVarResponse = RetrieveItemWithHttpInfo(id4n, organizationId, sequenceId);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Get history item 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="sequenceId">sequenceId</param>
        /// <returns>ApiResponse of HistoryItem</returns>
            public ApiResponse< HistoryItem > RetrieveItemWithHttpInfo (string id4n, string organizationId, int? sequenceId)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling HistoryApi->RetrieveItem");
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling HistoryApi->RetrieveItem");
                    // verify the required parameter 'sequenceId' is set
                    if (sequenceId == null)
                    throw new ApiException(400, "Missing required parameter 'sequenceId' when calling HistoryApi->RetrieveItem");

            var localVarPath = "./api/v1/history/{id4n}/{organizationId}/{sequenceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (sequenceId != null) localVarPathParams.Add("sequenceId", Configuration.ApiClient.ParameterToString(sequenceId)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("RetrieveItem", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<HistoryItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (HistoryItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HistoryItem)));
            }

                /// <summary>
                /// Get history item 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="organizationId">organizationId</param>
            /// <param name="sequenceId">sequenceId</param>
            /// <returns>Task of HistoryItem</returns>
            public async System.Threading.Tasks.Task<HistoryItem> RetrieveItemAsync (string id4n, string organizationId, int? sequenceId)
                {
            ApiResponse<HistoryItem> localVarResponse = await RetrieveItemAsyncWithHttpInfo(id4n, organizationId, sequenceId);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Get history item 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="organizationId">organizationId</param>
            /// <param name="sequenceId">sequenceId</param>
            /// <returns>Task of ApiResponse (HistoryItem)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<HistoryItem>> RetrieveItemAsyncWithHttpInfo (string id4n, string organizationId, int? sequenceId)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling HistoryApi->RetrieveItem");
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling HistoryApi->RetrieveItem");
                        // verify the required parameter 'sequenceId' is set
                        if (sequenceId == null)
                        throw new ApiException(400, "Missing required parameter 'sequenceId' when calling HistoryApi->RetrieveItem");

                var localVarPath = "./api/v1/history/{id4n}/{organizationId}/{sequenceId}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (sequenceId != null) localVarPathParams.Add("sequenceId", Configuration.ApiClient.ParameterToString(sequenceId)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("RetrieveItem", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<HistoryItem>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (HistoryItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HistoryItem)));
                }

            /// <summary>
            /// Update history item 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="sequenceId">sequenceId</param>
        /// <param name="update">update</param>
        /// <returns>HistoryItem</returns>
            public HistoryItem UpdateItem (string id4n, string organizationId, int? sequenceId, HistoryItemUpdate update)
            {
        ApiResponse<HistoryItem> localVarResponse = UpdateItemWithHttpInfo(id4n, organizationId, sequenceId, update);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Update history item 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="sequenceId">sequenceId</param>
        /// <param name="update">update</param>
        /// <returns>ApiResponse of HistoryItem</returns>
            public ApiResponse< HistoryItem > UpdateItemWithHttpInfo (string id4n, string organizationId, int? sequenceId, HistoryItemUpdate update)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling HistoryApi->UpdateItem");
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling HistoryApi->UpdateItem");
                    // verify the required parameter 'sequenceId' is set
                    if (sequenceId == null)
                    throw new ApiException(400, "Missing required parameter 'sequenceId' when calling HistoryApi->UpdateItem");
                    // verify the required parameter 'update' is set
                    if (update == null)
                    throw new ApiException(400, "Missing required parameter 'update' when calling HistoryApi->UpdateItem");

            var localVarPath = "./api/v1/history/{id4n}/{organizationId}/{sequenceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (sequenceId != null) localVarPathParams.Add("sequenceId", Configuration.ApiClient.ParameterToString(sequenceId)); // path parameter
                if (update != null && update.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(update); // http body (model) parameter
                }
                else
                {
                localVarPostBody = update; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("UpdateItem", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<HistoryItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (HistoryItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HistoryItem)));
            }

                /// <summary>
                /// Update history item 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="organizationId">organizationId</param>
            /// <param name="sequenceId">sequenceId</param>
            /// <param name="update">update</param>
            /// <returns>Task of HistoryItem</returns>
            public async System.Threading.Tasks.Task<HistoryItem> UpdateItemAsync (string id4n, string organizationId, int? sequenceId, HistoryItemUpdate update)
                {
            ApiResponse<HistoryItem> localVarResponse = await UpdateItemAsyncWithHttpInfo(id4n, organizationId, sequenceId, update);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Update history item 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="organizationId">organizationId</param>
            /// <param name="sequenceId">sequenceId</param>
            /// <param name="update">update</param>
            /// <returns>Task of ApiResponse (HistoryItem)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<HistoryItem>> UpdateItemAsyncWithHttpInfo (string id4n, string organizationId, int? sequenceId, HistoryItemUpdate update)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling HistoryApi->UpdateItem");
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling HistoryApi->UpdateItem");
                        // verify the required parameter 'sequenceId' is set
                        if (sequenceId == null)
                        throw new ApiException(400, "Missing required parameter 'sequenceId' when calling HistoryApi->UpdateItem");
                        // verify the required parameter 'update' is set
                        if (update == null)
                        throw new ApiException(400, "Missing required parameter 'update' when calling HistoryApi->UpdateItem");

                var localVarPath = "./api/v1/history/{id4n}/{organizationId}/{sequenceId}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (sequenceId != null) localVarPathParams.Add("sequenceId", Configuration.ApiClient.ParameterToString(sequenceId)); // path parameter
                    if (update != null && update.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(update); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = update; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("UpdateItem", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<HistoryItem>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (HistoryItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HistoryItem)));
                }

            /// <summary>
            /// Set history item visibility 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="sequenceId">sequenceId</param>
        /// <param name="visibility">History item visibility restrictions</param>
        /// <returns>HistoryItem</returns>
            public HistoryItem UpdateItemVisibility (string id4n, string organizationId, int? sequenceId, Visibility visibility)
            {
        ApiResponse<HistoryItem> localVarResponse = UpdateItemVisibilityWithHttpInfo(id4n, organizationId, sequenceId, visibility);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Set history item visibility 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="sequenceId">sequenceId</param>
        /// <param name="visibility">History item visibility restrictions</param>
        /// <returns>ApiResponse of HistoryItem</returns>
            public ApiResponse< HistoryItem > UpdateItemVisibilityWithHttpInfo (string id4n, string organizationId, int? sequenceId, Visibility visibility)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling HistoryApi->UpdateItemVisibility");
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling HistoryApi->UpdateItemVisibility");
                    // verify the required parameter 'sequenceId' is set
                    if (sequenceId == null)
                    throw new ApiException(400, "Missing required parameter 'sequenceId' when calling HistoryApi->UpdateItemVisibility");
                    // verify the required parameter 'visibility' is set
                    if (visibility == null)
                    throw new ApiException(400, "Missing required parameter 'visibility' when calling HistoryApi->UpdateItemVisibility");

            var localVarPath = "./api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (sequenceId != null) localVarPathParams.Add("sequenceId", Configuration.ApiClient.ParameterToString(sequenceId)); // path parameter
                if (visibility != null && visibility.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(visibility); // http body (model) parameter
                }
                else
                {
                localVarPostBody = visibility; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("UpdateItemVisibility", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<HistoryItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (HistoryItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HistoryItem)));
            }

                /// <summary>
                /// Set history item visibility 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="organizationId">organizationId</param>
            /// <param name="sequenceId">sequenceId</param>
            /// <param name="visibility">History item visibility restrictions</param>
            /// <returns>Task of HistoryItem</returns>
            public async System.Threading.Tasks.Task<HistoryItem> UpdateItemVisibilityAsync (string id4n, string organizationId, int? sequenceId, Visibility visibility)
                {
            ApiResponse<HistoryItem> localVarResponse = await UpdateItemVisibilityAsyncWithHttpInfo(id4n, organizationId, sequenceId, visibility);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Set history item visibility 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="organizationId">organizationId</param>
            /// <param name="sequenceId">sequenceId</param>
            /// <param name="visibility">History item visibility restrictions</param>
            /// <returns>Task of ApiResponse (HistoryItem)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<HistoryItem>> UpdateItemVisibilityAsyncWithHttpInfo (string id4n, string organizationId, int? sequenceId, Visibility visibility)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling HistoryApi->UpdateItemVisibility");
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling HistoryApi->UpdateItemVisibility");
                        // verify the required parameter 'sequenceId' is set
                        if (sequenceId == null)
                        throw new ApiException(400, "Missing required parameter 'sequenceId' when calling HistoryApi->UpdateItemVisibility");
                        // verify the required parameter 'visibility' is set
                        if (visibility == null)
                        throw new ApiException(400, "Missing required parameter 'visibility' when calling HistoryApi->UpdateItemVisibility");

                var localVarPath = "./api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (sequenceId != null) localVarPathParams.Add("sequenceId", Configuration.ApiClient.ParameterToString(sequenceId)); // path parameter
                    if (visibility != null && visibility.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(visibility); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = visibility; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("UpdateItemVisibility", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<HistoryItem>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (HistoryItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HistoryItem)));
                }

        }
    }