/* 
 * ID4i API
 *
 * ID4i HTTP API
 *
 * OpenAPI spec version: 0.9.0
 * Contact: info@bluerain.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
    using RestSharp.Portable;
using BlueRain.ID4i.Client;
using BlueRain.ID4i.Model;
using Guid = BlueRain.ID4i.Model.Guid;

namespace BlueRain.ID4i.Api
{
    /// <summary>
        /// Represents a collection of functions to interact with the API endpoints
        /// </summary>
    public interface IAccountsApi : IApiAccessor
    {
    #region Synchronous Operations
        /// <summary>
            /// Add role(s) to user
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization</param>
        /// <param name="username">username</param>
        /// <param name="changeRoleRequest">changeRoleRequest</param>
        /// <returns></returns>
        void AddUserRoles (string organizationId, string username, ChangeRoleRequest changeRoleRequest);

        /// <summary>
            /// Add role(s) to user
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization</param>
        /// <param name="username">username</param>
        /// <param name="changeRoleRequest">changeRoleRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddUserRolesWithHttpInfo (string organizationId, string username, ChangeRoleRequest changeRoleRequest);
        /// <summary>
            /// Complete registration
            /// </summary>
        /// <remarks>
            /// Completing a registration e.g. for invited users. Finish registration with a username and a password.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="completeRegistration">Contains the verification token, the username and the initial password.</param>
        /// <returns></returns>
        void CompleteRegistration (CompleteUserRegistrationRequest completeRegistration);

        /// <summary>
            /// Complete registration
            /// </summary>
        /// <remarks>
            /// Completing a registration e.g. for invited users. Finish registration with a username and a password.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="completeRegistration">Contains the verification token, the username and the initial password.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CompleteRegistrationWithHttpInfo (CompleteUserRegistrationRequest completeRegistration);
        /// <summary>
            /// Find by username
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username</param>
        /// <returns>UserPresentation</returns>
        UserPresentation FindUserByUsername (string username);

        /// <summary>
            /// Find by username
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username</param>
        /// <returns>ApiResponse of UserPresentation</returns>
        ApiResponse<UserPresentation> FindUserByUsernameWithHttpInfo (string username);
        /// <summary>
            /// Find users
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usernamePrefix"> (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedUserPresentationResponse</returns>
        PaginatedUserPresentationResponse FindUsers (string usernamePrefix = null, int? offset = null, int? limit = null);

        /// <summary>
            /// Find users
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usernamePrefix"> (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedUserPresentationResponse</returns>
        ApiResponse<PaginatedUserPresentationResponse> FindUsersWithHttpInfo (string usernamePrefix = null, int? offset = null, int? limit = null);
        /// <summary>
            /// List users and their roles
            /// </summary>
        /// <remarks>
            /// Listing users and their roles in a paginated manner.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedUserRolesResponse</returns>
        PaginatedUserRolesResponse GetAllOrganizationRoles (string organizationId, int? offset = null, int? limit = null);

        /// <summary>
            /// List users and their roles
            /// </summary>
        /// <remarks>
            /// Listing users and their roles in a paginated manner.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedUserRolesResponse</returns>
        ApiResponse<PaginatedUserRolesResponse> GetAllOrganizationRolesWithHttpInfo (string organizationId, int? offset = null, int? limit = null);
        /// <summary>
            /// Retrieve organizations of user
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedOrganizationResponse</returns>
        PaginatedOrganizationResponse GetOrganizationsOfUser (string role = null, int? offset = null, int? limit = null);

        /// <summary>
            /// Retrieve organizations of user
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedOrganizationResponse</returns>
        ApiResponse<PaginatedOrganizationResponse> GetOrganizationsOfUserWithHttpInfo (string role = null, int? offset = null, int? limit = null);
        /// <summary>
            /// Get user roles by username
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization</param>
        /// <param name="username">username</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedStringResponse</returns>
        PaginatedStringResponse GetUserRoles (string organizationId, string username, int? offset = null, int? limit = null);

        /// <summary>
            /// Get user roles by username
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization</param>
        /// <param name="username">username</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedStringResponse</returns>
        ApiResponse<PaginatedStringResponse> GetUserRolesWithHttpInfo (string organizationId, string username, int? offset = null, int? limit = null);
        /// <summary>
            /// Find users in organization
            /// </summary>
        /// <remarks>
            /// Finding users in the specified organization in a paginated manner.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedUserPresentationResponse</returns>
        PaginatedUserPresentationResponse GetUsersOfOrganization (string organizationId, int? offset = null, int? limit = null);

        /// <summary>
            /// Find users in organization
            /// </summary>
        /// <remarks>
            /// Finding users in the specified organization in a paginated manner.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedUserPresentationResponse</returns>
        ApiResponse<PaginatedUserPresentationResponse> GetUsersOfOrganizationWithHttpInfo (string organizationId, int? offset = null, int? limit = null);
        /// <summary>
            /// Invite Users
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization where users should be invited</param>
        /// <param name="invitationList">invitationList</param>
        /// <returns></returns>
        void InviteUsers (string organizationId, OrganizationUserInvitationListRequest invitationList);

        /// <summary>
            /// Invite Users
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization where users should be invited</param>
        /// <param name="invitationList">invitationList</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InviteUsersWithHttpInfo (string organizationId, OrganizationUserInvitationListRequest invitationList);
        /// <summary>
            /// List roles
            /// </summary>
        /// <remarks>
            /// Listing of roles.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="privilege">If specified the roles will be filtered containing that privilege. (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>RoleResponse</returns>
        RoleResponse ListAllRoles (string privilege = null, int? offset = null, int? limit = null);

        /// <summary>
            /// List roles
            /// </summary>
        /// <remarks>
            /// Listing of roles.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="privilege">If specified the roles will be filtered containing that privilege. (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        ApiResponse<RoleResponse> ListAllRolesWithHttpInfo (string privilege = null, int? offset = null, int? limit = null);
        /// <summary>
            /// 
            /// </summary>
        /// <remarks>
            /// ID4i API Login
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCredentials"></param>
        /// <returns></returns>
        void Login (AccountCredentials accountCredentials);

        /// <summary>
            /// 
            /// </summary>
        /// <remarks>
            /// ID4i API Login
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCredentials"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LoginWithHttpInfo (AccountCredentials accountCredentials);
        /// <summary>
            /// Register user
            /// </summary>
        /// <remarks>
            /// Registering a new user.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRegistration">The user information about the new created user.</param>
        /// <returns>UserRegistrationResponse</returns>
        UserRegistrationResponse RegisterUser (UserRegistrationRequest userRegistration);

        /// <summary>
            /// Register user
            /// </summary>
        /// <remarks>
            /// Registering a new user.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRegistration">The user information about the new created user.</param>
        /// <returns>ApiResponse of UserRegistrationResponse</returns>
        ApiResponse<UserRegistrationResponse> RegisterUserWithHttpInfo (UserRegistrationRequest userRegistration);
        /// <summary>
            /// Remove role(s) from user
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization</param>
        /// <param name="username">username</param>
        /// <param name="changeRoleRequest">changeRoleRequest</param>
        /// <returns></returns>
        void RemoveUserRoles (string organizationId, string username, ChangeRoleRequest changeRoleRequest);

        /// <summary>
            /// Remove role(s) from user
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization</param>
        /// <param name="username">username</param>
        /// <param name="changeRoleRequest">changeRoleRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveUserRolesWithHttpInfo (string organizationId, string username, ChangeRoleRequest changeRoleRequest);
        /// <summary>
            /// Request password reset
            /// </summary>
        /// <remarks>
            /// Requesting a reset for a new password. 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetRequest">Contains the required information to request a new password.</param>
        /// <returns>SimpleMessageResponse</returns>
        SimpleMessageResponse RequestPasswordReset (PasswordResetRequest resetRequest);

        /// <summary>
            /// Request password reset
            /// </summary>
        /// <remarks>
            /// Requesting a reset for a new password. 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetRequest">Contains the required information to request a new password.</param>
        /// <returns>ApiResponse of SimpleMessageResponse</returns>
        ApiResponse<SimpleMessageResponse> RequestPasswordResetWithHttpInfo (PasswordResetRequest resetRequest);
        /// <summary>
            /// Verify password reset
            /// </summary>
        /// <remarks>
            /// Setting a new password and verifying the request to set the password.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationRequest">Contains the new password and the verification token to set the new password.</param>
        /// <returns>SimpleMessageResponse</returns>
        SimpleMessageResponse VerifyPasswordReset (PasswordResetVerificationRequest verificationRequest);

        /// <summary>
            /// Verify password reset
            /// </summary>
        /// <remarks>
            /// Setting a new password and verifying the request to set the password.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationRequest">Contains the new password and the verification token to set the new password.</param>
        /// <returns>ApiResponse of SimpleMessageResponse</returns>
        ApiResponse<SimpleMessageResponse> VerifyPasswordResetWithHttpInfo (PasswordResetVerificationRequest verificationRequest);
        /// <summary>
            /// Verify registration
            /// </summary>
        /// <remarks>
            /// Verifies a new user registration.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token for user verification.</param>
        /// <returns></returns>
        void VerifyUserRegistration (RegistrationVerificationTokenPresentation token);

        /// <summary>
            /// Verify registration
            /// </summary>
        /// <remarks>
            /// Verifies a new user registration.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token for user verification.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VerifyUserRegistrationWithHttpInfo (RegistrationVerificationTokenPresentation token);
        #endregion Synchronous Operations
            #region Asynchronous Operations
                /// <summary>
                /// Add role(s) to user
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization</param>
            /// <param name="username">username</param>
            /// <param name="changeRoleRequest">changeRoleRequest</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task AddUserRolesAsync (string organizationId, string username, ChangeRoleRequest changeRoleRequest);

                /// <summary>
                /// Add role(s) to user
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization</param>
            /// <param name="username">username</param>
            /// <param name="changeRoleRequest">changeRoleRequest</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> AddUserRolesAsyncWithHttpInfo (string organizationId, string username, ChangeRoleRequest changeRoleRequest);
                /// <summary>
                /// Complete registration
                /// </summary>
                /// <remarks>
                /// Completing a registration e.g. for invited users. Finish registration with a username and a password.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="completeRegistration">Contains the verification token, the username and the initial password.</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task CompleteRegistrationAsync (CompleteUserRegistrationRequest completeRegistration);

                /// <summary>
                /// Complete registration
                /// </summary>
                /// <remarks>
                /// Completing a registration e.g. for invited users. Finish registration with a username and a password.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="completeRegistration">Contains the verification token, the username and the initial password.</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> CompleteRegistrationAsyncWithHttpInfo (CompleteUserRegistrationRequest completeRegistration);
                /// <summary>
                /// Find by username
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="username">username</param>
            /// <returns>Task of UserPresentation</returns>
            System.Threading.Tasks.Task<UserPresentation> FindUserByUsernameAsync (string username);

                /// <summary>
                /// Find by username
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="username">username</param>
            /// <returns>Task of ApiResponse (UserPresentation)</returns>
                System.Threading.Tasks.Task<ApiResponse<UserPresentation>> FindUserByUsernameAsyncWithHttpInfo (string username);
                /// <summary>
                /// Find users
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="usernamePrefix"> (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedUserPresentationResponse</returns>
            System.Threading.Tasks.Task<PaginatedUserPresentationResponse> FindUsersAsync (string usernamePrefix = null, int? offset = null, int? limit = null);

                /// <summary>
                /// Find users
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="usernamePrefix"> (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedUserPresentationResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedUserPresentationResponse>> FindUsersAsyncWithHttpInfo (string usernamePrefix = null, int? offset = null, int? limit = null);
                /// <summary>
                /// List users and their roles
                /// </summary>
                /// <remarks>
                /// Listing users and their roles in a paginated manner.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedUserRolesResponse</returns>
            System.Threading.Tasks.Task<PaginatedUserRolesResponse> GetAllOrganizationRolesAsync (string organizationId, int? offset = null, int? limit = null);

                /// <summary>
                /// List users and their roles
                /// </summary>
                /// <remarks>
                /// Listing users and their roles in a paginated manner.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedUserRolesResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedUserRolesResponse>> GetAllOrganizationRolesAsyncWithHttpInfo (string organizationId, int? offset = null, int? limit = null);
                /// <summary>
                /// Retrieve organizations of user
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="role">role (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedOrganizationResponse</returns>
            System.Threading.Tasks.Task<PaginatedOrganizationResponse> GetOrganizationsOfUserAsync (string role = null, int? offset = null, int? limit = null);

                /// <summary>
                /// Retrieve organizations of user
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="role">role (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedOrganizationResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedOrganizationResponse>> GetOrganizationsOfUserAsyncWithHttpInfo (string role = null, int? offset = null, int? limit = null);
                /// <summary>
                /// Get user roles by username
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization</param>
            /// <param name="username">username</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedStringResponse</returns>
            System.Threading.Tasks.Task<PaginatedStringResponse> GetUserRolesAsync (string organizationId, string username, int? offset = null, int? limit = null);

                /// <summary>
                /// Get user roles by username
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization</param>
            /// <param name="username">username</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedStringResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedStringResponse>> GetUserRolesAsyncWithHttpInfo (string organizationId, string username, int? offset = null, int? limit = null);
                /// <summary>
                /// Find users in organization
                /// </summary>
                /// <remarks>
                /// Finding users in the specified organization in a paginated manner.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedUserPresentationResponse</returns>
            System.Threading.Tasks.Task<PaginatedUserPresentationResponse> GetUsersOfOrganizationAsync (string organizationId, int? offset = null, int? limit = null);

                /// <summary>
                /// Find users in organization
                /// </summary>
                /// <remarks>
                /// Finding users in the specified organization in a paginated manner.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedUserPresentationResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedUserPresentationResponse>> GetUsersOfOrganizationAsyncWithHttpInfo (string organizationId, int? offset = null, int? limit = null);
                /// <summary>
                /// Invite Users
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization where users should be invited</param>
            /// <param name="invitationList">invitationList</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task InviteUsersAsync (string organizationId, OrganizationUserInvitationListRequest invitationList);

                /// <summary>
                /// Invite Users
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization where users should be invited</param>
            /// <param name="invitationList">invitationList</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> InviteUsersAsyncWithHttpInfo (string organizationId, OrganizationUserInvitationListRequest invitationList);
                /// <summary>
                /// List roles
                /// </summary>
                /// <remarks>
                /// Listing of roles.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="privilege">If specified the roles will be filtered containing that privilege. (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of RoleResponse</returns>
            System.Threading.Tasks.Task<RoleResponse> ListAllRolesAsync (string privilege = null, int? offset = null, int? limit = null);

                /// <summary>
                /// List roles
                /// </summary>
                /// <remarks>
                /// Listing of roles.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="privilege">If specified the roles will be filtered containing that privilege. (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (RoleResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<RoleResponse>> ListAllRolesAsyncWithHttpInfo (string privilege = null, int? offset = null, int? limit = null);
                /// <summary>
                /// 
                /// </summary>
                /// <remarks>
                /// ID4i API Login
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="accountCredentials"></param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task LoginAsync (AccountCredentials accountCredentials);

                /// <summary>
                /// 
                /// </summary>
                /// <remarks>
                /// ID4i API Login
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="accountCredentials"></param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> LoginAsyncWithHttpInfo (AccountCredentials accountCredentials);
                /// <summary>
                /// Register user
                /// </summary>
                /// <remarks>
                /// Registering a new user.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="userRegistration">The user information about the new created user.</param>
            /// <returns>Task of UserRegistrationResponse</returns>
            System.Threading.Tasks.Task<UserRegistrationResponse> RegisterUserAsync (UserRegistrationRequest userRegistration);

                /// <summary>
                /// Register user
                /// </summary>
                /// <remarks>
                /// Registering a new user.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="userRegistration">The user information about the new created user.</param>
            /// <returns>Task of ApiResponse (UserRegistrationResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<UserRegistrationResponse>> RegisterUserAsyncWithHttpInfo (UserRegistrationRequest userRegistration);
                /// <summary>
                /// Remove role(s) from user
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization</param>
            /// <param name="username">username</param>
            /// <param name="changeRoleRequest">changeRoleRequest</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task RemoveUserRolesAsync (string organizationId, string username, ChangeRoleRequest changeRoleRequest);

                /// <summary>
                /// Remove role(s) from user
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization</param>
            /// <param name="username">username</param>
            /// <param name="changeRoleRequest">changeRoleRequest</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserRolesAsyncWithHttpInfo (string organizationId, string username, ChangeRoleRequest changeRoleRequest);
                /// <summary>
                /// Request password reset
                /// </summary>
                /// <remarks>
                /// Requesting a reset for a new password. 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="resetRequest">Contains the required information to request a new password.</param>
            /// <returns>Task of SimpleMessageResponse</returns>
            System.Threading.Tasks.Task<SimpleMessageResponse> RequestPasswordResetAsync (PasswordResetRequest resetRequest);

                /// <summary>
                /// Request password reset
                /// </summary>
                /// <remarks>
                /// Requesting a reset for a new password. 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="resetRequest">Contains the required information to request a new password.</param>
            /// <returns>Task of ApiResponse (SimpleMessageResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<SimpleMessageResponse>> RequestPasswordResetAsyncWithHttpInfo (PasswordResetRequest resetRequest);
                /// <summary>
                /// Verify password reset
                /// </summary>
                /// <remarks>
                /// Setting a new password and verifying the request to set the password.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="verificationRequest">Contains the new password and the verification token to set the new password.</param>
            /// <returns>Task of SimpleMessageResponse</returns>
            System.Threading.Tasks.Task<SimpleMessageResponse> VerifyPasswordResetAsync (PasswordResetVerificationRequest verificationRequest);

                /// <summary>
                /// Verify password reset
                /// </summary>
                /// <remarks>
                /// Setting a new password and verifying the request to set the password.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="verificationRequest">Contains the new password and the verification token to set the new password.</param>
            /// <returns>Task of ApiResponse (SimpleMessageResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<SimpleMessageResponse>> VerifyPasswordResetAsyncWithHttpInfo (PasswordResetVerificationRequest verificationRequest);
                /// <summary>
                /// Verify registration
                /// </summary>
                /// <remarks>
                /// Verifies a new user registration.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="token">The token for user verification.</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task VerifyUserRegistrationAsync (RegistrationVerificationTokenPresentation token);

                /// <summary>
                /// Verify registration
                /// </summary>
                /// <remarks>
                /// Verifies a new user registration.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="token">The token for user verification.</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> VerifyUserRegistrationAsyncWithHttpInfo (RegistrationVerificationTokenPresentation token);
            #endregion Asynchronous Operations
        }

        /// <summary>
        /// Represents a collection of functions to interact with the API endpoints
        /// </summary>
    public partial class AccountsApi : IAccountsApi
        {
        private BlueRain.ID4i.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountsApi(String basePath)
        {
        this.Configuration = new Configuration { BasePath = basePath };

        ExceptionFactory = BlueRain.ID4i.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountsApi(Configuration configuration = null)
        {
        if (configuration == null) // use the default one in Configuration
        this.Configuration = Configuration.Default;
        else
        this.Configuration = configuration;

        ExceptionFactory = BlueRain.ID4i.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
        return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
        // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlueRain.ID4i.Client.ExceptionFactory ExceptionFactory
        {
        get
        {
        if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
        {
        throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
        }
        return _exceptionFactory;
        }
        set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
        return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
        this.Configuration.AddDefaultHeader(key, value);
        }

            /// <summary>
            /// Add role(s) to user 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization</param>
        /// <param name="username">username</param>
        /// <param name="changeRoleRequest">changeRoleRequest</param>
        /// <returns></returns>
            public void AddUserRoles (string organizationId, string username, ChangeRoleRequest changeRoleRequest)
            {
        AddUserRolesWithHttpInfo(organizationId, username, changeRoleRequest);
            }

            /// <summary>
            /// Add role(s) to user 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization</param>
        /// <param name="username">username</param>
        /// <param name="changeRoleRequest">changeRoleRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> AddUserRolesWithHttpInfo (string organizationId, string username, ChangeRoleRequest changeRoleRequest)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccountsApi->AddUserRoles");
                    // verify the required parameter 'username' is set
                    if (username == null)
                    throw new ApiException(400, "Missing required parameter 'username' when calling AccountsApi->AddUserRoles");
                    // verify the required parameter 'changeRoleRequest' is set
                    if (changeRoleRequest == null)
                    throw new ApiException(400, "Missing required parameter 'changeRoleRequest' when calling AccountsApi->AddUserRoles");

            var localVarPath = "./api/v1/organizations/{organizationId}/users/{username}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
                if (changeRoleRequest != null && changeRoleRequest.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(changeRoleRequest); // http body (model) parameter
                }
                else
                {
                localVarPostBody = changeRoleRequest; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("AddUserRoles", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Add role(s) to user 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization</param>
            /// <param name="username">username</param>
            /// <param name="changeRoleRequest">changeRoleRequest</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task AddUserRolesAsync (string organizationId, string username, ChangeRoleRequest changeRoleRequest)
                {
            await AddUserRolesAsyncWithHttpInfo(organizationId, username, changeRoleRequest);

                }

                /// <summary>
                /// Add role(s) to user 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization</param>
            /// <param name="username">username</param>
            /// <param name="changeRoleRequest">changeRoleRequest</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> AddUserRolesAsyncWithHttpInfo (string organizationId, string username, ChangeRoleRequest changeRoleRequest)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccountsApi->AddUserRoles");
                        // verify the required parameter 'username' is set
                        if (username == null)
                        throw new ApiException(400, "Missing required parameter 'username' when calling AccountsApi->AddUserRoles");
                        // verify the required parameter 'changeRoleRequest' is set
                        if (changeRoleRequest == null)
                        throw new ApiException(400, "Missing required parameter 'changeRoleRequest' when calling AccountsApi->AddUserRoles");

                var localVarPath = "./api/v1/organizations/{organizationId}/users/{username}/roles";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
                    if (changeRoleRequest != null && changeRoleRequest.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(changeRoleRequest); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = changeRoleRequest; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("AddUserRoles", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Complete registration Completing a registration e.g. for invited users. Finish registration with a username and a password.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="completeRegistration">Contains the verification token, the username and the initial password.</param>
        /// <returns></returns>
            public void CompleteRegistration (CompleteUserRegistrationRequest completeRegistration)
            {
        CompleteRegistrationWithHttpInfo(completeRegistration);
            }

            /// <summary>
            /// Complete registration Completing a registration e.g. for invited users. Finish registration with a username and a password.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="completeRegistration">Contains the verification token, the username and the initial password.</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> CompleteRegistrationWithHttpInfo (CompleteUserRegistrationRequest completeRegistration)
            {
                    // verify the required parameter 'completeRegistration' is set
                    if (completeRegistration == null)
                    throw new ApiException(400, "Missing required parameter 'completeRegistration' when calling AccountsApi->CompleteRegistration");

            var localVarPath = "./account/registration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (completeRegistration != null && completeRegistration.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(completeRegistration); // http body (model) parameter
                }
                else
                {
                localVarPostBody = completeRegistration; // byte array
                }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("CompleteRegistration", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Complete registration Completing a registration e.g. for invited users. Finish registration with a username and a password.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="completeRegistration">Contains the verification token, the username and the initial password.</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task CompleteRegistrationAsync (CompleteUserRegistrationRequest completeRegistration)
                {
            await CompleteRegistrationAsyncWithHttpInfo(completeRegistration);

                }

                /// <summary>
                /// Complete registration Completing a registration e.g. for invited users. Finish registration with a username and a password.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="completeRegistration">Contains the verification token, the username and the initial password.</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> CompleteRegistrationAsyncWithHttpInfo (CompleteUserRegistrationRequest completeRegistration)
                {
                        // verify the required parameter 'completeRegistration' is set
                        if (completeRegistration == null)
                        throw new ApiException(400, "Missing required parameter 'completeRegistration' when calling AccountsApi->CompleteRegistration");

                var localVarPath = "./account/registration";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (completeRegistration != null && completeRegistration.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(completeRegistration); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = completeRegistration; // byte array
                    }


                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("CompleteRegistration", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Find by username 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username</param>
        /// <returns>UserPresentation</returns>
            public UserPresentation FindUserByUsername (string username)
            {
        ApiResponse<UserPresentation> localVarResponse = FindUserByUsernameWithHttpInfo(username);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Find by username 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username</param>
        /// <returns>ApiResponse of UserPresentation</returns>
            public ApiResponse< UserPresentation > FindUserByUsernameWithHttpInfo (string username)
            {
                    // verify the required parameter 'username' is set
                    if (username == null)
                    throw new ApiException(400, "Missing required parameter 'username' when calling AccountsApi->FindUserByUsername");

            var localVarPath = "./api/v1/users/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("FindUserByUsername", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<UserPresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UserPresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserPresentation)));
            }

                /// <summary>
                /// Find by username 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="username">username</param>
            /// <returns>Task of UserPresentation</returns>
            public async System.Threading.Tasks.Task<UserPresentation> FindUserByUsernameAsync (string username)
                {
            ApiResponse<UserPresentation> localVarResponse = await FindUserByUsernameAsyncWithHttpInfo(username);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Find by username 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="username">username</param>
            /// <returns>Task of ApiResponse (UserPresentation)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<UserPresentation>> FindUserByUsernameAsyncWithHttpInfo (string username)
                {
                        // verify the required parameter 'username' is set
                        if (username == null)
                        throw new ApiException(400, "Missing required parameter 'username' when calling AccountsApi->FindUserByUsername");

                var localVarPath = "./api/v1/users/{username}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("FindUserByUsername", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<UserPresentation>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (UserPresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserPresentation)));
                }

            /// <summary>
            /// Find users 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usernamePrefix"> (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedUserPresentationResponse</returns>
            public PaginatedUserPresentationResponse FindUsers (string usernamePrefix = null, int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedUserPresentationResponse> localVarResponse = FindUsersWithHttpInfo(usernamePrefix, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Find users 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usernamePrefix"> (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedUserPresentationResponse</returns>
            public ApiResponse< PaginatedUserPresentationResponse > FindUsersWithHttpInfo (string usernamePrefix = null, int? offset = null, int? limit = null)
            {

            var localVarPath = "./api/v1/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (usernamePrefix != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "usernamePrefix", usernamePrefix)); // query parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("FindUsers", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedUserPresentationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedUserPresentationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedUserPresentationResponse)));
            }

                /// <summary>
                /// Find users 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="usernamePrefix"> (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedUserPresentationResponse</returns>
            public async System.Threading.Tasks.Task<PaginatedUserPresentationResponse> FindUsersAsync (string usernamePrefix = null, int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedUserPresentationResponse> localVarResponse = await FindUsersAsyncWithHttpInfo(usernamePrefix, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Find users 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="usernamePrefix"> (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedUserPresentationResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedUserPresentationResponse>> FindUsersAsyncWithHttpInfo (string usernamePrefix = null, int? offset = null, int? limit = null)
                {

                var localVarPath = "./api/v1/users";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (usernamePrefix != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "usernamePrefix", usernamePrefix)); // query parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("FindUsers", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedUserPresentationResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedUserPresentationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedUserPresentationResponse)));
                }

            /// <summary>
            /// List users and their roles Listing users and their roles in a paginated manner.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedUserRolesResponse</returns>
            public PaginatedUserRolesResponse GetAllOrganizationRoles (string organizationId, int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedUserRolesResponse> localVarResponse = GetAllOrganizationRolesWithHttpInfo(organizationId, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// List users and their roles Listing users and their roles in a paginated manner.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedUserRolesResponse</returns>
            public ApiResponse< PaginatedUserRolesResponse > GetAllOrganizationRolesWithHttpInfo (string organizationId, int? offset = null, int? limit = null)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccountsApi->GetAllOrganizationRoles");

            var localVarPath = "./api/v1/organizations/{organizationId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetAllOrganizationRoles", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedUserRolesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedUserRolesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedUserRolesResponse)));
            }

                /// <summary>
                /// List users and their roles Listing users and their roles in a paginated manner.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedUserRolesResponse</returns>
            public async System.Threading.Tasks.Task<PaginatedUserRolesResponse> GetAllOrganizationRolesAsync (string organizationId, int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedUserRolesResponse> localVarResponse = await GetAllOrganizationRolesAsyncWithHttpInfo(organizationId, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// List users and their roles Listing users and their roles in a paginated manner.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedUserRolesResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedUserRolesResponse>> GetAllOrganizationRolesAsyncWithHttpInfo (string organizationId, int? offset = null, int? limit = null)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccountsApi->GetAllOrganizationRoles");

                var localVarPath = "./api/v1/organizations/{organizationId}/roles";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetAllOrganizationRoles", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedUserRolesResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedUserRolesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedUserRolesResponse)));
                }

            /// <summary>
            /// Retrieve organizations of user 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedOrganizationResponse</returns>
            public PaginatedOrganizationResponse GetOrganizationsOfUser (string role = null, int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedOrganizationResponse> localVarResponse = GetOrganizationsOfUserWithHttpInfo(role, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Retrieve organizations of user 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedOrganizationResponse</returns>
            public ApiResponse< PaginatedOrganizationResponse > GetOrganizationsOfUserWithHttpInfo (string role = null, int? offset = null, int? limit = null)
            {

            var localVarPath = "./api/v1/user/organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (role != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "role", role)); // query parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetOrganizationsOfUser", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedOrganizationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedOrganizationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedOrganizationResponse)));
            }

                /// <summary>
                /// Retrieve organizations of user 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="role">role (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedOrganizationResponse</returns>
            public async System.Threading.Tasks.Task<PaginatedOrganizationResponse> GetOrganizationsOfUserAsync (string role = null, int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedOrganizationResponse> localVarResponse = await GetOrganizationsOfUserAsyncWithHttpInfo(role, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Retrieve organizations of user 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="role">role (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedOrganizationResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedOrganizationResponse>> GetOrganizationsOfUserAsyncWithHttpInfo (string role = null, int? offset = null, int? limit = null)
                {

                var localVarPath = "./api/v1/user/organizations";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (role != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "role", role)); // query parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetOrganizationsOfUser", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedOrganizationResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedOrganizationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedOrganizationResponse)));
                }

            /// <summary>
            /// Get user roles by username 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization</param>
        /// <param name="username">username</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedStringResponse</returns>
            public PaginatedStringResponse GetUserRoles (string organizationId, string username, int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedStringResponse> localVarResponse = GetUserRolesWithHttpInfo(organizationId, username, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Get user roles by username 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization</param>
        /// <param name="username">username</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedStringResponse</returns>
            public ApiResponse< PaginatedStringResponse > GetUserRolesWithHttpInfo (string organizationId, string username, int? offset = null, int? limit = null)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccountsApi->GetUserRoles");
                    // verify the required parameter 'username' is set
                    if (username == null)
                    throw new ApiException(400, "Missing required parameter 'username' when calling AccountsApi->GetUserRoles");

            var localVarPath = "./api/v1/organizations/{organizationId}/users/{username}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetUserRoles", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedStringResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedStringResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedStringResponse)));
            }

                /// <summary>
                /// Get user roles by username 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization</param>
            /// <param name="username">username</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedStringResponse</returns>
            public async System.Threading.Tasks.Task<PaginatedStringResponse> GetUserRolesAsync (string organizationId, string username, int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedStringResponse> localVarResponse = await GetUserRolesAsyncWithHttpInfo(organizationId, username, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Get user roles by username 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization</param>
            /// <param name="username">username</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedStringResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedStringResponse>> GetUserRolesAsyncWithHttpInfo (string organizationId, string username, int? offset = null, int? limit = null)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccountsApi->GetUserRoles");
                        // verify the required parameter 'username' is set
                        if (username == null)
                        throw new ApiException(400, "Missing required parameter 'username' when calling AccountsApi->GetUserRoles");

                var localVarPath = "./api/v1/organizations/{organizationId}/users/{username}/roles";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetUserRoles", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedStringResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedStringResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedStringResponse)));
                }

            /// <summary>
            /// Find users in organization Finding users in the specified organization in a paginated manner.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedUserPresentationResponse</returns>
            public PaginatedUserPresentationResponse GetUsersOfOrganization (string organizationId, int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedUserPresentationResponse> localVarResponse = GetUsersOfOrganizationWithHttpInfo(organizationId, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Find users in organization Finding users in the specified organization in a paginated manner.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedUserPresentationResponse</returns>
            public ApiResponse< PaginatedUserPresentationResponse > GetUsersOfOrganizationWithHttpInfo (string organizationId, int? offset = null, int? limit = null)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccountsApi->GetUsersOfOrganization");

            var localVarPath = "./api/v1/organizations/{organizationId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetUsersOfOrganization", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedUserPresentationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedUserPresentationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedUserPresentationResponse)));
            }

                /// <summary>
                /// Find users in organization Finding users in the specified organization in a paginated manner.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedUserPresentationResponse</returns>
            public async System.Threading.Tasks.Task<PaginatedUserPresentationResponse> GetUsersOfOrganizationAsync (string organizationId, int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedUserPresentationResponse> localVarResponse = await GetUsersOfOrganizationAsyncWithHttpInfo(organizationId, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Find users in organization Finding users in the specified organization in a paginated manner.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedUserPresentationResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedUserPresentationResponse>> GetUsersOfOrganizationAsyncWithHttpInfo (string organizationId, int? offset = null, int? limit = null)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccountsApi->GetUsersOfOrganization");

                var localVarPath = "./api/v1/organizations/{organizationId}/users";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetUsersOfOrganization", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedUserPresentationResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedUserPresentationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedUserPresentationResponse)));
                }

            /// <summary>
            /// Invite Users 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization where users should be invited</param>
        /// <param name="invitationList">invitationList</param>
        /// <returns></returns>
            public void InviteUsers (string organizationId, OrganizationUserInvitationListRequest invitationList)
            {
        InviteUsersWithHttpInfo(organizationId, invitationList);
            }

            /// <summary>
            /// Invite Users 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization where users should be invited</param>
        /// <param name="invitationList">invitationList</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> InviteUsersWithHttpInfo (string organizationId, OrganizationUserInvitationListRequest invitationList)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccountsApi->InviteUsers");
                    // verify the required parameter 'invitationList' is set
                    if (invitationList == null)
                    throw new ApiException(400, "Missing required parameter 'invitationList' when calling AccountsApi->InviteUsers");

            var localVarPath = "./api/v1/organizations/{organizationId}/users/invite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (invitationList != null && invitationList.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(invitationList); // http body (model) parameter
                }
                else
                {
                localVarPostBody = invitationList; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("InviteUsers", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Invite Users 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization where users should be invited</param>
            /// <param name="invitationList">invitationList</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task InviteUsersAsync (string organizationId, OrganizationUserInvitationListRequest invitationList)
                {
            await InviteUsersAsyncWithHttpInfo(organizationId, invitationList);

                }

                /// <summary>
                /// Invite Users 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization where users should be invited</param>
            /// <param name="invitationList">invitationList</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> InviteUsersAsyncWithHttpInfo (string organizationId, OrganizationUserInvitationListRequest invitationList)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccountsApi->InviteUsers");
                        // verify the required parameter 'invitationList' is set
                        if (invitationList == null)
                        throw new ApiException(400, "Missing required parameter 'invitationList' when calling AccountsApi->InviteUsers");

                var localVarPath = "./api/v1/organizations/{organizationId}/users/invite";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (invitationList != null && invitationList.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(invitationList); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = invitationList; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("InviteUsers", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// List roles Listing of roles.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="privilege">If specified the roles will be filtered containing that privilege. (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>RoleResponse</returns>
            public RoleResponse ListAllRoles (string privilege = null, int? offset = null, int? limit = null)
            {
        ApiResponse<RoleResponse> localVarResponse = ListAllRolesWithHttpInfo(privilege, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// List roles Listing of roles.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="privilege">If specified the roles will be filtered containing that privilege. (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of RoleResponse</returns>
            public ApiResponse< RoleResponse > ListAllRolesWithHttpInfo (string privilege = null, int? offset = null, int? limit = null)
            {

            var localVarPath = "./api/v1/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (privilege != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "privilege", privilege)); // query parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("ListAllRoles", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<RoleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RoleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResponse)));
            }

                /// <summary>
                /// List roles Listing of roles.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="privilege">If specified the roles will be filtered containing that privilege. (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of RoleResponse</returns>
            public async System.Threading.Tasks.Task<RoleResponse> ListAllRolesAsync (string privilege = null, int? offset = null, int? limit = null)
                {
            ApiResponse<RoleResponse> localVarResponse = await ListAllRolesAsyncWithHttpInfo(privilege, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// List roles Listing of roles.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="privilege">If specified the roles will be filtered containing that privilege. (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (RoleResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<RoleResponse>> ListAllRolesAsyncWithHttpInfo (string privilege = null, int? offset = null, int? limit = null)
                {

                var localVarPath = "./api/v1/roles";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (privilege != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "privilege", privilege)); // query parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("ListAllRoles", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<RoleResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (RoleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResponse)));
                }

            /// <summary>
            ///  ID4i API Login
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCredentials"></param>
        /// <returns></returns>
            public void Login (AccountCredentials accountCredentials)
            {
        LoginWithHttpInfo(accountCredentials);
            }

            /// <summary>
            ///  ID4i API Login
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountCredentials"></param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> LoginWithHttpInfo (AccountCredentials accountCredentials)
            {
                    // verify the required parameter 'accountCredentials' is set
                    if (accountCredentials == null)
                    throw new ApiException(400, "Missing required parameter 'accountCredentials' when calling AccountsApi->Login");

            var localVarPath = "./login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (accountCredentials != null && accountCredentials.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(accountCredentials); // http body (model) parameter
                }
                else
                {
                localVarPostBody = accountCredentials; // byte array
                }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("Login", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                ///  ID4i API Login
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="accountCredentials"></param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task LoginAsync (AccountCredentials accountCredentials)
                {
            await LoginAsyncWithHttpInfo(accountCredentials);

                }

                /// <summary>
                ///  ID4i API Login
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="accountCredentials"></param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> LoginAsyncWithHttpInfo (AccountCredentials accountCredentials)
                {
                        // verify the required parameter 'accountCredentials' is set
                        if (accountCredentials == null)
                        throw new ApiException(400, "Missing required parameter 'accountCredentials' when calling AccountsApi->Login");

                var localVarPath = "./login";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (accountCredentials != null && accountCredentials.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(accountCredentials); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = accountCredentials; // byte array
                    }


                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Register user Registering a new user.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRegistration">The user information about the new created user.</param>
        /// <returns>UserRegistrationResponse</returns>
            public UserRegistrationResponse RegisterUser (UserRegistrationRequest userRegistration)
            {
        ApiResponse<UserRegistrationResponse> localVarResponse = RegisterUserWithHttpInfo(userRegistration);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Register user Registering a new user.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRegistration">The user information about the new created user.</param>
        /// <returns>ApiResponse of UserRegistrationResponse</returns>
            public ApiResponse< UserRegistrationResponse > RegisterUserWithHttpInfo (UserRegistrationRequest userRegistration)
            {
                    // verify the required parameter 'userRegistration' is set
                    if (userRegistration == null)
                    throw new ApiException(400, "Missing required parameter 'userRegistration' when calling AccountsApi->RegisterUser");

            var localVarPath = "./account/registration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (userRegistration != null && userRegistration.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(userRegistration); // http body (model) parameter
                }
                else
                {
                localVarPostBody = userRegistration; // byte array
                }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("RegisterUser", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<UserRegistrationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UserRegistrationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserRegistrationResponse)));
            }

                /// <summary>
                /// Register user Registering a new user.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="userRegistration">The user information about the new created user.</param>
            /// <returns>Task of UserRegistrationResponse</returns>
            public async System.Threading.Tasks.Task<UserRegistrationResponse> RegisterUserAsync (UserRegistrationRequest userRegistration)
                {
            ApiResponse<UserRegistrationResponse> localVarResponse = await RegisterUserAsyncWithHttpInfo(userRegistration);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Register user Registering a new user.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="userRegistration">The user information about the new created user.</param>
            /// <returns>Task of ApiResponse (UserRegistrationResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<UserRegistrationResponse>> RegisterUserAsyncWithHttpInfo (UserRegistrationRequest userRegistration)
                {
                        // verify the required parameter 'userRegistration' is set
                        if (userRegistration == null)
                        throw new ApiException(400, "Missing required parameter 'userRegistration' when calling AccountsApi->RegisterUser");

                var localVarPath = "./account/registration";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (userRegistration != null && userRegistration.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(userRegistration); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = userRegistration; // byte array
                    }


                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("RegisterUser", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<UserRegistrationResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (UserRegistrationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserRegistrationResponse)));
                }

            /// <summary>
            /// Remove role(s) from user 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization</param>
        /// <param name="username">username</param>
        /// <param name="changeRoleRequest">changeRoleRequest</param>
        /// <returns></returns>
            public void RemoveUserRoles (string organizationId, string username, ChangeRoleRequest changeRoleRequest)
            {
        RemoveUserRolesWithHttpInfo(organizationId, username, changeRoleRequest);
            }

            /// <summary>
            /// Remove role(s) from user 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization</param>
        /// <param name="username">username</param>
        /// <param name="changeRoleRequest">changeRoleRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> RemoveUserRolesWithHttpInfo (string organizationId, string username, ChangeRoleRequest changeRoleRequest)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccountsApi->RemoveUserRoles");
                    // verify the required parameter 'username' is set
                    if (username == null)
                    throw new ApiException(400, "Missing required parameter 'username' when calling AccountsApi->RemoveUserRoles");
                    // verify the required parameter 'changeRoleRequest' is set
                    if (changeRoleRequest == null)
                    throw new ApiException(400, "Missing required parameter 'changeRoleRequest' when calling AccountsApi->RemoveUserRoles");

            var localVarPath = "./api/v1/organizations/{organizationId}/users/{username}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
                if (changeRoleRequest != null && changeRoleRequest.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(changeRoleRequest); // http body (model) parameter
                }
                else
                {
                localVarPostBody = changeRoleRequest; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("RemoveUserRoles", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Remove role(s) from user 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization</param>
            /// <param name="username">username</param>
            /// <param name="changeRoleRequest">changeRoleRequest</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task RemoveUserRolesAsync (string organizationId, string username, ChangeRoleRequest changeRoleRequest)
                {
            await RemoveUserRolesAsyncWithHttpInfo(organizationId, username, changeRoleRequest);

                }

                /// <summary>
                /// Remove role(s) from user 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization</param>
            /// <param name="username">username</param>
            /// <param name="changeRoleRequest">changeRoleRequest</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserRolesAsyncWithHttpInfo (string organizationId, string username, ChangeRoleRequest changeRoleRequest)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling AccountsApi->RemoveUserRoles");
                        // verify the required parameter 'username' is set
                        if (username == null)
                        throw new ApiException(400, "Missing required parameter 'username' when calling AccountsApi->RemoveUserRoles");
                        // verify the required parameter 'changeRoleRequest' is set
                        if (changeRoleRequest == null)
                        throw new ApiException(400, "Missing required parameter 'changeRoleRequest' when calling AccountsApi->RemoveUserRoles");

                var localVarPath = "./api/v1/organizations/{organizationId}/users/{username}/roles";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
                    if (changeRoleRequest != null && changeRoleRequest.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(changeRoleRequest); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = changeRoleRequest; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("RemoveUserRoles", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Request password reset Requesting a reset for a new password. 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetRequest">Contains the required information to request a new password.</param>
        /// <returns>SimpleMessageResponse</returns>
            public SimpleMessageResponse RequestPasswordReset (PasswordResetRequest resetRequest)
            {
        ApiResponse<SimpleMessageResponse> localVarResponse = RequestPasswordResetWithHttpInfo(resetRequest);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Request password reset Requesting a reset for a new password. 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetRequest">Contains the required information to request a new password.</param>
        /// <returns>ApiResponse of SimpleMessageResponse</returns>
            public ApiResponse< SimpleMessageResponse > RequestPasswordResetWithHttpInfo (PasswordResetRequest resetRequest)
            {
                    // verify the required parameter 'resetRequest' is set
                    if (resetRequest == null)
                    throw new ApiException(400, "Missing required parameter 'resetRequest' when calling AccountsApi->RequestPasswordReset");

            var localVarPath = "./account/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (resetRequest != null && resetRequest.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(resetRequest); // http body (model) parameter
                }
                else
                {
                localVarPostBody = resetRequest; // byte array
                }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("RequestPasswordReset", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<SimpleMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SimpleMessageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleMessageResponse)));
            }

                /// <summary>
                /// Request password reset Requesting a reset for a new password. 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="resetRequest">Contains the required information to request a new password.</param>
            /// <returns>Task of SimpleMessageResponse</returns>
            public async System.Threading.Tasks.Task<SimpleMessageResponse> RequestPasswordResetAsync (PasswordResetRequest resetRequest)
                {
            ApiResponse<SimpleMessageResponse> localVarResponse = await RequestPasswordResetAsyncWithHttpInfo(resetRequest);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Request password reset Requesting a reset for a new password. 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="resetRequest">Contains the required information to request a new password.</param>
            /// <returns>Task of ApiResponse (SimpleMessageResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<SimpleMessageResponse>> RequestPasswordResetAsyncWithHttpInfo (PasswordResetRequest resetRequest)
                {
                        // verify the required parameter 'resetRequest' is set
                        if (resetRequest == null)
                        throw new ApiException(400, "Missing required parameter 'resetRequest' when calling AccountsApi->RequestPasswordReset");

                var localVarPath = "./account/password";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (resetRequest != null && resetRequest.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(resetRequest); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = resetRequest; // byte array
                    }


                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("RequestPasswordReset", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<SimpleMessageResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (SimpleMessageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleMessageResponse)));
                }

            /// <summary>
            /// Verify password reset Setting a new password and verifying the request to set the password.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationRequest">Contains the new password and the verification token to set the new password.</param>
        /// <returns>SimpleMessageResponse</returns>
            public SimpleMessageResponse VerifyPasswordReset (PasswordResetVerificationRequest verificationRequest)
            {
        ApiResponse<SimpleMessageResponse> localVarResponse = VerifyPasswordResetWithHttpInfo(verificationRequest);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Verify password reset Setting a new password and verifying the request to set the password.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationRequest">Contains the new password and the verification token to set the new password.</param>
        /// <returns>ApiResponse of SimpleMessageResponse</returns>
            public ApiResponse< SimpleMessageResponse > VerifyPasswordResetWithHttpInfo (PasswordResetVerificationRequest verificationRequest)
            {
                    // verify the required parameter 'verificationRequest' is set
                    if (verificationRequest == null)
                    throw new ApiException(400, "Missing required parameter 'verificationRequest' when calling AccountsApi->VerifyPasswordReset");

            var localVarPath = "./account/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (verificationRequest != null && verificationRequest.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(verificationRequest); // http body (model) parameter
                }
                else
                {
                localVarPostBody = verificationRequest; // byte array
                }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("VerifyPasswordReset", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<SimpleMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SimpleMessageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleMessageResponse)));
            }

                /// <summary>
                /// Verify password reset Setting a new password and verifying the request to set the password.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="verificationRequest">Contains the new password and the verification token to set the new password.</param>
            /// <returns>Task of SimpleMessageResponse</returns>
            public async System.Threading.Tasks.Task<SimpleMessageResponse> VerifyPasswordResetAsync (PasswordResetVerificationRequest verificationRequest)
                {
            ApiResponse<SimpleMessageResponse> localVarResponse = await VerifyPasswordResetAsyncWithHttpInfo(verificationRequest);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Verify password reset Setting a new password and verifying the request to set the password.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="verificationRequest">Contains the new password and the verification token to set the new password.</param>
            /// <returns>Task of ApiResponse (SimpleMessageResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<SimpleMessageResponse>> VerifyPasswordResetAsyncWithHttpInfo (PasswordResetVerificationRequest verificationRequest)
                {
                        // verify the required parameter 'verificationRequest' is set
                        if (verificationRequest == null)
                        throw new ApiException(400, "Missing required parameter 'verificationRequest' when calling AccountsApi->VerifyPasswordReset");

                var localVarPath = "./account/password";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (verificationRequest != null && verificationRequest.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(verificationRequest); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = verificationRequest; // byte array
                    }


                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("VerifyPasswordReset", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<SimpleMessageResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (SimpleMessageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleMessageResponse)));
                }

            /// <summary>
            /// Verify registration Verifies a new user registration.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token for user verification.</param>
        /// <returns></returns>
            public void VerifyUserRegistration (RegistrationVerificationTokenPresentation token)
            {
        VerifyUserRegistrationWithHttpInfo(token);
            }

            /// <summary>
            /// Verify registration Verifies a new user registration.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The token for user verification.</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> VerifyUserRegistrationWithHttpInfo (RegistrationVerificationTokenPresentation token)
            {
                    // verify the required parameter 'token' is set
                    if (token == null)
                    throw new ApiException(400, "Missing required parameter 'token' when calling AccountsApi->VerifyUserRegistration");

            var localVarPath = "./account/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (token != null && token.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(token); // http body (model) parameter
                }
                else
                {
                localVarPostBody = token; // byte array
                }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("VerifyUserRegistration", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Verify registration Verifies a new user registration.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="token">The token for user verification.</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task VerifyUserRegistrationAsync (RegistrationVerificationTokenPresentation token)
                {
            await VerifyUserRegistrationAsyncWithHttpInfo(token);

                }

                /// <summary>
                /// Verify registration Verifies a new user registration.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="token">The token for user verification.</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> VerifyUserRegistrationAsyncWithHttpInfo (RegistrationVerificationTokenPresentation token)
                {
                        // verify the required parameter 'token' is set
                        if (token == null)
                        throw new ApiException(400, "Missing required parameter 'token' when calling AccountsApi->VerifyUserRegistration");

                var localVarPath = "./account/verification";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (token != null && token.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(token); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = token; // byte array
                    }


                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("VerifyUserRegistration", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

        }
    }