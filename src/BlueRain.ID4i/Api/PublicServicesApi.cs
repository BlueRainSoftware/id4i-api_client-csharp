/* 
 * ID4i API
 *
 * ID4i HTTP API
 *
 * OpenAPI spec version: 0.8.6
 * Contact: info@bluerain.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
    using RestSharp.Portable;
using BlueRain.ID4i.Client;
using BlueRain.ID4i.Model;
using Guid = BlueRain.ID4i.Model.Guid;

namespace BlueRain.ID4i.Api
{
    /// <summary>
        /// Represents a collection of functions to interact with the API endpoints
        /// </summary>
    public interface IPublicServicesApi : IApiAccessor
    {
    #region Synchronous Operations
        /// <summary>
            /// Retrieve a document (meta-data only, no content)
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="id4n">id4n</param>
        /// <param name="fileName">fileName</param>
        /// <returns>Document</returns>
        Document GetPublicDocument (string organizationId, string id4n, string fileName);

        /// <summary>
            /// Retrieve a document (meta-data only, no content)
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="id4n">id4n</param>
        /// <param name="fileName">fileName</param>
        /// <returns>ApiResponse of Document</returns>
        ApiResponse<Document> GetPublicDocumentWithHttpInfo (string organizationId, string id4n, string fileName);
        /// <summary>
            /// Retrieve all public routes for a GUID
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="type">type</param>
        /// <param name="interpolate">interpolate (optional, default to true)</param>
        /// <returns>List&lt;Route&gt;</returns>
        List<Route> GetRoutes (string id4n, string type, bool? interpolate = null);

        /// <summary>
            /// Retrieve all public routes for a GUID
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="type">type</param>
        /// <param name="interpolate">interpolate (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;Route&gt;</returns>
        ApiResponse<List<Route>> GetRoutesWithHttpInfo (string id4n, string type, bool? interpolate = null);
        /// <summary>
            /// Forward
            /// </summary>
        /// <remarks>
            /// Forwarding to the designated route defined in the routing,
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">guid</param>
        /// <returns></returns>
        void Go (string guid);

        /// <summary>
            /// Forward
            /// </summary>
        /// <remarks>
            /// Forwarding to the designated route defined in the routing,
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">guid</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GoWithHttpInfo (string guid);
        /// <summary>
            /// List organization specific documents
            /// </summary>
        /// <remarks>
            /// Listing documents of an id4n owned by a specified organization
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedOwnedDocumentResponse</returns>
        PaginatedOwnedDocumentResponse ListAllPublicDocuments (string id4n, string organizationId = null, int? offset = null, int? limit = null);

        /// <summary>
            /// List organization specific documents
            /// </summary>
        /// <remarks>
            /// Listing documents of an id4n owned by a specified organization
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedOwnedDocumentResponse</returns>
        ApiResponse<PaginatedOwnedDocumentResponse> ListAllPublicDocumentsWithHttpInfo (string id4n, string organizationId = null, int? offset = null, int? limit = null);
        /// <summary>
            /// List organization specific documents
            /// </summary>
        /// <remarks>
            /// Listing documents of an id4n owned by a specified organization
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="id4n">id4n</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedDocumentResponse</returns>
        PaginatedDocumentResponse ListPublicDocuments (string organizationId, string id4n, int? offset = null, int? limit = null);

        /// <summary>
            /// List organization specific documents
            /// </summary>
        /// <remarks>
            /// Listing documents of an id4n owned by a specified organization
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="id4n">id4n</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedDocumentResponse</returns>
        ApiResponse<PaginatedDocumentResponse> ListPublicDocumentsWithHttpInfo (string organizationId, string id4n, int? offset = null, int? limit = null);
        /// <summary>
            /// Shows the public history of the given GUID
            /// </summary>
        /// <remarks>
            /// Only contains public history items
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedHistoryItemResponse</returns>
        PaginatedHistoryItemResponse ListPublicHistory (string id4n, int? offset = null, int? limit = null);

        /// <summary>
            /// Shows the public history of the given GUID
            /// </summary>
        /// <remarks>
            /// Only contains public history items
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedHistoryItemResponse</returns>
        ApiResponse<PaginatedHistoryItemResponse> ListPublicHistoryWithHttpInfo (string id4n, int? offset = null, int? limit = null);
        /// <summary>
            /// Read public organization information
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization ID</param>
        /// <returns>Organization</returns>
        Organization ReadOrganizationInfo (string organizationId);

        /// <summary>
            /// Read public organization information
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization ID</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> ReadOrganizationInfoWithHttpInfo (string organizationId);
        /// <summary>
            /// Read document contents
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="id4n">id4n</param>
        /// <param name="fileName">fileName</param>
        /// <returns>byte[]</returns>
        byte[] ReadPublicDocument (string organizationId, string id4n, string fileName);

        /// <summary>
            /// Read document contents
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="id4n">id4n</param>
        /// <param name="fileName">fileName</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> ReadPublicDocumentWithHttpInfo (string organizationId, string id4n, string fileName);
        /// <summary>
            /// Resolve image
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageID">The id of the image to be resolved.</param>
        /// <returns>byte[]</returns>
        byte[] ResolveImageUsingGET (string imageID);

        /// <summary>
            /// Resolve image
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageID">The id of the image to be resolved.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> ResolveImageUsingGETWithHttpInfo (string imageID);
        /// <summary>
            /// Resolve owner of id4n
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <returns>WhoIsResponse</returns>
        WhoIsResponse ResolveWhoIsEntry (string id4n);

        /// <summary>
            /// Resolve owner of id4n
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <returns>ApiResponse of WhoIsResponse</returns>
        ApiResponse<WhoIsResponse> ResolveWhoIsEntryWithHttpInfo (string id4n);
        #endregion Synchronous Operations
            #region Asynchronous Operations
                /// <summary>
                /// Retrieve a document (meta-data only, no content)
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="id4n">id4n</param>
            /// <param name="fileName">fileName</param>
            /// <returns>Task of Document</returns>
            System.Threading.Tasks.Task<Document> GetPublicDocumentAsync (string organizationId, string id4n, string fileName);

                /// <summary>
                /// Retrieve a document (meta-data only, no content)
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="id4n">id4n</param>
            /// <param name="fileName">fileName</param>
            /// <returns>Task of ApiResponse (Document)</returns>
                System.Threading.Tasks.Task<ApiResponse<Document>> GetPublicDocumentAsyncWithHttpInfo (string organizationId, string id4n, string fileName);
                /// <summary>
                /// Retrieve all public routes for a GUID
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="type">type</param>
            /// <param name="interpolate">interpolate (optional, default to true)</param>
            /// <returns>Task of List&lt;Route&gt;</returns>
            System.Threading.Tasks.Task<List<Route>> GetRoutesAsync (string id4n, string type, bool? interpolate = null);

                /// <summary>
                /// Retrieve all public routes for a GUID
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="type">type</param>
            /// <param name="interpolate">interpolate (optional, default to true)</param>
            /// <returns>Task of ApiResponse (List&lt;Route&gt;)</returns>
                System.Threading.Tasks.Task<ApiResponse<List<Route>>> GetRoutesAsyncWithHttpInfo (string id4n, string type, bool? interpolate = null);
                /// <summary>
                /// Forward
                /// </summary>
                /// <remarks>
                /// Forwarding to the designated route defined in the routing,
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="guid">guid</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task GoAsync (string guid);

                /// <summary>
                /// Forward
                /// </summary>
                /// <remarks>
                /// Forwarding to the designated route defined in the routing,
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="guid">guid</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> GoAsyncWithHttpInfo (string guid);
                /// <summary>
                /// List organization specific documents
                /// </summary>
                /// <remarks>
                /// Listing documents of an id4n owned by a specified organization
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="organizationId">organizationId (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedOwnedDocumentResponse</returns>
            System.Threading.Tasks.Task<PaginatedOwnedDocumentResponse> ListAllPublicDocumentsAsync (string id4n, string organizationId = null, int? offset = null, int? limit = null);

                /// <summary>
                /// List organization specific documents
                /// </summary>
                /// <remarks>
                /// Listing documents of an id4n owned by a specified organization
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="organizationId">organizationId (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedOwnedDocumentResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedOwnedDocumentResponse>> ListAllPublicDocumentsAsyncWithHttpInfo (string id4n, string organizationId = null, int? offset = null, int? limit = null);
                /// <summary>
                /// List organization specific documents
                /// </summary>
                /// <remarks>
                /// Listing documents of an id4n owned by a specified organization
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="id4n">id4n</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedDocumentResponse</returns>
            System.Threading.Tasks.Task<PaginatedDocumentResponse> ListPublicDocumentsAsync (string organizationId, string id4n, int? offset = null, int? limit = null);

                /// <summary>
                /// List organization specific documents
                /// </summary>
                /// <remarks>
                /// Listing documents of an id4n owned by a specified organization
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="id4n">id4n</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedDocumentResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedDocumentResponse>> ListPublicDocumentsAsyncWithHttpInfo (string organizationId, string id4n, int? offset = null, int? limit = null);
                /// <summary>
                /// Shows the public history of the given GUID
                /// </summary>
                /// <remarks>
                /// Only contains public history items
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedHistoryItemResponse</returns>
            System.Threading.Tasks.Task<PaginatedHistoryItemResponse> ListPublicHistoryAsync (string id4n, int? offset = null, int? limit = null);

                /// <summary>
                /// Shows the public history of the given GUID
                /// </summary>
                /// <remarks>
                /// Only contains public history items
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedHistoryItemResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedHistoryItemResponse>> ListPublicHistoryAsyncWithHttpInfo (string id4n, int? offset = null, int? limit = null);
                /// <summary>
                /// Read public organization information
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">Organization ID</param>
            /// <returns>Task of Organization</returns>
            System.Threading.Tasks.Task<Organization> ReadOrganizationInfoAsync (string organizationId);

                /// <summary>
                /// Read public organization information
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">Organization ID</param>
            /// <returns>Task of ApiResponse (Organization)</returns>
                System.Threading.Tasks.Task<ApiResponse<Organization>> ReadOrganizationInfoAsyncWithHttpInfo (string organizationId);
                /// <summary>
                /// Read document contents
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="id4n">id4n</param>
            /// <param name="fileName">fileName</param>
            /// <returns>Task of byte[]</returns>
            System.Threading.Tasks.Task<byte[]> ReadPublicDocumentAsync (string organizationId, string id4n, string fileName);

                /// <summary>
                /// Read document contents
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="id4n">id4n</param>
            /// <param name="fileName">fileName</param>
            /// <returns>Task of ApiResponse (byte[])</returns>
                System.Threading.Tasks.Task<ApiResponse<byte[]>> ReadPublicDocumentAsyncWithHttpInfo (string organizationId, string id4n, string fileName);
                /// <summary>
                /// Resolve image
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="imageID">The id of the image to be resolved.</param>
            /// <returns>Task of byte[]</returns>
            System.Threading.Tasks.Task<byte[]> ResolveImageUsingGETAsync (string imageID);

                /// <summary>
                /// Resolve image
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="imageID">The id of the image to be resolved.</param>
            /// <returns>Task of ApiResponse (byte[])</returns>
                System.Threading.Tasks.Task<ApiResponse<byte[]>> ResolveImageUsingGETAsyncWithHttpInfo (string imageID);
                /// <summary>
                /// Resolve owner of id4n
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of WhoIsResponse</returns>
            System.Threading.Tasks.Task<WhoIsResponse> ResolveWhoIsEntryAsync (string id4n);

                /// <summary>
                /// Resolve owner of id4n
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of ApiResponse (WhoIsResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<WhoIsResponse>> ResolveWhoIsEntryAsyncWithHttpInfo (string id4n);
            #endregion Asynchronous Operations
        }

        /// <summary>
        /// Represents a collection of functions to interact with the API endpoints
        /// </summary>
    public partial class PublicServicesApi : IPublicServicesApi
        {
        private BlueRain.ID4i.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PublicServicesApi(String basePath)
        {
        this.Configuration = new Configuration { BasePath = basePath };

        ExceptionFactory = BlueRain.ID4i.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicServicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PublicServicesApi(Configuration configuration = null)
        {
        if (configuration == null) // use the default one in Configuration
        this.Configuration = Configuration.Default;
        else
        this.Configuration = configuration;

        ExceptionFactory = BlueRain.ID4i.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
        return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
        // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlueRain.ID4i.Client.ExceptionFactory ExceptionFactory
        {
        get
        {
        if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
        {
        throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
        }
        return _exceptionFactory;
        }
        set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
        return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
        this.Configuration.AddDefaultHeader(key, value);
        }

            /// <summary>
            /// Retrieve a document (meta-data only, no content) 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="id4n">id4n</param>
        /// <param name="fileName">fileName</param>
        /// <returns>Document</returns>
            public Document GetPublicDocument (string organizationId, string id4n, string fileName)
            {
        ApiResponse<Document> localVarResponse = GetPublicDocumentWithHttpInfo(organizationId, id4n, fileName);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Retrieve a document (meta-data only, no content) 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="id4n">id4n</param>
        /// <param name="fileName">fileName</param>
        /// <returns>ApiResponse of Document</returns>
            public ApiResponse< Document > GetPublicDocumentWithHttpInfo (string organizationId, string id4n, string fileName)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling PublicServicesApi->GetPublicDocument");
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling PublicServicesApi->GetPublicDocument");
                    // verify the required parameter 'fileName' is set
                    if (fileName == null)
                    throw new ApiException(400, "Missing required parameter 'fileName' when calling PublicServicesApi->GetPublicDocument");

            var localVarPath = "./api/v1/public/documents/{id4n}/{organizationId}/{fileName}/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetPublicDocument", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Document>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Document) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Document)));
            }

                /// <summary>
                /// Retrieve a document (meta-data only, no content) 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="id4n">id4n</param>
            /// <param name="fileName">fileName</param>
            /// <returns>Task of Document</returns>
            public async System.Threading.Tasks.Task<Document> GetPublicDocumentAsync (string organizationId, string id4n, string fileName)
                {
            ApiResponse<Document> localVarResponse = await GetPublicDocumentAsyncWithHttpInfo(organizationId, id4n, fileName);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Retrieve a document (meta-data only, no content) 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="id4n">id4n</param>
            /// <param name="fileName">fileName</param>
            /// <returns>Task of ApiResponse (Document)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Document>> GetPublicDocumentAsyncWithHttpInfo (string organizationId, string id4n, string fileName)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling PublicServicesApi->GetPublicDocument");
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling PublicServicesApi->GetPublicDocument");
                        // verify the required parameter 'fileName' is set
                        if (fileName == null)
                        throw new ApiException(400, "Missing required parameter 'fileName' when calling PublicServicesApi->GetPublicDocument");

                var localVarPath = "./api/v1/public/documents/{id4n}/{organizationId}/{fileName}/metadata";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetPublicDocument", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Document>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (Document) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Document)));
                }

            /// <summary>
            /// Retrieve all public routes for a GUID 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="type">type</param>
        /// <param name="interpolate">interpolate (optional, default to true)</param>
        /// <returns>List&lt;Route&gt;</returns>
            public List<Route> GetRoutes (string id4n, string type, bool? interpolate = null)
            {
        ApiResponse<List<Route>> localVarResponse = GetRoutesWithHttpInfo(id4n, type, interpolate);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Retrieve all public routes for a GUID 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="type">type</param>
        /// <param name="interpolate">interpolate (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;Route&gt;</returns>
            public ApiResponse< List<Route> > GetRoutesWithHttpInfo (string id4n, string type, bool? interpolate = null)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling PublicServicesApi->GetRoutes");
                    // verify the required parameter 'type' is set
                    if (type == null)
                    throw new ApiException(400, "Missing required parameter 'type' when calling PublicServicesApi->GetRoutes");

            var localVarPath = "./api/v1/public/routes/{id4n}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
                if (interpolate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "interpolate", interpolate)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetRoutes", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<List<Route>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Route>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Route>)));
            }

                /// <summary>
                /// Retrieve all public routes for a GUID 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="type">type</param>
            /// <param name="interpolate">interpolate (optional, default to true)</param>
            /// <returns>Task of List&lt;Route&gt;</returns>
            public async System.Threading.Tasks.Task<List<Route>> GetRoutesAsync (string id4n, string type, bool? interpolate = null)
                {
            ApiResponse<List<Route>> localVarResponse = await GetRoutesAsyncWithHttpInfo(id4n, type, interpolate);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Retrieve all public routes for a GUID 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="type">type</param>
            /// <param name="interpolate">interpolate (optional, default to true)</param>
            /// <returns>Task of ApiResponse (List&lt;Route&gt;)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<List<Route>>> GetRoutesAsyncWithHttpInfo (string id4n, string type, bool? interpolate = null)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling PublicServicesApi->GetRoutes");
                        // verify the required parameter 'type' is set
                        if (type == null)
                        throw new ApiException(400, "Missing required parameter 'type' when calling PublicServicesApi->GetRoutes");

                var localVarPath = "./api/v1/public/routes/{id4n}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
                    if (interpolate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "interpolate", interpolate)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetRoutes", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<List<Route>>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (List<Route>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Route>)));
                }

            /// <summary>
            /// Forward Forwarding to the designated route defined in the routing,
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">guid</param>
        /// <returns></returns>
            public void Go (string guid)
            {
        GoWithHttpInfo(guid);
            }

            /// <summary>
            /// Forward Forwarding to the designated route defined in the routing,
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">guid</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> GoWithHttpInfo (string guid)
            {
                    // verify the required parameter 'guid' is set
                    if (guid == null)
                    throw new ApiException(400, "Missing required parameter 'guid' when calling PublicServicesApi->Go");

            var localVarPath = "./go/{guid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (guid != null) localVarPathParams.Add("guid", Configuration.ApiClient.ParameterToString(guid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("Go", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Forward Forwarding to the designated route defined in the routing,
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="guid">guid</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task GoAsync (string guid)
                {
            await GoAsyncWithHttpInfo(guid);

                }

                /// <summary>
                /// Forward Forwarding to the designated route defined in the routing,
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="guid">guid</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> GoAsyncWithHttpInfo (string guid)
                {
                        // verify the required parameter 'guid' is set
                        if (guid == null)
                        throw new ApiException(400, "Missing required parameter 'guid' when calling PublicServicesApi->Go");

                var localVarPath = "./go/{guid}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (guid != null) localVarPathParams.Add("guid", Configuration.ApiClient.ParameterToString(guid)); // path parameter


                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("Go", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// List organization specific documents Listing documents of an id4n owned by a specified organization
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedOwnedDocumentResponse</returns>
            public PaginatedOwnedDocumentResponse ListAllPublicDocuments (string id4n, string organizationId = null, int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedOwnedDocumentResponse> localVarResponse = ListAllPublicDocumentsWithHttpInfo(id4n, organizationId, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// List organization specific documents Listing documents of an id4n owned by a specified organization
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedOwnedDocumentResponse</returns>
            public ApiResponse< PaginatedOwnedDocumentResponse > ListAllPublicDocumentsWithHttpInfo (string id4n, string organizationId = null, int? offset = null, int? limit = null)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling PublicServicesApi->ListAllPublicDocuments");

            var localVarPath = "./api/v1/public/documents/{id4n}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (organizationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("ListAllPublicDocuments", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedOwnedDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedOwnedDocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedOwnedDocumentResponse)));
            }

                /// <summary>
                /// List organization specific documents Listing documents of an id4n owned by a specified organization
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="organizationId">organizationId (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedOwnedDocumentResponse</returns>
            public async System.Threading.Tasks.Task<PaginatedOwnedDocumentResponse> ListAllPublicDocumentsAsync (string id4n, string organizationId = null, int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedOwnedDocumentResponse> localVarResponse = await ListAllPublicDocumentsAsyncWithHttpInfo(id4n, organizationId, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// List organization specific documents Listing documents of an id4n owned by a specified organization
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="organizationId">organizationId (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedOwnedDocumentResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedOwnedDocumentResponse>> ListAllPublicDocumentsAsyncWithHttpInfo (string id4n, string organizationId = null, int? offset = null, int? limit = null)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling PublicServicesApi->ListAllPublicDocuments");

                var localVarPath = "./api/v1/public/documents/{id4n}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (organizationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("ListAllPublicDocuments", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedOwnedDocumentResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedOwnedDocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedOwnedDocumentResponse)));
                }

            /// <summary>
            /// List organization specific documents Listing documents of an id4n owned by a specified organization
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="id4n">id4n</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedDocumentResponse</returns>
            public PaginatedDocumentResponse ListPublicDocuments (string organizationId, string id4n, int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedDocumentResponse> localVarResponse = ListPublicDocumentsWithHttpInfo(organizationId, id4n, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// List organization specific documents Listing documents of an id4n owned by a specified organization
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="id4n">id4n</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedDocumentResponse</returns>
            public ApiResponse< PaginatedDocumentResponse > ListPublicDocumentsWithHttpInfo (string organizationId, string id4n, int? offset = null, int? limit = null)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling PublicServicesApi->ListPublicDocuments");
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling PublicServicesApi->ListPublicDocuments");

            var localVarPath = "./api/v1/public/documents/{id4n}/{organizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("ListPublicDocuments", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedDocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedDocumentResponse)));
            }

                /// <summary>
                /// List organization specific documents Listing documents of an id4n owned by a specified organization
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="id4n">id4n</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedDocumentResponse</returns>
            public async System.Threading.Tasks.Task<PaginatedDocumentResponse> ListPublicDocumentsAsync (string organizationId, string id4n, int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedDocumentResponse> localVarResponse = await ListPublicDocumentsAsyncWithHttpInfo(organizationId, id4n, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// List organization specific documents Listing documents of an id4n owned by a specified organization
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="id4n">id4n</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedDocumentResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedDocumentResponse>> ListPublicDocumentsAsyncWithHttpInfo (string organizationId, string id4n, int? offset = null, int? limit = null)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling PublicServicesApi->ListPublicDocuments");
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling PublicServicesApi->ListPublicDocuments");

                var localVarPath = "./api/v1/public/documents/{id4n}/{organizationId}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("ListPublicDocuments", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedDocumentResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedDocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedDocumentResponse)));
                }

            /// <summary>
            /// Shows the public history of the given GUID Only contains public history items
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedHistoryItemResponse</returns>
            public PaginatedHistoryItemResponse ListPublicHistory (string id4n, int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedHistoryItemResponse> localVarResponse = ListPublicHistoryWithHttpInfo(id4n, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Shows the public history of the given GUID Only contains public history items
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">GUID to retrieve the history for</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedHistoryItemResponse</returns>
            public ApiResponse< PaginatedHistoryItemResponse > ListPublicHistoryWithHttpInfo (string id4n, int? offset = null, int? limit = null)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling PublicServicesApi->ListPublicHistory");

            var localVarPath = "./api/v1/public/history/{id4n}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("ListPublicHistory", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedHistoryItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedHistoryItemResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedHistoryItemResponse)));
            }

                /// <summary>
                /// Shows the public history of the given GUID Only contains public history items
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedHistoryItemResponse</returns>
            public async System.Threading.Tasks.Task<PaginatedHistoryItemResponse> ListPublicHistoryAsync (string id4n, int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedHistoryItemResponse> localVarResponse = await ListPublicHistoryAsyncWithHttpInfo(id4n, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Shows the public history of the given GUID Only contains public history items
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">GUID to retrieve the history for</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedHistoryItemResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedHistoryItemResponse>> ListPublicHistoryAsyncWithHttpInfo (string id4n, int? offset = null, int? limit = null)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling PublicServicesApi->ListPublicHistory");

                var localVarPath = "./api/v1/public/history/{id4n}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("ListPublicHistory", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedHistoryItemResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedHistoryItemResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedHistoryItemResponse)));
                }

            /// <summary>
            /// Read public organization information 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization ID</param>
        /// <returns>Organization</returns>
            public Organization ReadOrganizationInfo (string organizationId)
            {
        ApiResponse<Organization> localVarResponse = ReadOrganizationInfoWithHttpInfo(organizationId);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Read public organization information 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">Organization ID</param>
        /// <returns>ApiResponse of Organization</returns>
            public ApiResponse< Organization > ReadOrganizationInfoWithHttpInfo (string organizationId)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling PublicServicesApi->ReadOrganizationInfo");

            var localVarPath = "./api/v1/public/organizations/{organizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("ReadOrganizationInfo", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Organization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Organization) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
            }

                /// <summary>
                /// Read public organization information 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">Organization ID</param>
            /// <returns>Task of Organization</returns>
            public async System.Threading.Tasks.Task<Organization> ReadOrganizationInfoAsync (string organizationId)
                {
            ApiResponse<Organization> localVarResponse = await ReadOrganizationInfoAsyncWithHttpInfo(organizationId);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Read public organization information 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">Organization ID</param>
            /// <returns>Task of ApiResponse (Organization)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Organization>> ReadOrganizationInfoAsyncWithHttpInfo (string organizationId)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling PublicServicesApi->ReadOrganizationInfo");

                var localVarPath = "./api/v1/public/organizations/{organizationId}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("ReadOrganizationInfo", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Organization>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (Organization) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
                }

            /// <summary>
            /// Read document contents 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="id4n">id4n</param>
        /// <param name="fileName">fileName</param>
        /// <returns>byte[]</returns>
            public byte[] ReadPublicDocument (string organizationId, string id4n, string fileName)
            {
        ApiResponse<byte[]> localVarResponse = ReadPublicDocumentWithHttpInfo(organizationId, id4n, fileName);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Read document contents 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="id4n">id4n</param>
        /// <param name="fileName">fileName</param>
        /// <returns>ApiResponse of byte[]</returns>
            public ApiResponse< byte[] > ReadPublicDocumentWithHttpInfo (string organizationId, string id4n, string fileName)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling PublicServicesApi->ReadPublicDocument");
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling PublicServicesApi->ReadPublicDocument");
                    // verify the required parameter 'fileName' is set
                    if (fileName == null)
                    throw new ApiException(400, "Missing required parameter 'fileName' when calling PublicServicesApi->ReadPublicDocument");

            var localVarPath = "./api/v1/public/documents/{id4n}/{organizationId}/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("ReadPublicDocument", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
            }

                /// <summary>
                /// Read document contents 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="id4n">id4n</param>
            /// <param name="fileName">fileName</param>
            /// <returns>Task of byte[]</returns>
            public async System.Threading.Tasks.Task<byte[]> ReadPublicDocumentAsync (string organizationId, string id4n, string fileName)
                {
            ApiResponse<byte[]> localVarResponse = await ReadPublicDocumentAsyncWithHttpInfo(organizationId, id4n, fileName);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Read document contents 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="id4n">id4n</param>
            /// <param name="fileName">fileName</param>
            /// <returns>Task of ApiResponse (byte[])</returns>
                public async System.Threading.Tasks.Task<ApiResponse<byte[]>> ReadPublicDocumentAsyncWithHttpInfo (string organizationId, string id4n, string fileName)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling PublicServicesApi->ReadPublicDocument");
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling PublicServicesApi->ReadPublicDocument");
                        // verify the required parameter 'fileName' is set
                        if (fileName == null)
                        throw new ApiException(400, "Missing required parameter 'fileName' when calling PublicServicesApi->ReadPublicDocument");

                var localVarPath = "./api/v1/public/documents/{id4n}/{organizationId}/{fileName}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("ReadPublicDocument", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<byte[]>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
                }

            /// <summary>
            /// Resolve image 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageID">The id of the image to be resolved.</param>
        /// <returns>byte[]</returns>
            public byte[] ResolveImageUsingGET (string imageID)
            {
        ApiResponse<byte[]> localVarResponse = ResolveImageUsingGETWithHttpInfo(imageID);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Resolve image 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageID">The id of the image to be resolved.</param>
        /// <returns>ApiResponse of byte[]</returns>
            public ApiResponse< byte[] > ResolveImageUsingGETWithHttpInfo (string imageID)
            {
                    // verify the required parameter 'imageID' is set
                    if (imageID == null)
                    throw new ApiException(400, "Missing required parameter 'imageID' when calling PublicServicesApi->ResolveImageUsingGET");

            var localVarPath = "./api/v1/public/image/{imageID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (imageID != null) localVarPathParams.Add("imageID", Configuration.ApiClient.ParameterToString(imageID)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("ResolveImageUsingGET", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
            }

                /// <summary>
                /// Resolve image 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="imageID">The id of the image to be resolved.</param>
            /// <returns>Task of byte[]</returns>
            public async System.Threading.Tasks.Task<byte[]> ResolveImageUsingGETAsync (string imageID)
                {
            ApiResponse<byte[]> localVarResponse = await ResolveImageUsingGETAsyncWithHttpInfo(imageID);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Resolve image 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="imageID">The id of the image to be resolved.</param>
            /// <returns>Task of ApiResponse (byte[])</returns>
                public async System.Threading.Tasks.Task<ApiResponse<byte[]>> ResolveImageUsingGETAsyncWithHttpInfo (string imageID)
                {
                        // verify the required parameter 'imageID' is set
                        if (imageID == null)
                        throw new ApiException(400, "Missing required parameter 'imageID' when calling PublicServicesApi->ResolveImageUsingGET");

                var localVarPath = "./api/v1/public/image/{imageID}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (imageID != null) localVarPathParams.Add("imageID", Configuration.ApiClient.ParameterToString(imageID)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("ResolveImageUsingGET", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<byte[]>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
                }

            /// <summary>
            /// Resolve owner of id4n 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <returns>WhoIsResponse</returns>
            public WhoIsResponse ResolveWhoIsEntry (string id4n)
            {
        ApiResponse<WhoIsResponse> localVarResponse = ResolveWhoIsEntryWithHttpInfo(id4n);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Resolve owner of id4n 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <returns>ApiResponse of WhoIsResponse</returns>
            public ApiResponse< WhoIsResponse > ResolveWhoIsEntryWithHttpInfo (string id4n)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling PublicServicesApi->ResolveWhoIsEntry");

            var localVarPath = "./whois/{id4n}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("ResolveWhoIsEntry", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<WhoIsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WhoIsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WhoIsResponse)));
            }

                /// <summary>
                /// Resolve owner of id4n 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of WhoIsResponse</returns>
            public async System.Threading.Tasks.Task<WhoIsResponse> ResolveWhoIsEntryAsync (string id4n)
                {
            ApiResponse<WhoIsResponse> localVarResponse = await ResolveWhoIsEntryAsyncWithHttpInfo(id4n);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Resolve owner of id4n 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of ApiResponse (WhoIsResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<WhoIsResponse>> ResolveWhoIsEntryAsyncWithHttpInfo (string id4n)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling PublicServicesApi->ResolveWhoIsEntry");

                var localVarPath = "./whois/{id4n}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter


                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("ResolveWhoIsEntry", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<WhoIsResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (WhoIsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WhoIsResponse)));
                }

        }
    }