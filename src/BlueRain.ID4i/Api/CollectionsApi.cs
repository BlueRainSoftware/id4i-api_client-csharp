/* 
 * ID4i API
 *
 * ID4i HTTP API
 *
 * OpenAPI spec version: 0.9.8-SNAPSHOT
 * Contact: info@bluerain.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
    using RestSharp.Portable;
using BlueRain.ID4i.Client;
using BlueRain.ID4i.Model;
using Guid = BlueRain.ID4i.Model.Guid;

namespace BlueRain.ID4i.Api
{
    /// <summary>
        /// Represents a collection of functions to interact with the API endpoints
        /// </summary>
    public interface ICollectionsApi : IApiAccessor
    {
    #region Synchronous Operations
        /// <summary>
            /// Add elements to collection
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="listOfGuids">listOfGuids</param>
        /// <returns></returns>
        void AddElementsToCollection (string id4n, ListOfId4ns listOfGuids);

        /// <summary>
            /// Add elements to collection
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="listOfGuids">listOfGuids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddElementsToCollectionWithHttpInfo (string id4n, ListOfId4ns listOfGuids);
        /// <summary>
            /// Create collection
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInfo">createInfo</param>
        /// <returns>Id4n</returns>
        Id4n CreateCollection (CreateCollectionRequest createInfo);

        /// <summary>
            /// Create collection
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInfo">createInfo</param>
        /// <returns>ApiResponse of Id4n</returns>
        ApiResponse<Id4n> CreateCollectionWithHttpInfo (CreateCollectionRequest createInfo);
        /// <summary>
            /// Delete collection
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <returns></returns>
        void DeleteCollection (string id4n);

        /// <summary>
            /// Delete collection
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCollectionWithHttpInfo (string id4n);
        /// <summary>
            /// Delete ID4n properties
            /// </summary>
        /// <remarks>
            /// Partial deletion of id4n properties. If the property does not exist, it will be ignored.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The id4n</param>
        /// <param name="organizationId">The organization namespace to work on while deleting the properties.</param>
        /// <param name="properties">A set of property keys to delete.</param>
        /// <returns></returns>
        void DeleteProperties (string id4n, string organizationId, List<string> properties);

        /// <summary>
            /// Delete ID4n properties
            /// </summary>
        /// <remarks>
            /// Partial deletion of id4n properties. If the property does not exist, it will be ignored.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The id4n</param>
        /// <param name="organizationId">The organization namespace to work on while deleting the properties.</param>
        /// <param name="properties">A set of property keys to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePropertiesWithHttpInfo (string id4n, string organizationId, List<string> properties);
        /// <summary>
            /// Find collection
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <returns>GuidCollection</returns>
        GuidCollection FindCollection (string id4n);

        /// <summary>
            /// Find collection
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <returns>ApiResponse of GuidCollection</returns>
        ApiResponse<GuidCollection> FindCollectionWithHttpInfo (string id4n);
        /// <summary>
            /// Get collections of organization
            /// </summary>
        /// <remarks>
            /// Retrieving all collections of an organization in a paginated manner. You may filter the results by specifying id4n properties with filter operations (eq, in, ne) in the query parameters. e.g. &#x60;com.yourcompany.orderId.eq&#x3D;1234&#x60;  
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <param name="type">Filter by this type (optional)</param>
        /// <param name="label">Filter by this label (optional)</param>
        /// <param name="labelPrefix">Filter by this label prefix (optional)</param>
        /// <param name="property">List of i4dn property filter. e.g. \&quot;com.myorga.state:IN:waiting|processing\&quot; or \&quot;com.myorga.orderId:EQ:SAP001\&quot; (optional)</param>
        /// <returns>PaginatedResponseOfGuidCollection</returns>
        PaginatedResponseOfGuidCollection GetAllCollectionsOfOrganization (string organizationId, int? offset = null, int? limit = null, string type = null, string label = null, string labelPrefix = null, List<string> property = null);

        /// <summary>
            /// Get collections of organization
            /// </summary>
        /// <remarks>
            /// Retrieving all collections of an organization in a paginated manner. You may filter the results by specifying id4n properties with filter operations (eq, in, ne) in the query parameters. e.g. &#x60;com.yourcompany.orderId.eq&#x3D;1234&#x60;  
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <param name="type">Filter by this type (optional)</param>
        /// <param name="label">Filter by this label (optional)</param>
        /// <param name="labelPrefix">Filter by this label prefix (optional)</param>
        /// <param name="property">List of i4dn property filter. e.g. \&quot;com.myorga.state:IN:waiting|processing\&quot; or \&quot;com.myorga.orderId:EQ:SAP001\&quot; (optional)</param>
        /// <returns>ApiResponse of PaginatedResponseOfGuidCollection</returns>
        ApiResponse<PaginatedResponseOfGuidCollection> GetAllCollectionsOfOrganizationWithHttpInfo (string organizationId, int? offset = null, int? limit = null, string type = null, string label = null, string labelPrefix = null, List<string> property = null);
        /// <summary>
            /// Retrieve ID4n properties
            /// </summary>
        /// <remarks>
            /// List all properties of an id4n.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The id4n</param>
        /// <param name="organizationId">The organization namespace. (optional)</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> GetProperties (string id4n, string organizationId = null);

        /// <summary>
            /// Retrieve ID4n properties
            /// </summary>
        /// <remarks>
            /// List all properties of an id4n.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The id4n</param>
        /// <param name="organizationId">The organization namespace. (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> GetPropertiesWithHttpInfo (string id4n, string organizationId = null);
        /// <summary>
            /// List contents of the collection
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedResponseOfGuid</returns>
        PaginatedResponseOfGuid ListElementsOfCollection (string id4n, int? offset = null, int? limit = null);

        /// <summary>
            /// List contents of the collection
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedResponseOfGuid</returns>
        ApiResponse<PaginatedResponseOfGuid> ListElementsOfCollectionWithHttpInfo (string id4n, int? offset = null, int? limit = null);
        /// <summary>
            /// Patch ID4n properties
            /// </summary>
        /// <remarks>
            /// Partial updating of id4n properties. If a property contains a null value the property will be deleted other values will be saved and overwritten if they already exist.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The id4n</param>
        /// <param name="organizationId">The organization namespace to work on while patching the properties.</param>
        /// <param name="properties">The properties to update.</param>
        /// <returns></returns>
        void PatchProperties (string id4n, string organizationId, Object properties);

        /// <summary>
            /// Patch ID4n properties
            /// </summary>
        /// <remarks>
            /// Partial updating of id4n properties. If a property contains a null value the property will be deleted other values will be saved and overwritten if they already exist.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The id4n</param>
        /// <param name="organizationId">The organization namespace to work on while patching the properties.</param>
        /// <param name="properties">The properties to update.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchPropertiesWithHttpInfo (string id4n, string organizationId, Object properties);
        /// <summary>
            /// Remove elements from collection
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="listOfGuids">listOfGuids</param>
        /// <returns></returns>
        void RemoveElementsFromCollection (string id4n, ListOfId4ns listOfGuids);

        /// <summary>
            /// Remove elements from collection
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="listOfGuids">listOfGuids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveElementsFromCollectionWithHttpInfo (string id4n, ListOfId4ns listOfGuids);
        /// <summary>
            /// Update collection
            /// </summary>
        /// <remarks>
            /// Update collection changing only the given values
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="request">request</param>
        /// <returns>Object</returns>
        Object UpdateCollection (string id4n, GuidCollection request);

        /// <summary>
            /// Update collection
            /// </summary>
        /// <remarks>
            /// Update collection changing only the given values
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateCollectionWithHttpInfo (string id4n, GuidCollection request);
        #endregion Synchronous Operations
            #region Asynchronous Operations
                /// <summary>
                /// Add elements to collection
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="listOfGuids">listOfGuids</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task AddElementsToCollectionAsync (string id4n, ListOfId4ns listOfGuids);

                /// <summary>
                /// Add elements to collection
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="listOfGuids">listOfGuids</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> AddElementsToCollectionAsyncWithHttpInfo (string id4n, ListOfId4ns listOfGuids);
                /// <summary>
                /// Create collection
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="createInfo">createInfo</param>
            /// <returns>Task of Id4n</returns>
            System.Threading.Tasks.Task<Id4n> CreateCollectionAsync (CreateCollectionRequest createInfo);

                /// <summary>
                /// Create collection
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="createInfo">createInfo</param>
            /// <returns>Task of ApiResponse (Id4n)</returns>
                System.Threading.Tasks.Task<ApiResponse<Id4n>> CreateCollectionAsyncWithHttpInfo (CreateCollectionRequest createInfo);
                /// <summary>
                /// Delete collection
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task DeleteCollectionAsync (string id4n);

                /// <summary>
                /// Delete collection
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCollectionAsyncWithHttpInfo (string id4n);
                /// <summary>
                /// Delete ID4n properties
                /// </summary>
                /// <remarks>
                /// Partial deletion of id4n properties. If the property does not exist, it will be ignored.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The id4n</param>
            /// <param name="organizationId">The organization namespace to work on while deleting the properties.</param>
            /// <param name="properties">A set of property keys to delete.</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task DeletePropertiesAsync (string id4n, string organizationId, List<string> properties);

                /// <summary>
                /// Delete ID4n properties
                /// </summary>
                /// <remarks>
                /// Partial deletion of id4n properties. If the property does not exist, it will be ignored.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The id4n</param>
            /// <param name="organizationId">The organization namespace to work on while deleting the properties.</param>
            /// <param name="properties">A set of property keys to delete.</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> DeletePropertiesAsyncWithHttpInfo (string id4n, string organizationId, List<string> properties);
                /// <summary>
                /// Find collection
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of GuidCollection</returns>
            System.Threading.Tasks.Task<GuidCollection> FindCollectionAsync (string id4n);

                /// <summary>
                /// Find collection
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of ApiResponse (GuidCollection)</returns>
                System.Threading.Tasks.Task<ApiResponse<GuidCollection>> FindCollectionAsyncWithHttpInfo (string id4n);
                /// <summary>
                /// Get collections of organization
                /// </summary>
                /// <remarks>
                /// Retrieving all collections of an organization in a paginated manner. You may filter the results by specifying id4n properties with filter operations (eq, in, ne) in the query parameters. e.g. &#x60;com.yourcompany.orderId.eq&#x3D;1234&#x60;  
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <param name="type">Filter by this type (optional)</param>
            /// <param name="label">Filter by this label (optional)</param>
            /// <param name="labelPrefix">Filter by this label prefix (optional)</param>
            /// <param name="property">List of i4dn property filter. e.g. \&quot;com.myorga.state:IN:waiting|processing\&quot; or \&quot;com.myorga.orderId:EQ:SAP001\&quot; (optional)</param>
            /// <returns>Task of PaginatedResponseOfGuidCollection</returns>
            System.Threading.Tasks.Task<PaginatedResponseOfGuidCollection> GetAllCollectionsOfOrganizationAsync (string organizationId, int? offset = null, int? limit = null, string type = null, string label = null, string labelPrefix = null, List<string> property = null);

                /// <summary>
                /// Get collections of organization
                /// </summary>
                /// <remarks>
                /// Retrieving all collections of an organization in a paginated manner. You may filter the results by specifying id4n properties with filter operations (eq, in, ne) in the query parameters. e.g. &#x60;com.yourcompany.orderId.eq&#x3D;1234&#x60;  
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <param name="type">Filter by this type (optional)</param>
            /// <param name="label">Filter by this label (optional)</param>
            /// <param name="labelPrefix">Filter by this label prefix (optional)</param>
            /// <param name="property">List of i4dn property filter. e.g. \&quot;com.myorga.state:IN:waiting|processing\&quot; or \&quot;com.myorga.orderId:EQ:SAP001\&quot; (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedResponseOfGuidCollection)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedResponseOfGuidCollection>> GetAllCollectionsOfOrganizationAsyncWithHttpInfo (string organizationId, int? offset = null, int? limit = null, string type = null, string label = null, string labelPrefix = null, List<string> property = null);
                /// <summary>
                /// Retrieve ID4n properties
                /// </summary>
                /// <remarks>
                /// List all properties of an id4n.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The id4n</param>
            /// <param name="organizationId">The organization namespace. (optional)</param>
            /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
            System.Threading.Tasks.Task<Dictionary<string, string>> GetPropertiesAsync (string id4n, string organizationId = null);

                /// <summary>
                /// Retrieve ID4n properties
                /// </summary>
                /// <remarks>
                /// List all properties of an id4n.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The id4n</param>
            /// <param name="organizationId">The organization namespace. (optional)</param>
            /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
                System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetPropertiesAsyncWithHttpInfo (string id4n, string organizationId = null);
                /// <summary>
                /// List contents of the collection
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedResponseOfGuid</returns>
            System.Threading.Tasks.Task<PaginatedResponseOfGuid> ListElementsOfCollectionAsync (string id4n, int? offset = null, int? limit = null);

                /// <summary>
                /// List contents of the collection
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedResponseOfGuid)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedResponseOfGuid>> ListElementsOfCollectionAsyncWithHttpInfo (string id4n, int? offset = null, int? limit = null);
                /// <summary>
                /// Patch ID4n properties
                /// </summary>
                /// <remarks>
                /// Partial updating of id4n properties. If a property contains a null value the property will be deleted other values will be saved and overwritten if they already exist.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The id4n</param>
            /// <param name="organizationId">The organization namespace to work on while patching the properties.</param>
            /// <param name="properties">The properties to update.</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task PatchPropertiesAsync (string id4n, string organizationId, Object properties);

                /// <summary>
                /// Patch ID4n properties
                /// </summary>
                /// <remarks>
                /// Partial updating of id4n properties. If a property contains a null value the property will be deleted other values will be saved and overwritten if they already exist.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The id4n</param>
            /// <param name="organizationId">The organization namespace to work on while patching the properties.</param>
            /// <param name="properties">The properties to update.</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> PatchPropertiesAsyncWithHttpInfo (string id4n, string organizationId, Object properties);
                /// <summary>
                /// Remove elements from collection
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="listOfGuids">listOfGuids</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task RemoveElementsFromCollectionAsync (string id4n, ListOfId4ns listOfGuids);

                /// <summary>
                /// Remove elements from collection
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="listOfGuids">listOfGuids</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> RemoveElementsFromCollectionAsyncWithHttpInfo (string id4n, ListOfId4ns listOfGuids);
                /// <summary>
                /// Update collection
                /// </summary>
                /// <remarks>
                /// Update collection changing only the given values
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="request">request</param>
            /// <returns>Task of Object</returns>
            System.Threading.Tasks.Task<Object> UpdateCollectionAsync (string id4n, GuidCollection request);

                /// <summary>
                /// Update collection
                /// </summary>
                /// <remarks>
                /// Update collection changing only the given values
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="request">request</param>
            /// <returns>Task of ApiResponse (Object)</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCollectionAsyncWithHttpInfo (string id4n, GuidCollection request);
            #endregion Asynchronous Operations
        }

        /// <summary>
        /// Represents a collection of functions to interact with the API endpoints
        /// </summary>
    public partial class CollectionsApi : ICollectionsApi
        {
        private BlueRain.ID4i.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionsApi(String basePath)
        {
        this.Configuration = new Configuration { BasePath = basePath };

        ExceptionFactory = BlueRain.ID4i.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CollectionsApi(Configuration configuration = null)
        {
        if (configuration == null) // use the default one in Configuration
        this.Configuration = Configuration.Default;
        else
        this.Configuration = configuration;

        ExceptionFactory = BlueRain.ID4i.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
        return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
        // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlueRain.ID4i.Client.ExceptionFactory ExceptionFactory
        {
        get
        {
        if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
        {
        throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
        }
        return _exceptionFactory;
        }
        set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
        return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
        this.Configuration.AddDefaultHeader(key, value);
        }

            /// <summary>
            /// Add elements to collection 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="listOfGuids">listOfGuids</param>
        /// <returns></returns>
            public void AddElementsToCollection (string id4n, ListOfId4ns listOfGuids)
            {
        AddElementsToCollectionWithHttpInfo(id4n, listOfGuids);
            }

            /// <summary>
            /// Add elements to collection 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="listOfGuids">listOfGuids</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> AddElementsToCollectionWithHttpInfo (string id4n, ListOfId4ns listOfGuids)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling CollectionsApi->AddElementsToCollection");
                    // verify the required parameter 'listOfGuids' is set
                    if (listOfGuids == null)
                    throw new ApiException(400, "Missing required parameter 'listOfGuids' when calling CollectionsApi->AddElementsToCollection");

            var localVarPath = "./api/v1/collections/{id4n}/elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (listOfGuids != null && listOfGuids.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(listOfGuids); // http body (model) parameter
                }
                else
                {
                localVarPostBody = listOfGuids; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("AddElementsToCollection", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Add elements to collection 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="listOfGuids">listOfGuids</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task AddElementsToCollectionAsync (string id4n, ListOfId4ns listOfGuids)
                {
            await AddElementsToCollectionAsyncWithHttpInfo(id4n, listOfGuids);

                }

                /// <summary>
                /// Add elements to collection 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="listOfGuids">listOfGuids</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> AddElementsToCollectionAsyncWithHttpInfo (string id4n, ListOfId4ns listOfGuids)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling CollectionsApi->AddElementsToCollection");
                        // verify the required parameter 'listOfGuids' is set
                        if (listOfGuids == null)
                        throw new ApiException(400, "Missing required parameter 'listOfGuids' when calling CollectionsApi->AddElementsToCollection");

                var localVarPath = "./api/v1/collections/{id4n}/elements";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (listOfGuids != null && listOfGuids.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(listOfGuids); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = listOfGuids; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("AddElementsToCollection", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Create collection 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInfo">createInfo</param>
        /// <returns>Id4n</returns>
            public Id4n CreateCollection (CreateCollectionRequest createInfo)
            {
        ApiResponse<Id4n> localVarResponse = CreateCollectionWithHttpInfo(createInfo);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Create collection 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInfo">createInfo</param>
        /// <returns>ApiResponse of Id4n</returns>
            public ApiResponse< Id4n > CreateCollectionWithHttpInfo (CreateCollectionRequest createInfo)
            {
                    // verify the required parameter 'createInfo' is set
                    if (createInfo == null)
                    throw new ApiException(400, "Missing required parameter 'createInfo' when calling CollectionsApi->CreateCollection");

            var localVarPath = "./api/v1/collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (createInfo != null && createInfo.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(createInfo); // http body (model) parameter
                }
                else
                {
                localVarPostBody = createInfo; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("CreateCollection", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Id4n>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Id4n) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Id4n)));
            }

                /// <summary>
                /// Create collection 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="createInfo">createInfo</param>
            /// <returns>Task of Id4n</returns>
            public async System.Threading.Tasks.Task<Id4n> CreateCollectionAsync (CreateCollectionRequest createInfo)
                {
            ApiResponse<Id4n> localVarResponse = await CreateCollectionAsyncWithHttpInfo(createInfo);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Create collection 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="createInfo">createInfo</param>
            /// <returns>Task of ApiResponse (Id4n)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Id4n>> CreateCollectionAsyncWithHttpInfo (CreateCollectionRequest createInfo)
                {
                        // verify the required parameter 'createInfo' is set
                        if (createInfo == null)
                        throw new ApiException(400, "Missing required parameter 'createInfo' when calling CollectionsApi->CreateCollection");

                var localVarPath = "./api/v1/collections";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (createInfo != null && createInfo.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(createInfo); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = createInfo; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("CreateCollection", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Id4n>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (Id4n) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Id4n)));
                }

            /// <summary>
            /// Delete collection 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <returns></returns>
            public void DeleteCollection (string id4n)
            {
        DeleteCollectionWithHttpInfo(id4n);
            }

            /// <summary>
            /// Delete collection 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> DeleteCollectionWithHttpInfo (string id4n)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling CollectionsApi->DeleteCollection");

            var localVarPath = "./api/v1/collections/{id4n}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("DeleteCollection", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Delete collection 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task DeleteCollectionAsync (string id4n)
                {
            await DeleteCollectionAsyncWithHttpInfo(id4n);

                }

                /// <summary>
                /// Delete collection 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCollectionAsyncWithHttpInfo (string id4n)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling CollectionsApi->DeleteCollection");

                var localVarPath = "./api/v1/collections/{id4n}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("DeleteCollection", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Delete ID4n properties Partial deletion of id4n properties. If the property does not exist, it will be ignored.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The id4n</param>
        /// <param name="organizationId">The organization namespace to work on while deleting the properties.</param>
        /// <param name="properties">A set of property keys to delete.</param>
        /// <returns></returns>
            public void DeleteProperties (string id4n, string organizationId, List<string> properties)
            {
        DeletePropertiesWithHttpInfo(id4n, organizationId, properties);
            }

            /// <summary>
            /// Delete ID4n properties Partial deletion of id4n properties. If the property does not exist, it will be ignored.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The id4n</param>
        /// <param name="organizationId">The organization namespace to work on while deleting the properties.</param>
        /// <param name="properties">A set of property keys to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> DeletePropertiesWithHttpInfo (string id4n, string organizationId, List<string> properties)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling CollectionsApi->DeleteProperties");
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling CollectionsApi->DeleteProperties");
                    // verify the required parameter 'properties' is set
                    if (properties == null)
                    throw new ApiException(400, "Missing required parameter 'properties' when calling CollectionsApi->DeleteProperties");

            var localVarPath = "./api/v1/id4ns/{id4n}/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (organizationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter
                if (properties != null && properties.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(properties); // http body (model) parameter
                }
                else
                {
                localVarPostBody = properties; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("DeleteProperties", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Delete ID4n properties Partial deletion of id4n properties. If the property does not exist, it will be ignored.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The id4n</param>
            /// <param name="organizationId">The organization namespace to work on while deleting the properties.</param>
            /// <param name="properties">A set of property keys to delete.</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task DeletePropertiesAsync (string id4n, string organizationId, List<string> properties)
                {
            await DeletePropertiesAsyncWithHttpInfo(id4n, organizationId, properties);

                }

                /// <summary>
                /// Delete ID4n properties Partial deletion of id4n properties. If the property does not exist, it will be ignored.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The id4n</param>
            /// <param name="organizationId">The organization namespace to work on while deleting the properties.</param>
            /// <param name="properties">A set of property keys to delete.</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePropertiesAsyncWithHttpInfo (string id4n, string organizationId, List<string> properties)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling CollectionsApi->DeleteProperties");
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling CollectionsApi->DeleteProperties");
                        // verify the required parameter 'properties' is set
                        if (properties == null)
                        throw new ApiException(400, "Missing required parameter 'properties' when calling CollectionsApi->DeleteProperties");

                var localVarPath = "./api/v1/id4ns/{id4n}/properties";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (organizationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter
                    if (properties != null && properties.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(properties); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = properties; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("DeleteProperties", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Find collection 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <returns>GuidCollection</returns>
            public GuidCollection FindCollection (string id4n)
            {
        ApiResponse<GuidCollection> localVarResponse = FindCollectionWithHttpInfo(id4n);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Find collection 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <returns>ApiResponse of GuidCollection</returns>
            public ApiResponse< GuidCollection > FindCollectionWithHttpInfo (string id4n)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling CollectionsApi->FindCollection");

            var localVarPath = "./api/v1/collections/{id4n}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("FindCollection", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<GuidCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GuidCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GuidCollection)));
            }

                /// <summary>
                /// Find collection 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of GuidCollection</returns>
            public async System.Threading.Tasks.Task<GuidCollection> FindCollectionAsync (string id4n)
                {
            ApiResponse<GuidCollection> localVarResponse = await FindCollectionAsyncWithHttpInfo(id4n);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Find collection 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of ApiResponse (GuidCollection)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<GuidCollection>> FindCollectionAsyncWithHttpInfo (string id4n)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling CollectionsApi->FindCollection");

                var localVarPath = "./api/v1/collections/{id4n}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("FindCollection", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<GuidCollection>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (GuidCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GuidCollection)));
                }

            /// <summary>
            /// Get collections of organization Retrieving all collections of an organization in a paginated manner. You may filter the results by specifying id4n properties with filter operations (eq, in, ne) in the query parameters. e.g. &#x60;com.yourcompany.orderId.eq&#x3D;1234&#x60;  
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <param name="type">Filter by this type (optional)</param>
        /// <param name="label">Filter by this label (optional)</param>
        /// <param name="labelPrefix">Filter by this label prefix (optional)</param>
        /// <param name="property">List of i4dn property filter. e.g. \&quot;com.myorga.state:IN:waiting|processing\&quot; or \&quot;com.myorga.orderId:EQ:SAP001\&quot; (optional)</param>
        /// <returns>PaginatedResponseOfGuidCollection</returns>
            public PaginatedResponseOfGuidCollection GetAllCollectionsOfOrganization (string organizationId, int? offset = null, int? limit = null, string type = null, string label = null, string labelPrefix = null, List<string> property = null)
            {
        ApiResponse<PaginatedResponseOfGuidCollection> localVarResponse = GetAllCollectionsOfOrganizationWithHttpInfo(organizationId, offset, limit, type, label, labelPrefix, property);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Get collections of organization Retrieving all collections of an organization in a paginated manner. You may filter the results by specifying id4n properties with filter operations (eq, in, ne) in the query parameters. e.g. &#x60;com.yourcompany.orderId.eq&#x3D;1234&#x60;  
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <param name="type">Filter by this type (optional)</param>
        /// <param name="label">Filter by this label (optional)</param>
        /// <param name="labelPrefix">Filter by this label prefix (optional)</param>
        /// <param name="property">List of i4dn property filter. e.g. \&quot;com.myorga.state:IN:waiting|processing\&quot; or \&quot;com.myorga.orderId:EQ:SAP001\&quot; (optional)</param>
        /// <returns>ApiResponse of PaginatedResponseOfGuidCollection</returns>
            public ApiResponse< PaginatedResponseOfGuidCollection > GetAllCollectionsOfOrganizationWithHttpInfo (string organizationId, int? offset = null, int? limit = null, string type = null, string label = null, string labelPrefix = null, List<string> property = null)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling CollectionsApi->GetAllCollectionsOfOrganization");

            var localVarPath = "./api/v1/organizations/{organizationId}/collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
                if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
                if (label != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
                if (labelPrefix != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "labelPrefix", labelPrefix)); // query parameter
                if (property != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "property", property)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetAllCollectionsOfOrganization", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedResponseOfGuidCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedResponseOfGuidCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedResponseOfGuidCollection)));
            }

                /// <summary>
                /// Get collections of organization Retrieving all collections of an organization in a paginated manner. You may filter the results by specifying id4n properties with filter operations (eq, in, ne) in the query parameters. e.g. &#x60;com.yourcompany.orderId.eq&#x3D;1234&#x60;  
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <param name="type">Filter by this type (optional)</param>
            /// <param name="label">Filter by this label (optional)</param>
            /// <param name="labelPrefix">Filter by this label prefix (optional)</param>
            /// <param name="property">List of i4dn property filter. e.g. \&quot;com.myorga.state:IN:waiting|processing\&quot; or \&quot;com.myorga.orderId:EQ:SAP001\&quot; (optional)</param>
            /// <returns>Task of PaginatedResponseOfGuidCollection</returns>
            public async System.Threading.Tasks.Task<PaginatedResponseOfGuidCollection> GetAllCollectionsOfOrganizationAsync (string organizationId, int? offset = null, int? limit = null, string type = null, string label = null, string labelPrefix = null, List<string> property = null)
                {
            ApiResponse<PaginatedResponseOfGuidCollection> localVarResponse = await GetAllCollectionsOfOrganizationAsyncWithHttpInfo(organizationId, offset, limit, type, label, labelPrefix, property);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Get collections of organization Retrieving all collections of an organization in a paginated manner. You may filter the results by specifying id4n properties with filter operations (eq, in, ne) in the query parameters. e.g. &#x60;com.yourcompany.orderId.eq&#x3D;1234&#x60;  
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <param name="type">Filter by this type (optional)</param>
            /// <param name="label">Filter by this label (optional)</param>
            /// <param name="labelPrefix">Filter by this label prefix (optional)</param>
            /// <param name="property">List of i4dn property filter. e.g. \&quot;com.myorga.state:IN:waiting|processing\&quot; or \&quot;com.myorga.orderId:EQ:SAP001\&quot; (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedResponseOfGuidCollection)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedResponseOfGuidCollection>> GetAllCollectionsOfOrganizationAsyncWithHttpInfo (string organizationId, int? offset = null, int? limit = null, string type = null, string label = null, string labelPrefix = null, List<string> property = null)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling CollectionsApi->GetAllCollectionsOfOrganization");

                var localVarPath = "./api/v1/organizations/{organizationId}/collections";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
                    if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
                    if (label != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
                    if (labelPrefix != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "labelPrefix", labelPrefix)); // query parameter
                    if (property != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "property", property)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetAllCollectionsOfOrganization", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedResponseOfGuidCollection>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedResponseOfGuidCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedResponseOfGuidCollection)));
                }

            /// <summary>
            /// Retrieve ID4n properties List all properties of an id4n.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The id4n</param>
        /// <param name="organizationId">The organization namespace. (optional)</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
            public Dictionary<string, string> GetProperties (string id4n, string organizationId = null)
            {
        ApiResponse<Dictionary<string, string>> localVarResponse = GetPropertiesWithHttpInfo(id4n, organizationId);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Retrieve ID4n properties List all properties of an id4n.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The id4n</param>
        /// <param name="organizationId">The organization namespace. (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
            public ApiResponse< Dictionary<string, string> > GetPropertiesWithHttpInfo (string id4n, string organizationId = null)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling CollectionsApi->GetProperties");

            var localVarPath = "./api/v1/id4ns/{id4n}/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (organizationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetProperties", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Dictionary<string, string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
            }

                /// <summary>
                /// Retrieve ID4n properties List all properties of an id4n.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The id4n</param>
            /// <param name="organizationId">The organization namespace. (optional)</param>
            /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
            public async System.Threading.Tasks.Task<Dictionary<string, string>> GetPropertiesAsync (string id4n, string organizationId = null)
                {
            ApiResponse<Dictionary<string, string>> localVarResponse = await GetPropertiesAsyncWithHttpInfo(id4n, organizationId);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Retrieve ID4n properties List all properties of an id4n.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The id4n</param>
            /// <param name="organizationId">The organization namespace. (optional)</param>
            /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetPropertiesAsyncWithHttpInfo (string id4n, string organizationId = null)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling CollectionsApi->GetProperties");

                var localVarPath = "./api/v1/id4ns/{id4n}/properties";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (organizationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetProperties", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (Dictionary<string, string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
                }

            /// <summary>
            /// List contents of the collection 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedResponseOfGuid</returns>
            public PaginatedResponseOfGuid ListElementsOfCollection (string id4n, int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedResponseOfGuid> localVarResponse = ListElementsOfCollectionWithHttpInfo(id4n, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// List contents of the collection 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedResponseOfGuid</returns>
            public ApiResponse< PaginatedResponseOfGuid > ListElementsOfCollectionWithHttpInfo (string id4n, int? offset = null, int? limit = null)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling CollectionsApi->ListElementsOfCollection");

            var localVarPath = "./api/v1/collections/{id4n}/elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("ListElementsOfCollection", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedResponseOfGuid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedResponseOfGuid) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedResponseOfGuid)));
            }

                /// <summary>
                /// List contents of the collection 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedResponseOfGuid</returns>
            public async System.Threading.Tasks.Task<PaginatedResponseOfGuid> ListElementsOfCollectionAsync (string id4n, int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedResponseOfGuid> localVarResponse = await ListElementsOfCollectionAsyncWithHttpInfo(id4n, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// List contents of the collection 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedResponseOfGuid)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedResponseOfGuid>> ListElementsOfCollectionAsyncWithHttpInfo (string id4n, int? offset = null, int? limit = null)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling CollectionsApi->ListElementsOfCollection");

                var localVarPath = "./api/v1/collections/{id4n}/elements";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("ListElementsOfCollection", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedResponseOfGuid>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedResponseOfGuid) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedResponseOfGuid)));
                }

            /// <summary>
            /// Patch ID4n properties Partial updating of id4n properties. If a property contains a null value the property will be deleted other values will be saved and overwritten if they already exist.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The id4n</param>
        /// <param name="organizationId">The organization namespace to work on while patching the properties.</param>
        /// <param name="properties">The properties to update.</param>
        /// <returns></returns>
            public void PatchProperties (string id4n, string organizationId, Object properties)
            {
        PatchPropertiesWithHttpInfo(id4n, organizationId, properties);
            }

            /// <summary>
            /// Patch ID4n properties Partial updating of id4n properties. If a property contains a null value the property will be deleted other values will be saved and overwritten if they already exist.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The id4n</param>
        /// <param name="organizationId">The organization namespace to work on while patching the properties.</param>
        /// <param name="properties">The properties to update.</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> PatchPropertiesWithHttpInfo (string id4n, string organizationId, Object properties)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling CollectionsApi->PatchProperties");
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling CollectionsApi->PatchProperties");
                    // verify the required parameter 'properties' is set
                    if (properties == null)
                    throw new ApiException(400, "Missing required parameter 'properties' when calling CollectionsApi->PatchProperties");

            var localVarPath = "./api/v1/id4ns/{id4n}/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (organizationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter
                if (properties != null && properties.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(properties); // http body (model) parameter
                }
                else
                {
                localVarPostBody = properties; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("PatchProperties", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Patch ID4n properties Partial updating of id4n properties. If a property contains a null value the property will be deleted other values will be saved and overwritten if they already exist.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The id4n</param>
            /// <param name="organizationId">The organization namespace to work on while patching the properties.</param>
            /// <param name="properties">The properties to update.</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task PatchPropertiesAsync (string id4n, string organizationId, Object properties)
                {
            await PatchPropertiesAsyncWithHttpInfo(id4n, organizationId, properties);

                }

                /// <summary>
                /// Patch ID4n properties Partial updating of id4n properties. If a property contains a null value the property will be deleted other values will be saved and overwritten if they already exist.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The id4n</param>
            /// <param name="organizationId">The organization namespace to work on while patching the properties.</param>
            /// <param name="properties">The properties to update.</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchPropertiesAsyncWithHttpInfo (string id4n, string organizationId, Object properties)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling CollectionsApi->PatchProperties");
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling CollectionsApi->PatchProperties");
                        // verify the required parameter 'properties' is set
                        if (properties == null)
                        throw new ApiException(400, "Missing required parameter 'properties' when calling CollectionsApi->PatchProperties");

                var localVarPath = "./api/v1/id4ns/{id4n}/properties";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (organizationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter
                    if (properties != null && properties.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(properties); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = properties; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("PatchProperties", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Remove elements from collection 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="listOfGuids">listOfGuids</param>
        /// <returns></returns>
            public void RemoveElementsFromCollection (string id4n, ListOfId4ns listOfGuids)
            {
        RemoveElementsFromCollectionWithHttpInfo(id4n, listOfGuids);
            }

            /// <summary>
            /// Remove elements from collection 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="listOfGuids">listOfGuids</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> RemoveElementsFromCollectionWithHttpInfo (string id4n, ListOfId4ns listOfGuids)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling CollectionsApi->RemoveElementsFromCollection");
                    // verify the required parameter 'listOfGuids' is set
                    if (listOfGuids == null)
                    throw new ApiException(400, "Missing required parameter 'listOfGuids' when calling CollectionsApi->RemoveElementsFromCollection");

            var localVarPath = "./api/v1/collections/{id4n}/elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (listOfGuids != null && listOfGuids.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(listOfGuids); // http body (model) parameter
                }
                else
                {
                localVarPostBody = listOfGuids; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("RemoveElementsFromCollection", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Remove elements from collection 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="listOfGuids">listOfGuids</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task RemoveElementsFromCollectionAsync (string id4n, ListOfId4ns listOfGuids)
                {
            await RemoveElementsFromCollectionAsyncWithHttpInfo(id4n, listOfGuids);

                }

                /// <summary>
                /// Remove elements from collection 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="listOfGuids">listOfGuids</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveElementsFromCollectionAsyncWithHttpInfo (string id4n, ListOfId4ns listOfGuids)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling CollectionsApi->RemoveElementsFromCollection");
                        // verify the required parameter 'listOfGuids' is set
                        if (listOfGuids == null)
                        throw new ApiException(400, "Missing required parameter 'listOfGuids' when calling CollectionsApi->RemoveElementsFromCollection");

                var localVarPath = "./api/v1/collections/{id4n}/elements";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (listOfGuids != null && listOfGuids.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(listOfGuids); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = listOfGuids; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("RemoveElementsFromCollection", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Update collection Update collection changing only the given values
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="request">request</param>
        /// <returns>Object</returns>
            public Object UpdateCollection (string id4n, GuidCollection request)
            {
        ApiResponse<Object> localVarResponse = UpdateCollectionWithHttpInfo(id4n, request);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Update collection Update collection changing only the given values
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of Object</returns>
            public ApiResponse< Object > UpdateCollectionWithHttpInfo (string id4n, GuidCollection request)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling CollectionsApi->UpdateCollection");
                    // verify the required parameter 'request' is set
                    if (request == null)
                    throw new ApiException(400, "Missing required parameter 'request' when calling CollectionsApi->UpdateCollection");

            var localVarPath = "./api/v1/collections/{id4n}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (request != null && request.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
                }
                else
                {
                localVarPostBody = request; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("UpdateCollection", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            }

                /// <summary>
                /// Update collection Update collection changing only the given values
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="request">request</param>
            /// <returns>Task of Object</returns>
            public async System.Threading.Tasks.Task<Object> UpdateCollectionAsync (string id4n, GuidCollection request)
                {
            ApiResponse<Object> localVarResponse = await UpdateCollectionAsyncWithHttpInfo(id4n, request);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Update collection Update collection changing only the given values
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="request">request</param>
            /// <returns>Task of ApiResponse (Object)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCollectionAsyncWithHttpInfo (string id4n, GuidCollection request)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling CollectionsApi->UpdateCollection");
                        // verify the required parameter 'request' is set
                        if (request == null)
                        throw new ApiException(400, "Missing required parameter 'request' when calling CollectionsApi->UpdateCollection");

                var localVarPath = "./api/v1/collections/{id4n}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (request != null && request.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = request; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("UpdateCollection", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
                }

        }
    }