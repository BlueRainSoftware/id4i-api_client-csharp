/* 
 * ID4i API
 *
 * ID4i HTTP API
 *
 * OpenAPI spec version: 0.9.5-SNAPSHOT
 * Contact: info@bluerain.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
    using RestSharp.Portable;
using BlueRain.ID4i.Client;
using BlueRain.ID4i.Model;
using Guid = BlueRain.ID4i.Model.Guid;

namespace BlueRain.ID4i.Api
{
    /// <summary>
        /// Represents a collection of functions to interact with the API endpoints
        /// </summary>
    public interface IGuidsApi : IApiAccessor
    {
    #region Synchronous Operations
        /// <summary>
            /// Add alias for GUID or Collection
            /// </summary>
        /// <remarks>
            /// Adds or replaces aliases for single ID4ns (alias type item and mapp) or groups of ID4ns (alias types gtin, ean and article)
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID or Collection to operate on</param>
        /// <param name="aliasType">Alias type, see the corresponding API model</param>
        /// <param name="alias">The alias to add or update</param>
        /// <returns></returns>
        void AddGuidAlias (string id4n, string aliasType, GuidAlias alias);

        /// <summary>
            /// Add alias for GUID or Collection
            /// </summary>
        /// <remarks>
            /// Adds or replaces aliases for single ID4ns (alias type item and mapp) or groups of ID4ns (alias types gtin, ean and article)
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID or Collection to operate on</param>
        /// <param name="aliasType">Alias type, see the corresponding API model</param>
        /// <param name="alias">The alias to add or update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddGuidAliasWithHttpInfo (string id4n, string aliasType, GuidAlias alias);
        /// <summary>
            /// Create GUID(s)
            /// </summary>
        /// <remarks>
            /// Creating one or more GUIDs with a specified length.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGUIDInfo">GUID creation model</param>
        /// <returns>ListOfId4ns</returns>
        ListOfId4ns CreateGuid (CreateGuidRequest createGUIDInfo);

        /// <summary>
            /// Create GUID(s)
            /// </summary>
        /// <remarks>
            /// Creating one or more GUIDs with a specified length.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGUIDInfo">GUID creation model</param>
        /// <returns>ApiResponse of ListOfId4ns</returns>
        ApiResponse<ListOfId4ns> CreateGuidWithHttpInfo (CreateGuidRequest createGUIDInfo);
        /// <summary>
            /// Retrieve collections of an ID
            /// </summary>
        /// <remarks>
            /// Retrieving all owned or holding collections the specified id4n is assigned to.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID which the collections should contain</param>
        /// <param name="organizationId">The organization holding the collections. (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedGuidCollectionResponse</returns>
        PaginatedGuidCollectionResponse GetCollections (string id4n, string organizationId = null, int? offset = null, int? limit = null);

        /// <summary>
            /// Retrieve collections of an ID
            /// </summary>
        /// <remarks>
            /// Retrieving all owned or holding collections the specified id4n is assigned to.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID which the collections should contain</param>
        /// <param name="organizationId">The organization holding the collections. (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedGuidCollectionResponse</returns>
        ApiResponse<PaginatedGuidCollectionResponse> GetCollectionsWithHttpInfo (string id4n, string organizationId = null, int? offset = null, int? limit = null);
        /// <summary>
            /// Retrieve GUID information
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID number</param>
        /// <returns>Guid</returns>
        Guid GetGuid (string id4n);

        /// <summary>
            /// Retrieve GUID information
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID number</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> GetGuidWithHttpInfo (string id4n);
        /// <summary>
            /// Get all aliases for the given GUID or Collection.
            /// </summary>
        /// <remarks>
            /// Looks up the alias for each alias type (group and single) and returns a map of all aliases found.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID or Collection to operate on</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> GetGuidAliases (string id4n);

        /// <summary>
            /// Get all aliases for the given GUID or Collection.
            /// </summary>
        /// <remarks>
            /// Looks up the alias for each alias type (group and single) and returns a map of all aliases found.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID or Collection to operate on</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> GetGuidAliasesWithHttpInfo (string id4n);
        /// <summary>
            /// Retrieve GUIDs not in any collection
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization to search GUIDs for</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedResponseOfGuid</returns>
        PaginatedResponseOfGuid GetGuidsWithoutCollection (string organizationId, int? offset = null, int? limit = null);

        /// <summary>
            /// Retrieve GUIDs not in any collection
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization to search GUIDs for</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedResponseOfGuid</returns>
        ApiResponse<PaginatedResponseOfGuid> GetGuidsWithoutCollectionWithHttpInfo (string organizationId, int? offset = null, int? limit = null);
        /// <summary>
            /// Retrieve ID4n information
            /// </summary>
        /// <remarks>
            /// Retrieving basic information about an ID like the type and the creation time.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID to resolve to</param>
        /// <returns>Id4nPresentation</returns>
        Id4nPresentation GetId4n (string id4n);

        /// <summary>
            /// Retrieve ID4n information
            /// </summary>
        /// <remarks>
            /// Retrieving basic information about an ID like the type and the creation time.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID to resolve to</param>
        /// <returns>ApiResponse of Id4nPresentation</returns>
        ApiResponse<Id4nPresentation> GetId4nWithHttpInfo (string id4n);
        /// <summary>
            /// Remove aliases from GUID or Collection
            /// </summary>
        /// <remarks>
            /// Remove the alias of the given type
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID or Collection to operate on</param>
        /// <param name="aliasType">Alias type, see the corresponding API model</param>
        /// <returns></returns>
        void RemoveGuidAlias (string id4n, string aliasType);

        /// <summary>
            /// Remove aliases from GUID or Collection
            /// </summary>
        /// <remarks>
            /// Remove the alias of the given type
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID or Collection to operate on</param>
        /// <param name="aliasType">Alias type, see the corresponding API model</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveGuidAliasWithHttpInfo (string id4n, string aliasType);
        /// <summary>
            /// Change GUID information.
            /// </summary>
        /// <remarks>
            /// Allows ownership transfer.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID number</param>
        /// <param name="request">request</param>
        /// <returns>Object</returns>
        Object UpdateGuid (string id4n, Guid request);

        /// <summary>
            /// Change GUID information.
            /// </summary>
        /// <remarks>
            /// Allows ownership transfer.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID number</param>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateGuidWithHttpInfo (string id4n, Guid request);
        #endregion Synchronous Operations
            #region Asynchronous Operations
                /// <summary>
                /// Add alias for GUID or Collection
                /// </summary>
                /// <remarks>
                /// Adds or replaces aliases for single ID4ns (alias type item and mapp) or groups of ID4ns (alias types gtin, ean and article)
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID or Collection to operate on</param>
            /// <param name="aliasType">Alias type, see the corresponding API model</param>
            /// <param name="alias">The alias to add or update</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task AddGuidAliasAsync (string id4n, string aliasType, GuidAlias alias);

                /// <summary>
                /// Add alias for GUID or Collection
                /// </summary>
                /// <remarks>
                /// Adds or replaces aliases for single ID4ns (alias type item and mapp) or groups of ID4ns (alias types gtin, ean and article)
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID or Collection to operate on</param>
            /// <param name="aliasType">Alias type, see the corresponding API model</param>
            /// <param name="alias">The alias to add or update</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> AddGuidAliasAsyncWithHttpInfo (string id4n, string aliasType, GuidAlias alias);
                /// <summary>
                /// Create GUID(s)
                /// </summary>
                /// <remarks>
                /// Creating one or more GUIDs with a specified length.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="createGUIDInfo">GUID creation model</param>
            /// <returns>Task of ListOfId4ns</returns>
            System.Threading.Tasks.Task<ListOfId4ns> CreateGuidAsync (CreateGuidRequest createGUIDInfo);

                /// <summary>
                /// Create GUID(s)
                /// </summary>
                /// <remarks>
                /// Creating one or more GUIDs with a specified length.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="createGUIDInfo">GUID creation model</param>
            /// <returns>Task of ApiResponse (ListOfId4ns)</returns>
                System.Threading.Tasks.Task<ApiResponse<ListOfId4ns>> CreateGuidAsyncWithHttpInfo (CreateGuidRequest createGUIDInfo);
                /// <summary>
                /// Retrieve collections of an ID
                /// </summary>
                /// <remarks>
                /// Retrieving all owned or holding collections the specified id4n is assigned to.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID which the collections should contain</param>
            /// <param name="organizationId">The organization holding the collections. (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedGuidCollectionResponse</returns>
            System.Threading.Tasks.Task<PaginatedGuidCollectionResponse> GetCollectionsAsync (string id4n, string organizationId = null, int? offset = null, int? limit = null);

                /// <summary>
                /// Retrieve collections of an ID
                /// </summary>
                /// <remarks>
                /// Retrieving all owned or holding collections the specified id4n is assigned to.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID which the collections should contain</param>
            /// <param name="organizationId">The organization holding the collections. (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedGuidCollectionResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedGuidCollectionResponse>> GetCollectionsAsyncWithHttpInfo (string id4n, string organizationId = null, int? offset = null, int? limit = null);
                /// <summary>
                /// Retrieve GUID information
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID number</param>
            /// <returns>Task of Guid</returns>
            System.Threading.Tasks.Task<Guid> GetGuidAsync (string id4n);

                /// <summary>
                /// Retrieve GUID information
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID number</param>
            /// <returns>Task of ApiResponse (Guid)</returns>
                System.Threading.Tasks.Task<ApiResponse<Guid>> GetGuidAsyncWithHttpInfo (string id4n);
                /// <summary>
                /// Get all aliases for the given GUID or Collection.
                /// </summary>
                /// <remarks>
                /// Looks up the alias for each alias type (group and single) and returns a map of all aliases found.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID or Collection to operate on</param>
            /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
            System.Threading.Tasks.Task<Dictionary<string, string>> GetGuidAliasesAsync (string id4n);

                /// <summary>
                /// Get all aliases for the given GUID or Collection.
                /// </summary>
                /// <remarks>
                /// Looks up the alias for each alias type (group and single) and returns a map of all aliases found.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID or Collection to operate on</param>
            /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
                System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetGuidAliasesAsyncWithHttpInfo (string id4n);
                /// <summary>
                /// Retrieve GUIDs not in any collection
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization to search GUIDs for</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedResponseOfGuid</returns>
            System.Threading.Tasks.Task<PaginatedResponseOfGuid> GetGuidsWithoutCollectionAsync (string organizationId, int? offset = null, int? limit = null);

                /// <summary>
                /// Retrieve GUIDs not in any collection
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization to search GUIDs for</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedResponseOfGuid)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedResponseOfGuid>> GetGuidsWithoutCollectionAsyncWithHttpInfo (string organizationId, int? offset = null, int? limit = null);
                /// <summary>
                /// Retrieve ID4n information
                /// </summary>
                /// <remarks>
                /// Retrieving basic information about an ID like the type and the creation time.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID to resolve to</param>
            /// <returns>Task of Id4nPresentation</returns>
            System.Threading.Tasks.Task<Id4nPresentation> GetId4nAsync (string id4n);

                /// <summary>
                /// Retrieve ID4n information
                /// </summary>
                /// <remarks>
                /// Retrieving basic information about an ID like the type and the creation time.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID to resolve to</param>
            /// <returns>Task of ApiResponse (Id4nPresentation)</returns>
                System.Threading.Tasks.Task<ApiResponse<Id4nPresentation>> GetId4nAsyncWithHttpInfo (string id4n);
                /// <summary>
                /// Remove aliases from GUID or Collection
                /// </summary>
                /// <remarks>
                /// Remove the alias of the given type
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID or Collection to operate on</param>
            /// <param name="aliasType">Alias type, see the corresponding API model</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task RemoveGuidAliasAsync (string id4n, string aliasType);

                /// <summary>
                /// Remove aliases from GUID or Collection
                /// </summary>
                /// <remarks>
                /// Remove the alias of the given type
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID or Collection to operate on</param>
            /// <param name="aliasType">Alias type, see the corresponding API model</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> RemoveGuidAliasAsyncWithHttpInfo (string id4n, string aliasType);
                /// <summary>
                /// Change GUID information.
                /// </summary>
                /// <remarks>
                /// Allows ownership transfer.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID number</param>
            /// <param name="request">request</param>
            /// <returns>Task of Object</returns>
            System.Threading.Tasks.Task<Object> UpdateGuidAsync (string id4n, Guid request);

                /// <summary>
                /// Change GUID information.
                /// </summary>
                /// <remarks>
                /// Allows ownership transfer.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID number</param>
            /// <param name="request">request</param>
            /// <returns>Task of ApiResponse (Object)</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGuidAsyncWithHttpInfo (string id4n, Guid request);
            #endregion Asynchronous Operations
        }

        /// <summary>
        /// Represents a collection of functions to interact with the API endpoints
        /// </summary>
    public partial class GuidsApi : IGuidsApi
        {
        private BlueRain.ID4i.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GuidsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GuidsApi(String basePath)
        {
        this.Configuration = new Configuration { BasePath = basePath };

        ExceptionFactory = BlueRain.ID4i.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GuidsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GuidsApi(Configuration configuration = null)
        {
        if (configuration == null) // use the default one in Configuration
        this.Configuration = Configuration.Default;
        else
        this.Configuration = configuration;

        ExceptionFactory = BlueRain.ID4i.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
        return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
        // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlueRain.ID4i.Client.ExceptionFactory ExceptionFactory
        {
        get
        {
        if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
        {
        throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
        }
        return _exceptionFactory;
        }
        set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
        return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
        this.Configuration.AddDefaultHeader(key, value);
        }

            /// <summary>
            /// Add alias for GUID or Collection Adds or replaces aliases for single ID4ns (alias type item and mapp) or groups of ID4ns (alias types gtin, ean and article)
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID or Collection to operate on</param>
        /// <param name="aliasType">Alias type, see the corresponding API model</param>
        /// <param name="alias">The alias to add or update</param>
        /// <returns></returns>
            public void AddGuidAlias (string id4n, string aliasType, GuidAlias alias)
            {
        AddGuidAliasWithHttpInfo(id4n, aliasType, alias);
            }

            /// <summary>
            /// Add alias for GUID or Collection Adds or replaces aliases for single ID4ns (alias type item and mapp) or groups of ID4ns (alias types gtin, ean and article)
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID or Collection to operate on</param>
        /// <param name="aliasType">Alias type, see the corresponding API model</param>
        /// <param name="alias">The alias to add or update</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> AddGuidAliasWithHttpInfo (string id4n, string aliasType, GuidAlias alias)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling GuidsApi->AddGuidAlias");
                    // verify the required parameter 'aliasType' is set
                    if (aliasType == null)
                    throw new ApiException(400, "Missing required parameter 'aliasType' when calling GuidsApi->AddGuidAlias");
                    // verify the required parameter 'alias' is set
                    if (alias == null)
                    throw new ApiException(400, "Missing required parameter 'alias' when calling GuidsApi->AddGuidAlias");

            var localVarPath = "./api/v1/id4ns/{id4n}/alias/{aliasType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (aliasType != null) localVarPathParams.Add("aliasType", Configuration.ApiClient.ParameterToString(aliasType)); // path parameter
                if (alias != null && alias.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(alias); // http body (model) parameter
                }
                else
                {
                localVarPostBody = alias; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("AddGuidAlias", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Add alias for GUID or Collection Adds or replaces aliases for single ID4ns (alias type item and mapp) or groups of ID4ns (alias types gtin, ean and article)
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID or Collection to operate on</param>
            /// <param name="aliasType">Alias type, see the corresponding API model</param>
            /// <param name="alias">The alias to add or update</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task AddGuidAliasAsync (string id4n, string aliasType, GuidAlias alias)
                {
            await AddGuidAliasAsyncWithHttpInfo(id4n, aliasType, alias);

                }

                /// <summary>
                /// Add alias for GUID or Collection Adds or replaces aliases for single ID4ns (alias type item and mapp) or groups of ID4ns (alias types gtin, ean and article)
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID or Collection to operate on</param>
            /// <param name="aliasType">Alias type, see the corresponding API model</param>
            /// <param name="alias">The alias to add or update</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> AddGuidAliasAsyncWithHttpInfo (string id4n, string aliasType, GuidAlias alias)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling GuidsApi->AddGuidAlias");
                        // verify the required parameter 'aliasType' is set
                        if (aliasType == null)
                        throw new ApiException(400, "Missing required parameter 'aliasType' when calling GuidsApi->AddGuidAlias");
                        // verify the required parameter 'alias' is set
                        if (alias == null)
                        throw new ApiException(400, "Missing required parameter 'alias' when calling GuidsApi->AddGuidAlias");

                var localVarPath = "./api/v1/id4ns/{id4n}/alias/{aliasType}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (aliasType != null) localVarPathParams.Add("aliasType", Configuration.ApiClient.ParameterToString(aliasType)); // path parameter
                    if (alias != null && alias.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(alias); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = alias; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("AddGuidAlias", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Create GUID(s) Creating one or more GUIDs with a specified length.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGUIDInfo">GUID creation model</param>
        /// <returns>ListOfId4ns</returns>
            public ListOfId4ns CreateGuid (CreateGuidRequest createGUIDInfo)
            {
        ApiResponse<ListOfId4ns> localVarResponse = CreateGuidWithHttpInfo(createGUIDInfo);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Create GUID(s) Creating one or more GUIDs with a specified length.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGUIDInfo">GUID creation model</param>
        /// <returns>ApiResponse of ListOfId4ns</returns>
            public ApiResponse< ListOfId4ns > CreateGuidWithHttpInfo (CreateGuidRequest createGUIDInfo)
            {
                    // verify the required parameter 'createGUIDInfo' is set
                    if (createGUIDInfo == null)
                    throw new ApiException(400, "Missing required parameter 'createGUIDInfo' when calling GuidsApi->CreateGuid");

            var localVarPath = "./api/v1/guids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (createGUIDInfo != null && createGUIDInfo.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(createGUIDInfo); // http body (model) parameter
                }
                else
                {
                localVarPostBody = createGUIDInfo; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("CreateGuid", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<ListOfId4ns>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ListOfId4ns) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListOfId4ns)));
            }

                /// <summary>
                /// Create GUID(s) Creating one or more GUIDs with a specified length.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="createGUIDInfo">GUID creation model</param>
            /// <returns>Task of ListOfId4ns</returns>
            public async System.Threading.Tasks.Task<ListOfId4ns> CreateGuidAsync (CreateGuidRequest createGUIDInfo)
                {
            ApiResponse<ListOfId4ns> localVarResponse = await CreateGuidAsyncWithHttpInfo(createGUIDInfo);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Create GUID(s) Creating one or more GUIDs with a specified length.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="createGUIDInfo">GUID creation model</param>
            /// <returns>Task of ApiResponse (ListOfId4ns)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<ListOfId4ns>> CreateGuidAsyncWithHttpInfo (CreateGuidRequest createGUIDInfo)
                {
                        // verify the required parameter 'createGUIDInfo' is set
                        if (createGUIDInfo == null)
                        throw new ApiException(400, "Missing required parameter 'createGUIDInfo' when calling GuidsApi->CreateGuid");

                var localVarPath = "./api/v1/guids";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (createGUIDInfo != null && createGUIDInfo.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(createGUIDInfo); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = createGUIDInfo; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("CreateGuid", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<ListOfId4ns>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (ListOfId4ns) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListOfId4ns)));
                }

            /// <summary>
            /// Retrieve collections of an ID Retrieving all owned or holding collections the specified id4n is assigned to.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID which the collections should contain</param>
        /// <param name="organizationId">The organization holding the collections. (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedGuidCollectionResponse</returns>
            public PaginatedGuidCollectionResponse GetCollections (string id4n, string organizationId = null, int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedGuidCollectionResponse> localVarResponse = GetCollectionsWithHttpInfo(id4n, organizationId, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Retrieve collections of an ID Retrieving all owned or holding collections the specified id4n is assigned to.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID which the collections should contain</param>
        /// <param name="organizationId">The organization holding the collections. (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedGuidCollectionResponse</returns>
            public ApiResponse< PaginatedGuidCollectionResponse > GetCollectionsWithHttpInfo (string id4n, string organizationId = null, int? offset = null, int? limit = null)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling GuidsApi->GetCollections");

            var localVarPath = "./api/v1/id4ns/{id4n}/collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (organizationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetCollections", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedGuidCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedGuidCollectionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedGuidCollectionResponse)));
            }

                /// <summary>
                /// Retrieve collections of an ID Retrieving all owned or holding collections the specified id4n is assigned to.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID which the collections should contain</param>
            /// <param name="organizationId">The organization holding the collections. (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedGuidCollectionResponse</returns>
            public async System.Threading.Tasks.Task<PaginatedGuidCollectionResponse> GetCollectionsAsync (string id4n, string organizationId = null, int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedGuidCollectionResponse> localVarResponse = await GetCollectionsAsyncWithHttpInfo(id4n, organizationId, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Retrieve collections of an ID Retrieving all owned or holding collections the specified id4n is assigned to.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID which the collections should contain</param>
            /// <param name="organizationId">The organization holding the collections. (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedGuidCollectionResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedGuidCollectionResponse>> GetCollectionsAsyncWithHttpInfo (string id4n, string organizationId = null, int? offset = null, int? limit = null)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling GuidsApi->GetCollections");

                var localVarPath = "./api/v1/id4ns/{id4n}/collections";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (organizationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetCollections", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedGuidCollectionResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedGuidCollectionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedGuidCollectionResponse)));
                }

            /// <summary>
            /// Retrieve GUID information 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID number</param>
        /// <returns>Guid</returns>
            public Guid GetGuid (string id4n)
            {
        ApiResponse<Guid> localVarResponse = GetGuidWithHttpInfo(id4n);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Retrieve GUID information 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID number</param>
        /// <returns>ApiResponse of Guid</returns>
            public ApiResponse< Guid > GetGuidWithHttpInfo (string id4n)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling GuidsApi->GetGuid");

            var localVarPath = "./api/v1/guids/{id4n}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetGuid", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Guid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Guid) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid)));
            }

                /// <summary>
                /// Retrieve GUID information 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID number</param>
            /// <returns>Task of Guid</returns>
            public async System.Threading.Tasks.Task<Guid> GetGuidAsync (string id4n)
                {
            ApiResponse<Guid> localVarResponse = await GetGuidAsyncWithHttpInfo(id4n);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Retrieve GUID information 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID number</param>
            /// <returns>Task of ApiResponse (Guid)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Guid>> GetGuidAsyncWithHttpInfo (string id4n)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling GuidsApi->GetGuid");

                var localVarPath = "./api/v1/guids/{id4n}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetGuid", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Guid>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (Guid) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid)));
                }

            /// <summary>
            /// Get all aliases for the given GUID or Collection. Looks up the alias for each alias type (group and single) and returns a map of all aliases found.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID or Collection to operate on</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
            public Dictionary<string, string> GetGuidAliases (string id4n)
            {
        ApiResponse<Dictionary<string, string>> localVarResponse = GetGuidAliasesWithHttpInfo(id4n);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Get all aliases for the given GUID or Collection. Looks up the alias for each alias type (group and single) and returns a map of all aliases found.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID or Collection to operate on</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
            public ApiResponse< Dictionary<string, string> > GetGuidAliasesWithHttpInfo (string id4n)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling GuidsApi->GetGuidAliases");

            var localVarPath = "./api/v1/id4ns/{id4n}/alias";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetGuidAliases", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Dictionary<string, string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
            }

                /// <summary>
                /// Get all aliases for the given GUID or Collection. Looks up the alias for each alias type (group and single) and returns a map of all aliases found.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID or Collection to operate on</param>
            /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
            public async System.Threading.Tasks.Task<Dictionary<string, string>> GetGuidAliasesAsync (string id4n)
                {
            ApiResponse<Dictionary<string, string>> localVarResponse = await GetGuidAliasesAsyncWithHttpInfo(id4n);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Get all aliases for the given GUID or Collection. Looks up the alias for each alias type (group and single) and returns a map of all aliases found.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID or Collection to operate on</param>
            /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetGuidAliasesAsyncWithHttpInfo (string id4n)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling GuidsApi->GetGuidAliases");

                var localVarPath = "./api/v1/id4ns/{id4n}/alias";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetGuidAliases", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (Dictionary<string, string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
                }

            /// <summary>
            /// Retrieve GUIDs not in any collection 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization to search GUIDs for</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedResponseOfGuid</returns>
            public PaginatedResponseOfGuid GetGuidsWithoutCollection (string organizationId, int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedResponseOfGuid> localVarResponse = GetGuidsWithoutCollectionWithHttpInfo(organizationId, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Retrieve GUIDs not in any collection 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization to search GUIDs for</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedResponseOfGuid</returns>
            public ApiResponse< PaginatedResponseOfGuid > GetGuidsWithoutCollectionWithHttpInfo (string organizationId, int? offset = null, int? limit = null)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling GuidsApi->GetGuidsWithoutCollection");

            var localVarPath = "./api/v1/guids/withoutCollection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetGuidsWithoutCollection", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedResponseOfGuid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedResponseOfGuid) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedResponseOfGuid)));
            }

                /// <summary>
                /// Retrieve GUIDs not in any collection 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization to search GUIDs for</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedResponseOfGuid</returns>
            public async System.Threading.Tasks.Task<PaginatedResponseOfGuid> GetGuidsWithoutCollectionAsync (string organizationId, int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedResponseOfGuid> localVarResponse = await GetGuidsWithoutCollectionAsyncWithHttpInfo(organizationId, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Retrieve GUIDs not in any collection 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization to search GUIDs for</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedResponseOfGuid)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedResponseOfGuid>> GetGuidsWithoutCollectionAsyncWithHttpInfo (string organizationId, int? offset = null, int? limit = null)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling GuidsApi->GetGuidsWithoutCollection");

                var localVarPath = "./api/v1/guids/withoutCollection";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetGuidsWithoutCollection", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedResponseOfGuid>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedResponseOfGuid) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedResponseOfGuid)));
                }

            /// <summary>
            /// Retrieve ID4n information Retrieving basic information about an ID like the type and the creation time.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID to resolve to</param>
        /// <returns>Id4nPresentation</returns>
            public Id4nPresentation GetId4n (string id4n)
            {
        ApiResponse<Id4nPresentation> localVarResponse = GetId4nWithHttpInfo(id4n);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Retrieve ID4n information Retrieving basic information about an ID like the type and the creation time.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID to resolve to</param>
        /// <returns>ApiResponse of Id4nPresentation</returns>
            public ApiResponse< Id4nPresentation > GetId4nWithHttpInfo (string id4n)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling GuidsApi->GetId4n");

            var localVarPath = "./api/v1/id4ns/{id4n}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetId4n", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Id4nPresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Id4nPresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Id4nPresentation)));
            }

                /// <summary>
                /// Retrieve ID4n information Retrieving basic information about an ID like the type and the creation time.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID to resolve to</param>
            /// <returns>Task of Id4nPresentation</returns>
            public async System.Threading.Tasks.Task<Id4nPresentation> GetId4nAsync (string id4n)
                {
            ApiResponse<Id4nPresentation> localVarResponse = await GetId4nAsyncWithHttpInfo(id4n);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Retrieve ID4n information Retrieving basic information about an ID like the type and the creation time.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID to resolve to</param>
            /// <returns>Task of ApiResponse (Id4nPresentation)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Id4nPresentation>> GetId4nAsyncWithHttpInfo (string id4n)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling GuidsApi->GetId4n");

                var localVarPath = "./api/v1/id4ns/{id4n}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetId4n", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Id4nPresentation>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (Id4nPresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Id4nPresentation)));
                }

            /// <summary>
            /// Remove aliases from GUID or Collection Remove the alias of the given type
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID or Collection to operate on</param>
        /// <param name="aliasType">Alias type, see the corresponding API model</param>
        /// <returns></returns>
            public void RemoveGuidAlias (string id4n, string aliasType)
            {
        RemoveGuidAliasWithHttpInfo(id4n, aliasType);
            }

            /// <summary>
            /// Remove aliases from GUID or Collection Remove the alias of the given type
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID or Collection to operate on</param>
        /// <param name="aliasType">Alias type, see the corresponding API model</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> RemoveGuidAliasWithHttpInfo (string id4n, string aliasType)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling GuidsApi->RemoveGuidAlias");
                    // verify the required parameter 'aliasType' is set
                    if (aliasType == null)
                    throw new ApiException(400, "Missing required parameter 'aliasType' when calling GuidsApi->RemoveGuidAlias");

            var localVarPath = "./api/v1/id4ns/{id4n}/alias/{aliasType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (aliasType != null) localVarPathParams.Add("aliasType", Configuration.ApiClient.ParameterToString(aliasType)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("RemoveGuidAlias", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Remove aliases from GUID or Collection Remove the alias of the given type
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID or Collection to operate on</param>
            /// <param name="aliasType">Alias type, see the corresponding API model</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task RemoveGuidAliasAsync (string id4n, string aliasType)
                {
            await RemoveGuidAliasAsyncWithHttpInfo(id4n, aliasType);

                }

                /// <summary>
                /// Remove aliases from GUID or Collection Remove the alias of the given type
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID or Collection to operate on</param>
            /// <param name="aliasType">Alias type, see the corresponding API model</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveGuidAliasAsyncWithHttpInfo (string id4n, string aliasType)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling GuidsApi->RemoveGuidAlias");
                        // verify the required parameter 'aliasType' is set
                        if (aliasType == null)
                        throw new ApiException(400, "Missing required parameter 'aliasType' when calling GuidsApi->RemoveGuidAlias");

                var localVarPath = "./api/v1/id4ns/{id4n}/alias/{aliasType}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (aliasType != null) localVarPathParams.Add("aliasType", Configuration.ApiClient.ParameterToString(aliasType)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("RemoveGuidAlias", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Change GUID information. Allows ownership transfer.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID number</param>
        /// <param name="request">request</param>
        /// <returns>Object</returns>
            public Object UpdateGuid (string id4n, Guid request)
            {
        ApiResponse<Object> localVarResponse = UpdateGuidWithHttpInfo(id4n, request);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Change GUID information. Allows ownership transfer.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The GUID number</param>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of Object</returns>
            public ApiResponse< Object > UpdateGuidWithHttpInfo (string id4n, Guid request)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling GuidsApi->UpdateGuid");
                    // verify the required parameter 'request' is set
                    if (request == null)
                    throw new ApiException(400, "Missing required parameter 'request' when calling GuidsApi->UpdateGuid");

            var localVarPath = "./api/v1/guids/{id4n}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (request != null && request.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
                }
                else
                {
                localVarPostBody = request; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("UpdateGuid", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            }

                /// <summary>
                /// Change GUID information. Allows ownership transfer.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID number</param>
            /// <param name="request">request</param>
            /// <returns>Task of Object</returns>
            public async System.Threading.Tasks.Task<Object> UpdateGuidAsync (string id4n, Guid request)
                {
            ApiResponse<Object> localVarResponse = await UpdateGuidAsyncWithHttpInfo(id4n, request);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Change GUID information. Allows ownership transfer.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The GUID number</param>
            /// <param name="request">request</param>
            /// <returns>Task of ApiResponse (Object)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGuidAsyncWithHttpInfo (string id4n, Guid request)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling GuidsApi->UpdateGuid");
                        // verify the required parameter 'request' is set
                        if (request == null)
                        throw new ApiException(400, "Missing required parameter 'request' when calling GuidsApi->UpdateGuid");

                var localVarPath = "./api/v1/guids/{id4n}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (request != null && request.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = request; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("UpdateGuid", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
                }

        }
    }