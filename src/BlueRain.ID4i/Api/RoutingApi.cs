/* 
 * ID4i API
 *
 * ID4i HTTP API
 *
 * OpenAPI spec version: 0.4.0
 * Contact: info@bluerain.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
    using RestSharp.Portable;
using BlueRain.ID4i.Client;
using BlueRain.ID4i.Model;
using Guid = BlueRain.ID4i.Model.Guid;

namespace BlueRain.ID4i.Api
{
    /// <summary>
        /// Represents a collection of functions to interact with the API endpoints
        /// </summary>
    public interface IRoutingApi : IApiAccessor
    {
    #region Synchronous Operations
        /// <summary>
            /// Retrieve all web routes
            /// </summary>
        /// <remarks>
            /// Retrieves public and private web routes and interpolates them
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <returns>List&lt;Route&gt;</returns>
        List<Route> GetAllWebRoutes (string id4n);

        /// <summary>
            /// Retrieve all web routes
            /// </summary>
        /// <remarks>
            /// Retrieves public and private web routes and interpolates them
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <returns>ApiResponse of List&lt;Route&gt;</returns>
        ApiResponse<List<Route>> GetAllWebRoutesWithHttpInfo (string id4n);
        /// <summary>
            /// Retrieve current route of a GUID (or ID4N)
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="type">The type of route you want to have</param>
        /// <param name="privateRoutes">privateRoutes (optional)</param>
        /// <param name="publicRoutes">publicRoutes (optional)</param>
        /// <param name="interpolate">interpolate (optional)</param>
        /// <returns>Route</returns>
        Route GetRoute (string id4n, string type, bool? privateRoutes = null, bool? publicRoutes = null, bool? interpolate = null);

        /// <summary>
            /// Retrieve current route of a GUID (or ID4N)
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="type">The type of route you want to have</param>
        /// <param name="privateRoutes">privateRoutes (optional)</param>
        /// <param name="publicRoutes">publicRoutes (optional)</param>
        /// <param name="interpolate">interpolate (optional)</param>
        /// <returns>ApiResponse of Route</returns>
        ApiResponse<Route> GetRouteWithHttpInfo (string id4n, string type, bool? privateRoutes = null, bool? publicRoutes = null, bool? interpolate = null);
        /// <summary>
            /// Retrieve routing file
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <returns>RoutingFile</returns>
        RoutingFile GetRoutingFile (string id4n, long? organizationId = null);

        /// <summary>
            /// Retrieve routing file
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <returns>ApiResponse of RoutingFile</returns>
        ApiResponse<RoutingFile> GetRoutingFileWithHttpInfo (string id4n, long? organizationId = null);
        /// <summary>
            /// Store routing file
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfr">rfr</param>
        /// <param name="id4n">id4n</param>
        /// <returns></returns>
        void UpdateRoutingFile (RoutingFileRequest rfr, string id4n);

        /// <summary>
            /// Store routing file
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfr">rfr</param>
        /// <param name="id4n">id4n</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRoutingFileWithHttpInfo (RoutingFileRequest rfr, string id4n);
        #endregion Synchronous Operations
            #region Asynchronous Operations
                /// <summary>
                /// Retrieve all web routes
                /// </summary>
                /// <remarks>
                /// Retrieves public and private web routes and interpolates them
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of List&lt;Route&gt;</returns>
            System.Threading.Tasks.Task<List<Route>> GetAllWebRoutesAsync (string id4n);

                /// <summary>
                /// Retrieve all web routes
                /// </summary>
                /// <remarks>
                /// Retrieves public and private web routes and interpolates them
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of ApiResponse (List&lt;Route&gt;)</returns>
                System.Threading.Tasks.Task<ApiResponse<List<Route>>> GetAllWebRoutesAsyncWithHttpInfo (string id4n);
                /// <summary>
                /// Retrieve current route of a GUID (or ID4N)
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="type">The type of route you want to have</param>
            /// <param name="privateRoutes">privateRoutes (optional)</param>
            /// <param name="publicRoutes">publicRoutes (optional)</param>
            /// <param name="interpolate">interpolate (optional)</param>
            /// <returns>Task of Route</returns>
            System.Threading.Tasks.Task<Route> GetRouteAsync (string id4n, string type, bool? privateRoutes = null, bool? publicRoutes = null, bool? interpolate = null);

                /// <summary>
                /// Retrieve current route of a GUID (or ID4N)
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="type">The type of route you want to have</param>
            /// <param name="privateRoutes">privateRoutes (optional)</param>
            /// <param name="publicRoutes">publicRoutes (optional)</param>
            /// <param name="interpolate">interpolate (optional)</param>
            /// <returns>Task of ApiResponse (Route)</returns>
                System.Threading.Tasks.Task<ApiResponse<Route>> GetRouteAsyncWithHttpInfo (string id4n, string type, bool? privateRoutes = null, bool? publicRoutes = null, bool? interpolate = null);
                /// <summary>
                /// Retrieve routing file
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="organizationId">organizationId (optional)</param>
            /// <returns>Task of RoutingFile</returns>
            System.Threading.Tasks.Task<RoutingFile> GetRoutingFileAsync (string id4n, long? organizationId = null);

                /// <summary>
                /// Retrieve routing file
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="organizationId">organizationId (optional)</param>
            /// <returns>Task of ApiResponse (RoutingFile)</returns>
                System.Threading.Tasks.Task<ApiResponse<RoutingFile>> GetRoutingFileAsyncWithHttpInfo (string id4n, long? organizationId = null);
                /// <summary>
                /// Store routing file
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="rfr">rfr</param>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task UpdateRoutingFileAsync (RoutingFileRequest rfr, string id4n);

                /// <summary>
                /// Store routing file
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="rfr">rfr</param>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRoutingFileAsyncWithHttpInfo (RoutingFileRequest rfr, string id4n);
            #endregion Asynchronous Operations
        }

        /// <summary>
        /// Represents a collection of functions to interact with the API endpoints
        /// </summary>
    public partial class RoutingApi : IRoutingApi
        {
        private BlueRain.ID4i.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RoutingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RoutingApi(String basePath)
        {
        this.Configuration = new Configuration { BasePath = basePath };

        ExceptionFactory = BlueRain.ID4i.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoutingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RoutingApi(Configuration configuration = null)
        {
        if (configuration == null) // use the default one in Configuration
        this.Configuration = Configuration.Default;
        else
        this.Configuration = configuration;

        ExceptionFactory = BlueRain.ID4i.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
        return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
        // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlueRain.ID4i.Client.ExceptionFactory ExceptionFactory
        {
        get
        {
        if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
        {
        throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
        }
        return _exceptionFactory;
        }
        set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
        return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
        this.Configuration.AddDefaultHeader(key, value);
        }

            /// <summary>
            /// Retrieve all web routes Retrieves public and private web routes and interpolates them
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <returns>List&lt;Route&gt;</returns>
            public List<Route> GetAllWebRoutes (string id4n)
            {
        ApiResponse<List<Route>> localVarResponse = GetAllWebRoutesWithHttpInfo(id4n);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Retrieve all web routes Retrieves public and private web routes and interpolates them
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <returns>ApiResponse of List&lt;Route&gt;</returns>
            public ApiResponse< List<Route> > GetAllWebRoutesWithHttpInfo (string id4n)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling RoutingApi->GetAllWebRoutes");

            var localVarPath = "./api/v1/routingfiles/{id4n}/routes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetAllWebRoutes", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<List<Route>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<Route>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Route>)));
            }

                /// <summary>
                /// Retrieve all web routes Retrieves public and private web routes and interpolates them
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of List&lt;Route&gt;</returns>
            public async System.Threading.Tasks.Task<List<Route>> GetAllWebRoutesAsync (string id4n)
                {
            ApiResponse<List<Route>> localVarResponse = await GetAllWebRoutesAsyncWithHttpInfo(id4n);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Retrieve all web routes Retrieves public and private web routes and interpolates them
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of ApiResponse (List&lt;Route&gt;)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<List<Route>>> GetAllWebRoutesAsyncWithHttpInfo (string id4n)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling RoutingApi->GetAllWebRoutes");

                var localVarPath = "./api/v1/routingfiles/{id4n}/routes";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetAllWebRoutes", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<List<Route>>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (List<Route>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Route>)));
                }

            /// <summary>
            /// Retrieve current route of a GUID (or ID4N) 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="type">The type of route you want to have</param>
        /// <param name="privateRoutes">privateRoutes (optional)</param>
        /// <param name="publicRoutes">publicRoutes (optional)</param>
        /// <param name="interpolate">interpolate (optional)</param>
        /// <returns>Route</returns>
            public Route GetRoute (string id4n, string type, bool? privateRoutes = null, bool? publicRoutes = null, bool? interpolate = null)
            {
        ApiResponse<Route> localVarResponse = GetRouteWithHttpInfo(id4n, type, privateRoutes, publicRoutes, interpolate);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Retrieve current route of a GUID (or ID4N) 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="type">The type of route you want to have</param>
        /// <param name="privateRoutes">privateRoutes (optional)</param>
        /// <param name="publicRoutes">publicRoutes (optional)</param>
        /// <param name="interpolate">interpolate (optional)</param>
        /// <returns>ApiResponse of Route</returns>
            public ApiResponse< Route > GetRouteWithHttpInfo (string id4n, string type, bool? privateRoutes = null, bool? publicRoutes = null, bool? interpolate = null)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling RoutingApi->GetRoute");
                    // verify the required parameter 'type' is set
                    if (type == null)
                    throw new ApiException(400, "Missing required parameter 'type' when calling RoutingApi->GetRoute");

            var localVarPath = "./api/v1/routingfiles/{id4n}/routes/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
                if (privateRoutes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "privateRoutes", privateRoutes)); // query parameter
                if (publicRoutes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "publicRoutes", publicRoutes)); // query parameter
                if (interpolate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "interpolate", interpolate)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetRoute", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Route>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Route) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Route)));
            }

                /// <summary>
                /// Retrieve current route of a GUID (or ID4N) 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="type">The type of route you want to have</param>
            /// <param name="privateRoutes">privateRoutes (optional)</param>
            /// <param name="publicRoutes">publicRoutes (optional)</param>
            /// <param name="interpolate">interpolate (optional)</param>
            /// <returns>Task of Route</returns>
            public async System.Threading.Tasks.Task<Route> GetRouteAsync (string id4n, string type, bool? privateRoutes = null, bool? publicRoutes = null, bool? interpolate = null)
                {
            ApiResponse<Route> localVarResponse = await GetRouteAsyncWithHttpInfo(id4n, type, privateRoutes, publicRoutes, interpolate);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Retrieve current route of a GUID (or ID4N) 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="type">The type of route you want to have</param>
            /// <param name="privateRoutes">privateRoutes (optional)</param>
            /// <param name="publicRoutes">publicRoutes (optional)</param>
            /// <param name="interpolate">interpolate (optional)</param>
            /// <returns>Task of ApiResponse (Route)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Route>> GetRouteAsyncWithHttpInfo (string id4n, string type, bool? privateRoutes = null, bool? publicRoutes = null, bool? interpolate = null)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling RoutingApi->GetRoute");
                        // verify the required parameter 'type' is set
                        if (type == null)
                        throw new ApiException(400, "Missing required parameter 'type' when calling RoutingApi->GetRoute");

                var localVarPath = "./api/v1/routingfiles/{id4n}/routes/{type}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
                    if (privateRoutes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "privateRoutes", privateRoutes)); // query parameter
                    if (publicRoutes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "publicRoutes", publicRoutes)); // query parameter
                    if (interpolate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "interpolate", interpolate)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetRoute", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Route>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (Route) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Route)));
                }

            /// <summary>
            /// Retrieve routing file 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <returns>RoutingFile</returns>
            public RoutingFile GetRoutingFile (string id4n, long? organizationId = null)
            {
        ApiResponse<RoutingFile> localVarResponse = GetRoutingFileWithHttpInfo(id4n, organizationId);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Retrieve routing file 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">id4n</param>
        /// <param name="organizationId">organizationId (optional)</param>
        /// <returns>ApiResponse of RoutingFile</returns>
            public ApiResponse< RoutingFile > GetRoutingFileWithHttpInfo (string id4n, long? organizationId = null)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling RoutingApi->GetRoutingFile");

            var localVarPath = "./api/v1/routingfiles/{id4n}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (organizationId != null && organizationId.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(organizationId); // http body (model) parameter
                }
                else
                {
                localVarPostBody = organizationId; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetRoutingFile", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<RoutingFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RoutingFile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoutingFile)));
            }

                /// <summary>
                /// Retrieve routing file 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="organizationId">organizationId (optional)</param>
            /// <returns>Task of RoutingFile</returns>
            public async System.Threading.Tasks.Task<RoutingFile> GetRoutingFileAsync (string id4n, long? organizationId = null)
                {
            ApiResponse<RoutingFile> localVarResponse = await GetRoutingFileAsyncWithHttpInfo(id4n, organizationId);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Retrieve routing file 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">id4n</param>
            /// <param name="organizationId">organizationId (optional)</param>
            /// <returns>Task of ApiResponse (RoutingFile)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<RoutingFile>> GetRoutingFileAsyncWithHttpInfo (string id4n, long? organizationId = null)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling RoutingApi->GetRoutingFile");

                var localVarPath = "./api/v1/routingfiles/{id4n}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (organizationId != null && organizationId.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(organizationId); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = organizationId; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetRoutingFile", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<RoutingFile>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (RoutingFile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoutingFile)));
                }

            /// <summary>
            /// Store routing file 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfr">rfr</param>
        /// <param name="id4n">id4n</param>
        /// <returns></returns>
            public void UpdateRoutingFile (RoutingFileRequest rfr, string id4n)
            {
        UpdateRoutingFileWithHttpInfo(rfr, id4n);
            }

            /// <summary>
            /// Store routing file 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rfr">rfr</param>
        /// <param name="id4n">id4n</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> UpdateRoutingFileWithHttpInfo (RoutingFileRequest rfr, string id4n)
            {
                    // verify the required parameter 'rfr' is set
                    if (rfr == null)
                    throw new ApiException(400, "Missing required parameter 'rfr' when calling RoutingApi->UpdateRoutingFile");
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling RoutingApi->UpdateRoutingFile");

            var localVarPath = "./api/v1/routingfiles/{id4n}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (rfr != null && rfr.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(rfr); // http body (model) parameter
                }
                else
                {
                localVarPostBody = rfr; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("UpdateRoutingFile", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Store routing file 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="rfr">rfr</param>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task UpdateRoutingFileAsync (RoutingFileRequest rfr, string id4n)
                {
            await UpdateRoutingFileAsyncWithHttpInfo(rfr, id4n);

                }

                /// <summary>
                /// Store routing file 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="rfr">rfr</param>
            /// <param name="id4n">id4n</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRoutingFileAsyncWithHttpInfo (RoutingFileRequest rfr, string id4n)
                {
                        // verify the required parameter 'rfr' is set
                        if (rfr == null)
                        throw new ApiException(400, "Missing required parameter 'rfr' when calling RoutingApi->UpdateRoutingFile");
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling RoutingApi->UpdateRoutingFile");

                var localVarPath = "./api/v1/routingfiles/{id4n}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (rfr != null && rfr.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(rfr); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = rfr; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("UpdateRoutingFile", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

        }
    }