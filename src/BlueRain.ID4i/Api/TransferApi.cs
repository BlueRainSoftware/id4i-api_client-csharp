/* 
 * ID4i API
 *
 * ID4i HTTP API
 *
 * OpenAPI spec version: 0.8.5-SNAPSHOT
 * Contact: info@bluerain.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
    using RestSharp.Portable;
using BlueRain.ID4i.Client;
using BlueRain.ID4i.Model;
using Guid = BlueRain.ID4i.Model.Guid;

namespace BlueRain.ID4i.Api
{
    /// <summary>
        /// Represents a collection of functions to interact with the API endpoints
        /// </summary>
    public interface ITransferApi : IApiAccessor
    {
    #region Synchronous Operations
        /// <summary>
            /// Show transfer information
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID4N to retrieve information about</param>
        /// <returns>TransferReceiveInfo</returns>
        TransferReceiveInfo GetReceiveInfo (string id4n);

        /// <summary>
            /// Show transfer information
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID4N to retrieve information about</param>
        /// <returns>ApiResponse of TransferReceiveInfo</returns>
        ApiResponse<TransferReceiveInfo> GetReceiveInfoWithHttpInfo (string id4n);
        /// <summary>
            /// Show transfer preparation information
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID4N to retrieve information about</param>
        /// <returns>TransferSendInfo</returns>
        TransferSendInfo GetSendInfo (string id4n);

        /// <summary>
            /// Show transfer preparation information
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID4N to retrieve information about</param>
        /// <returns>ApiResponse of TransferSendInfo</returns>
        ApiResponse<TransferSendInfo> GetSendInfoWithHttpInfo (string id4n);
        /// <summary>
            /// Prepare an object for transfer
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID4N to prepare for transfer</param>
        /// <param name="request">Transfer preparation status</param>
        /// <returns>Object</returns>
        Object Prepare (string id4n, TransferSendInfo request);

        /// <summary>
            /// Prepare an object for transfer
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID4N to prepare for transfer</param>
        /// <param name="request">Transfer preparation status</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PrepareWithHttpInfo (string id4n, TransferSendInfo request);
        /// <summary>
            /// Transfer a GUID or collection, obtaining it (i.e. becoming the holder) and if allowed also taking ownership
            /// </summary>
        /// <remarks>
            /// Taking ownership can be forbidden by a previous owner. See methods prepare and getInfo
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">This ID4N identifies the object to take hold of</param>
        /// <param name="request">Required information to receive an id4n object</param>
        /// <returns></returns>
        void Receive (string id4n, TransferReceiveInfo request);

        /// <summary>
            /// Transfer a GUID or collection, obtaining it (i.e. becoming the holder) and if allowed also taking ownership
            /// </summary>
        /// <remarks>
            /// Taking ownership can be forbidden by a previous owner. See methods prepare and getInfo
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">This ID4N identifies the object to take hold of</param>
        /// <param name="request">Required information to receive an id4n object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReceiveWithHttpInfo (string id4n, TransferReceiveInfo request);
        #endregion Synchronous Operations
            #region Asynchronous Operations
                /// <summary>
                /// Show transfer information
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID4N to retrieve information about</param>
            /// <returns>Task of TransferReceiveInfo</returns>
            System.Threading.Tasks.Task<TransferReceiveInfo> GetReceiveInfoAsync (string id4n);

                /// <summary>
                /// Show transfer information
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID4N to retrieve information about</param>
            /// <returns>Task of ApiResponse (TransferReceiveInfo)</returns>
                System.Threading.Tasks.Task<ApiResponse<TransferReceiveInfo>> GetReceiveInfoAsyncWithHttpInfo (string id4n);
                /// <summary>
                /// Show transfer preparation information
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID4N to retrieve information about</param>
            /// <returns>Task of TransferSendInfo</returns>
            System.Threading.Tasks.Task<TransferSendInfo> GetSendInfoAsync (string id4n);

                /// <summary>
                /// Show transfer preparation information
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID4N to retrieve information about</param>
            /// <returns>Task of ApiResponse (TransferSendInfo)</returns>
                System.Threading.Tasks.Task<ApiResponse<TransferSendInfo>> GetSendInfoAsyncWithHttpInfo (string id4n);
                /// <summary>
                /// Prepare an object for transfer
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID4N to prepare for transfer</param>
            /// <param name="request">Transfer preparation status</param>
            /// <returns>Task of Object</returns>
            System.Threading.Tasks.Task<Object> PrepareAsync (string id4n, TransferSendInfo request);

                /// <summary>
                /// Prepare an object for transfer
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID4N to prepare for transfer</param>
            /// <param name="request">Transfer preparation status</param>
            /// <returns>Task of ApiResponse (Object)</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> PrepareAsyncWithHttpInfo (string id4n, TransferSendInfo request);
                /// <summary>
                /// Transfer a GUID or collection, obtaining it (i.e. becoming the holder) and if allowed also taking ownership
                /// </summary>
                /// <remarks>
                /// Taking ownership can be forbidden by a previous owner. See methods prepare and getInfo
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">This ID4N identifies the object to take hold of</param>
            /// <param name="request">Required information to receive an id4n object</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task ReceiveAsync (string id4n, TransferReceiveInfo request);

                /// <summary>
                /// Transfer a GUID or collection, obtaining it (i.e. becoming the holder) and if allowed also taking ownership
                /// </summary>
                /// <remarks>
                /// Taking ownership can be forbidden by a previous owner. See methods prepare and getInfo
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">This ID4N identifies the object to take hold of</param>
            /// <param name="request">Required information to receive an id4n object</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> ReceiveAsyncWithHttpInfo (string id4n, TransferReceiveInfo request);
            #endregion Asynchronous Operations
        }

        /// <summary>
        /// Represents a collection of functions to interact with the API endpoints
        /// </summary>
    public partial class TransferApi : ITransferApi
        {
        private BlueRain.ID4i.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransferApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransferApi(String basePath)
        {
        this.Configuration = new Configuration { BasePath = basePath };

        ExceptionFactory = BlueRain.ID4i.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransferApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransferApi(Configuration configuration = null)
        {
        if (configuration == null) // use the default one in Configuration
        this.Configuration = Configuration.Default;
        else
        this.Configuration = configuration;

        ExceptionFactory = BlueRain.ID4i.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
        return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
        // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlueRain.ID4i.Client.ExceptionFactory ExceptionFactory
        {
        get
        {
        if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
        {
        throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
        }
        return _exceptionFactory;
        }
        set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
        return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
        this.Configuration.AddDefaultHeader(key, value);
        }

            /// <summary>
            /// Show transfer information 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID4N to retrieve information about</param>
        /// <returns>TransferReceiveInfo</returns>
            public TransferReceiveInfo GetReceiveInfo (string id4n)
            {
        ApiResponse<TransferReceiveInfo> localVarResponse = GetReceiveInfoWithHttpInfo(id4n);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Show transfer information 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID4N to retrieve information about</param>
        /// <returns>ApiResponse of TransferReceiveInfo</returns>
            public ApiResponse< TransferReceiveInfo > GetReceiveInfoWithHttpInfo (string id4n)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling TransferApi->GetReceiveInfo");

            var localVarPath = "./api/v1/transfers/{id4n}/receiveInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetReceiveInfo", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<TransferReceiveInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TransferReceiveInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransferReceiveInfo)));
            }

                /// <summary>
                /// Show transfer information 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID4N to retrieve information about</param>
            /// <returns>Task of TransferReceiveInfo</returns>
            public async System.Threading.Tasks.Task<TransferReceiveInfo> GetReceiveInfoAsync (string id4n)
                {
            ApiResponse<TransferReceiveInfo> localVarResponse = await GetReceiveInfoAsyncWithHttpInfo(id4n);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Show transfer information 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID4N to retrieve information about</param>
            /// <returns>Task of ApiResponse (TransferReceiveInfo)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<TransferReceiveInfo>> GetReceiveInfoAsyncWithHttpInfo (string id4n)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling TransferApi->GetReceiveInfo");

                var localVarPath = "./api/v1/transfers/{id4n}/receiveInfo";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetReceiveInfo", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<TransferReceiveInfo>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (TransferReceiveInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransferReceiveInfo)));
                }

            /// <summary>
            /// Show transfer preparation information 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID4N to retrieve information about</param>
        /// <returns>TransferSendInfo</returns>
            public TransferSendInfo GetSendInfo (string id4n)
            {
        ApiResponse<TransferSendInfo> localVarResponse = GetSendInfoWithHttpInfo(id4n);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Show transfer preparation information 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID4N to retrieve information about</param>
        /// <returns>ApiResponse of TransferSendInfo</returns>
            public ApiResponse< TransferSendInfo > GetSendInfoWithHttpInfo (string id4n)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling TransferApi->GetSendInfo");

            var localVarPath = "./api/v1/transfers/{id4n}/sendInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetSendInfo", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<TransferSendInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TransferSendInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransferSendInfo)));
            }

                /// <summary>
                /// Show transfer preparation information 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID4N to retrieve information about</param>
            /// <returns>Task of TransferSendInfo</returns>
            public async System.Threading.Tasks.Task<TransferSendInfo> GetSendInfoAsync (string id4n)
                {
            ApiResponse<TransferSendInfo> localVarResponse = await GetSendInfoAsyncWithHttpInfo(id4n);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Show transfer preparation information 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID4N to retrieve information about</param>
            /// <returns>Task of ApiResponse (TransferSendInfo)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<TransferSendInfo>> GetSendInfoAsyncWithHttpInfo (string id4n)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling TransferApi->GetSendInfo");

                var localVarPath = "./api/v1/transfers/{id4n}/sendInfo";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetSendInfo", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<TransferSendInfo>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (TransferSendInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransferSendInfo)));
                }

            /// <summary>
            /// Prepare an object for transfer 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID4N to prepare for transfer</param>
        /// <param name="request">Transfer preparation status</param>
        /// <returns>Object</returns>
            public Object Prepare (string id4n, TransferSendInfo request)
            {
        ApiResponse<Object> localVarResponse = PrepareWithHttpInfo(id4n, request);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Prepare an object for transfer 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">The ID4N to prepare for transfer</param>
        /// <param name="request">Transfer preparation status</param>
        /// <returns>ApiResponse of Object</returns>
            public ApiResponse< Object > PrepareWithHttpInfo (string id4n, TransferSendInfo request)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling TransferApi->Prepare");
                    // verify the required parameter 'request' is set
                    if (request == null)
                    throw new ApiException(400, "Missing required parameter 'request' when calling TransferApi->Prepare");

            var localVarPath = "./api/v1/transfers/{id4n}/sendInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (request != null && request.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
                }
                else
                {
                localVarPostBody = request; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("Prepare", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            }

                /// <summary>
                /// Prepare an object for transfer 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID4N to prepare for transfer</param>
            /// <param name="request">Transfer preparation status</param>
            /// <returns>Task of Object</returns>
            public async System.Threading.Tasks.Task<Object> PrepareAsync (string id4n, TransferSendInfo request)
                {
            ApiResponse<Object> localVarResponse = await PrepareAsyncWithHttpInfo(id4n, request);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Prepare an object for transfer 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">The ID4N to prepare for transfer</param>
            /// <param name="request">Transfer preparation status</param>
            /// <returns>Task of ApiResponse (Object)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> PrepareAsyncWithHttpInfo (string id4n, TransferSendInfo request)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling TransferApi->Prepare");
                        // verify the required parameter 'request' is set
                        if (request == null)
                        throw new ApiException(400, "Missing required parameter 'request' when calling TransferApi->Prepare");

                var localVarPath = "./api/v1/transfers/{id4n}/sendInfo";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (request != null && request.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = request; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("Prepare", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
                }

            /// <summary>
            /// Transfer a GUID or collection, obtaining it (i.e. becoming the holder) and if allowed also taking ownership Taking ownership can be forbidden by a previous owner. See methods prepare and getInfo
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">This ID4N identifies the object to take hold of</param>
        /// <param name="request">Required information to receive an id4n object</param>
        /// <returns></returns>
            public void Receive (string id4n, TransferReceiveInfo request)
            {
        ReceiveWithHttpInfo(id4n, request);
            }

            /// <summary>
            /// Transfer a GUID or collection, obtaining it (i.e. becoming the holder) and if allowed also taking ownership Taking ownership can be forbidden by a previous owner. See methods prepare and getInfo
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4n">This ID4N identifies the object to take hold of</param>
        /// <param name="request">Required information to receive an id4n object</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> ReceiveWithHttpInfo (string id4n, TransferReceiveInfo request)
            {
                    // verify the required parameter 'id4n' is set
                    if (id4n == null)
                    throw new ApiException(400, "Missing required parameter 'id4n' when calling TransferApi->Receive");
                    // verify the required parameter 'request' is set
                    if (request == null)
                    throw new ApiException(400, "Missing required parameter 'request' when calling TransferApi->Receive");

            var localVarPath = "./api/v1/transfers/{id4n}/receiveInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                if (request != null && request.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
                }
                else
                {
                localVarPostBody = request; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("Receive", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Transfer a GUID or collection, obtaining it (i.e. becoming the holder) and if allowed also taking ownership Taking ownership can be forbidden by a previous owner. See methods prepare and getInfo
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">This ID4N identifies the object to take hold of</param>
            /// <param name="request">Required information to receive an id4n object</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task ReceiveAsync (string id4n, TransferReceiveInfo request)
                {
            await ReceiveAsyncWithHttpInfo(id4n, request);

                }

                /// <summary>
                /// Transfer a GUID or collection, obtaining it (i.e. becoming the holder) and if allowed also taking ownership Taking ownership can be forbidden by a previous owner. See methods prepare and getInfo
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4n">This ID4N identifies the object to take hold of</param>
            /// <param name="request">Required information to receive an id4n object</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> ReceiveAsyncWithHttpInfo (string id4n, TransferReceiveInfo request)
                {
                        // verify the required parameter 'id4n' is set
                        if (id4n == null)
                        throw new ApiException(400, "Missing required parameter 'id4n' when calling TransferApi->Receive");
                        // verify the required parameter 'request' is set
                        if (request == null)
                        throw new ApiException(400, "Missing required parameter 'request' when calling TransferApi->Receive");

                var localVarPath = "./api/v1/transfers/{id4n}/receiveInfo";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4n != null) localVarPathParams.Add("id4n", Configuration.ApiClient.ParameterToString(id4n)); // path parameter
                    if (request != null && request.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = request; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("Receive", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

        }
    }