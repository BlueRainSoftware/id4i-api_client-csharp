/* 
 * ID4i API
 *
 * ID4i HTTP API
 *
 * OpenAPI spec version: 0.3.0
 * Contact: info@bluerain.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
    using RestSharp.Portable;
using BlueRain.ID4i.Client;
using BlueRain.ID4i.Model;
using Guid = BlueRain.ID4i.Model.Guid;

namespace BlueRain.ID4i.Api
{
    /// <summary>
        /// Represents a collection of functions to interact with the API endpoints
        /// </summary>
    public interface IOrganizationsApi : IApiAccessor
    {
    #region Synchronous Operations
        /// <summary>
            /// Add role(s) to user
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="username">username</param>
        /// <param name="changeRoleRequest">changeRoleRequest</param>
        /// <returns></returns>
        void AddUserRoles (long? organizationId, string username, ChangeRoleRequest changeRoleRequest);

        /// <summary>
            /// Add role(s) to user
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="username">username</param>
        /// <param name="changeRoleRequest">changeRoleRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddUserRolesWithHttpInfo (long? organizationId, string username, ChangeRoleRequest changeRoleRequest);
        /// <summary>
            /// Create organization
            /// </summary>
        /// <remarks>
            /// Creating a new organization.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Organization to be created</param>
        /// <returns>Organization</returns>
        Organization CreateOrganization (Organization organization);

        /// <summary>
            /// Create organization
            /// </summary>
        /// <remarks>
            /// Creating a new organization.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Organization to be created</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> CreateOrganizationWithHttpInfo (Organization organization);
        /// <summary>
            /// Delete organization
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization to be deleted.</param>
        /// <returns></returns>
        void DeleteOrganization (long? organizationId);

        /// <summary>
            /// Delete organization
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrganizationWithHttpInfo (long? organizationId);
        /// <summary>
            /// Remove billing address
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns></returns>
        void DeleteOrganizationBillingAddress (long? organizationId);

        /// <summary>
            /// Remove billing address
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrganizationBillingAddressWithHttpInfo (long? organizationId);
        /// <summary>
            /// Delete organization logo
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization where the logo should be deleted.</param>
        /// <returns></returns>
        void DeleteOrganizationLogo (long? organizationId);

        /// <summary>
            /// Delete organization logo
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization where the logo should be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrganizationLogoWithHttpInfo (long? organizationId);
        /// <summary>
            /// Find organization by id
            /// </summary>
        /// <remarks>
            /// Returns a single organization.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization to be retrieved.</param>
        /// <returns>Organization</returns>
        Organization FindOrganization (long? organizationId);

        /// <summary>
            /// Find organization by id
            /// </summary>
        /// <remarks>
            /// Returns a single organization.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization to be retrieved.</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> FindOrganizationWithHttpInfo (long? organizationId);
        /// <summary>
            /// Retrieve address
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns>OrganizationAddress</returns>
        OrganizationAddress FindOrganizationAddress (long? organizationId);

        /// <summary>
            /// Retrieve address
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns>ApiResponse of OrganizationAddress</returns>
        ApiResponse<OrganizationAddress> FindOrganizationAddressWithHttpInfo (long? organizationId);
        /// <summary>
            /// Retrieve billing address
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns>OrganizationAddress</returns>
        OrganizationAddress FindOrganizationBillingAddress (long? organizationId);

        /// <summary>
            /// Retrieve billing address
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns>ApiResponse of OrganizationAddress</returns>
        ApiResponse<OrganizationAddress> FindOrganizationBillingAddressWithHttpInfo (long? organizationId);
        /// <summary>
            /// Get collections of organization
            /// </summary>
        /// <remarks>
            /// Retrieving all collections of an organization in a paginated manner.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <param name="type">Filter by this type (optional)</param>
        /// <param name="label">Filter by this label (optional)</param>
        /// <param name="labelPrefix">Filter by this label prefix (optional)</param>
        /// <returns>PaginatedGuidCollection</returns>
        PaginatedGuidCollection GetAllCollectionsOfOrganization (long? organizationId, int? offset = null, int? limit = null, string type = null, string label = null, string labelPrefix = null);

        /// <summary>
            /// Get collections of organization
            /// </summary>
        /// <remarks>
            /// Retrieving all collections of an organization in a paginated manner.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <param name="type">Filter by this type (optional)</param>
        /// <param name="label">Filter by this label (optional)</param>
        /// <param name="labelPrefix">Filter by this label prefix (optional)</param>
        /// <returns>ApiResponse of PaginatedGuidCollection</returns>
        ApiResponse<PaginatedGuidCollection> GetAllCollectionsOfOrganizationWithHttpInfo (long? organizationId, int? offset = null, int? limit = null, string type = null, string label = null, string labelPrefix = null);
        /// <summary>
            /// List users and their roles
            /// </summary>
        /// <remarks>
            /// Listing users and their roles in a paginated manner.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedUserRolesResponse</returns>
        PaginatedUserRolesResponse GetAllOrganizationRoles (long? organizationId, int? offset = null, int? limit = null);

        /// <summary>
            /// List users and their roles
            /// </summary>
        /// <remarks>
            /// Listing users and their roles in a paginated manner.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedUserRolesResponse</returns>
        ApiResponse<PaginatedUserRolesResponse> GetAllOrganizationRolesWithHttpInfo (long? organizationId, int? offset = null, int? limit = null);
        /// <summary>
            /// Retrieve organizations of user
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedOrganizationResponse</returns>
        PaginatedOrganizationResponse GetOrganizationsOfUser (string role = null, int? offset = null, int? limit = null);

        /// <summary>
            /// Retrieve organizations of user
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedOrganizationResponse</returns>
        ApiResponse<PaginatedOrganizationResponse> GetOrganizationsOfUserWithHttpInfo (string role = null, int? offset = null, int? limit = null);
        /// <summary>
            /// Get user roles by username
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="username">username</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedStringResponse</returns>
        PaginatedStringResponse GetUserRoles (long? organizationId, string username, int? offset = null, int? limit = null);

        /// <summary>
            /// Get user roles by username
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="username">username</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedStringResponse</returns>
        ApiResponse<PaginatedStringResponse> GetUserRolesWithHttpInfo (long? organizationId, string username, int? offset = null, int? limit = null);
        /// <summary>
            /// Find users in organization
            /// </summary>
        /// <remarks>
            /// Finding users in the specified organization in a paginated manner.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedUserPresentationResponse</returns>
        PaginatedUserPresentationResponse GetUsersOfOrganization (long? organizationId, int? offset = null, int? limit = null);

        /// <summary>
            /// Find users in organization
            /// </summary>
        /// <remarks>
            /// Finding users in the specified organization in a paginated manner.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedUserPresentationResponse</returns>
        ApiResponse<PaginatedUserPresentationResponse> GetUsersOfOrganizationWithHttpInfo (long? organizationId, int? offset = null, int? limit = null);
        /// <summary>
            /// Invite Users
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="invitationList">invitationList</param>
        /// <returns></returns>
        void InviteUsers (long? organizationId, OrganizationUserInvitationListRequest invitationList);

        /// <summary>
            /// Invite Users
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="invitationList">invitationList</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InviteUsersWithHttpInfo (long? organizationId, OrganizationUserInvitationListRequest invitationList);
        /// <summary>
            /// List countries
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedCountryResponse</returns>
        PaginatedCountryResponse ListCountries (int? offset = null, int? limit = null);

        /// <summary>
            /// List countries
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedCountryResponse</returns>
        ApiResponse<PaginatedCountryResponse> ListCountriesWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
            /// Remove role(s) from user
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="username">username</param>
        /// <param name="changeRoleRequest">changeRoleRequest</param>
        /// <returns></returns>
        void RemoveUserRoles (long? organizationId, string username, ChangeRoleRequest changeRoleRequest);

        /// <summary>
            /// Remove role(s) from user
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="username">username</param>
        /// <param name="changeRoleRequest">changeRoleRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveUserRolesWithHttpInfo (long? organizationId, string username, ChangeRoleRequest changeRoleRequest);
        /// <summary>
            /// Update organization logo
            /// </summary>
        /// <remarks>
            /// Updating an organization logo using a multipart file upload.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization where the logo should be updated.</param>
        /// <param name="file">An image containing the new logo.</param>
        /// <returns>PublicImagePresentation</returns>
        PublicImagePresentation SetOrganizationLogo (long? organizationId, System.IO.Stream file);

        /// <summary>
            /// Update organization logo
            /// </summary>
        /// <remarks>
            /// Updating an organization logo using a multipart file upload.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization where the logo should be updated.</param>
        /// <param name="file">An image containing the new logo.</param>
        /// <returns>ApiResponse of PublicImagePresentation</returns>
        ApiResponse<PublicImagePresentation> SetOrganizationLogoWithHttpInfo (long? organizationId, System.IO.Stream file);
        /// <summary>
            /// Update organization
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization to be updated.</param>
        /// <param name="organization">Updated organization object</param>
        /// <returns>Organization</returns>
        Organization UpdateOrganization (long? organizationId, Organization organization);

        /// <summary>
            /// Update organization
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization to be updated.</param>
        /// <param name="organization">Updated organization object</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> UpdateOrganizationWithHttpInfo (long? organizationId, Organization organization);
        /// <summary>
            /// Store address
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="addressResource">addressResource</param>
        /// <returns>OrganizationAddress</returns>
        OrganizationAddress UpdateOrganizationAddress (long? organizationId, OrganizationAddress addressResource);

        /// <summary>
            /// Store address
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="addressResource">addressResource</param>
        /// <returns>ApiResponse of OrganizationAddress</returns>
        ApiResponse<OrganizationAddress> UpdateOrganizationAddressWithHttpInfo (long? organizationId, OrganizationAddress addressResource);
        /// <summary>
            /// Store billing address
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="addressResource">addressResource</param>
        /// <returns>OrganizationAddress</returns>
        OrganizationAddress UpdateOrganizationBillingAddress (long? organizationId, OrganizationAddress addressResource);

        /// <summary>
            /// Store billing address
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="addressResource">addressResource</param>
        /// <returns>ApiResponse of OrganizationAddress</returns>
        ApiResponse<OrganizationAddress> UpdateOrganizationBillingAddressWithHttpInfo (long? organizationId, OrganizationAddress addressResource);
        #endregion Synchronous Operations
            #region Asynchronous Operations
                /// <summary>
                /// Add role(s) to user
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="username">username</param>
            /// <param name="changeRoleRequest">changeRoleRequest</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task AddUserRolesAsync (long? organizationId, string username, ChangeRoleRequest changeRoleRequest);

                /// <summary>
                /// Add role(s) to user
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="username">username</param>
            /// <param name="changeRoleRequest">changeRoleRequest</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> AddUserRolesAsyncWithHttpInfo (long? organizationId, string username, ChangeRoleRequest changeRoleRequest);
                /// <summary>
                /// Create organization
                /// </summary>
                /// <remarks>
                /// Creating a new organization.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organization">Organization to be created</param>
            /// <returns>Task of Organization</returns>
            System.Threading.Tasks.Task<Organization> CreateOrganizationAsync (Organization organization);

                /// <summary>
                /// Create organization
                /// </summary>
                /// <remarks>
                /// Creating a new organization.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organization">Organization to be created</param>
            /// <returns>Task of ApiResponse (Organization)</returns>
                System.Threading.Tasks.Task<ApiResponse<Organization>> CreateOrganizationAsyncWithHttpInfo (Organization organization);
                /// <summary>
                /// Delete organization
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization to be deleted.</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task DeleteOrganizationAsync (long? organizationId);

                /// <summary>
                /// Delete organization
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization to be deleted.</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrganizationAsyncWithHttpInfo (long? organizationId);
                /// <summary>
                /// Remove billing address
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task DeleteOrganizationBillingAddressAsync (long? organizationId);

                /// <summary>
                /// Remove billing address
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrganizationBillingAddressAsyncWithHttpInfo (long? organizationId);
                /// <summary>
                /// Delete organization logo
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization where the logo should be deleted.</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task DeleteOrganizationLogoAsync (long? organizationId);

                /// <summary>
                /// Delete organization logo
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization where the logo should be deleted.</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrganizationLogoAsyncWithHttpInfo (long? organizationId);
                /// <summary>
                /// Find organization by id
                /// </summary>
                /// <remarks>
                /// Returns a single organization.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization to be retrieved.</param>
            /// <returns>Task of Organization</returns>
            System.Threading.Tasks.Task<Organization> FindOrganizationAsync (long? organizationId);

                /// <summary>
                /// Find organization by id
                /// </summary>
                /// <remarks>
                /// Returns a single organization.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization to be retrieved.</param>
            /// <returns>Task of ApiResponse (Organization)</returns>
                System.Threading.Tasks.Task<ApiResponse<Organization>> FindOrganizationAsyncWithHttpInfo (long? organizationId);
                /// <summary>
                /// Retrieve address
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <returns>Task of OrganizationAddress</returns>
            System.Threading.Tasks.Task<OrganizationAddress> FindOrganizationAddressAsync (long? organizationId);

                /// <summary>
                /// Retrieve address
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <returns>Task of ApiResponse (OrganizationAddress)</returns>
                System.Threading.Tasks.Task<ApiResponse<OrganizationAddress>> FindOrganizationAddressAsyncWithHttpInfo (long? organizationId);
                /// <summary>
                /// Retrieve billing address
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <returns>Task of OrganizationAddress</returns>
            System.Threading.Tasks.Task<OrganizationAddress> FindOrganizationBillingAddressAsync (long? organizationId);

                /// <summary>
                /// Retrieve billing address
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <returns>Task of ApiResponse (OrganizationAddress)</returns>
                System.Threading.Tasks.Task<ApiResponse<OrganizationAddress>> FindOrganizationBillingAddressAsyncWithHttpInfo (long? organizationId);
                /// <summary>
                /// Get collections of organization
                /// </summary>
                /// <remarks>
                /// Retrieving all collections of an organization in a paginated manner.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <param name="type">Filter by this type (optional)</param>
            /// <param name="label">Filter by this label (optional)</param>
            /// <param name="labelPrefix">Filter by this label prefix (optional)</param>
            /// <returns>Task of PaginatedGuidCollection</returns>
            System.Threading.Tasks.Task<PaginatedGuidCollection> GetAllCollectionsOfOrganizationAsync (long? organizationId, int? offset = null, int? limit = null, string type = null, string label = null, string labelPrefix = null);

                /// <summary>
                /// Get collections of organization
                /// </summary>
                /// <remarks>
                /// Retrieving all collections of an organization in a paginated manner.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <param name="type">Filter by this type (optional)</param>
            /// <param name="label">Filter by this label (optional)</param>
            /// <param name="labelPrefix">Filter by this label prefix (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedGuidCollection)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedGuidCollection>> GetAllCollectionsOfOrganizationAsyncWithHttpInfo (long? organizationId, int? offset = null, int? limit = null, string type = null, string label = null, string labelPrefix = null);
                /// <summary>
                /// List users and their roles
                /// </summary>
                /// <remarks>
                /// Listing users and their roles in a paginated manner.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedUserRolesResponse</returns>
            System.Threading.Tasks.Task<PaginatedUserRolesResponse> GetAllOrganizationRolesAsync (long? organizationId, int? offset = null, int? limit = null);

                /// <summary>
                /// List users and their roles
                /// </summary>
                /// <remarks>
                /// Listing users and their roles in a paginated manner.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedUserRolesResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedUserRolesResponse>> GetAllOrganizationRolesAsyncWithHttpInfo (long? organizationId, int? offset = null, int? limit = null);
                /// <summary>
                /// Retrieve organizations of user
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="role">role (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedOrganizationResponse</returns>
            System.Threading.Tasks.Task<PaginatedOrganizationResponse> GetOrganizationsOfUserAsync (string role = null, int? offset = null, int? limit = null);

                /// <summary>
                /// Retrieve organizations of user
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="role">role (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedOrganizationResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedOrganizationResponse>> GetOrganizationsOfUserAsyncWithHttpInfo (string role = null, int? offset = null, int? limit = null);
                /// <summary>
                /// Get user roles by username
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="username">username</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedStringResponse</returns>
            System.Threading.Tasks.Task<PaginatedStringResponse> GetUserRolesAsync (long? organizationId, string username, int? offset = null, int? limit = null);

                /// <summary>
                /// Get user roles by username
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="username">username</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedStringResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedStringResponse>> GetUserRolesAsyncWithHttpInfo (long? organizationId, string username, int? offset = null, int? limit = null);
                /// <summary>
                /// Find users in organization
                /// </summary>
                /// <remarks>
                /// Finding users in the specified organization in a paginated manner.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedUserPresentationResponse</returns>
            System.Threading.Tasks.Task<PaginatedUserPresentationResponse> GetUsersOfOrganizationAsync (long? organizationId, int? offset = null, int? limit = null);

                /// <summary>
                /// Find users in organization
                /// </summary>
                /// <remarks>
                /// Finding users in the specified organization in a paginated manner.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedUserPresentationResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedUserPresentationResponse>> GetUsersOfOrganizationAsyncWithHttpInfo (long? organizationId, int? offset = null, int? limit = null);
                /// <summary>
                /// Invite Users
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="invitationList">invitationList</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task InviteUsersAsync (long? organizationId, OrganizationUserInvitationListRequest invitationList);

                /// <summary>
                /// Invite Users
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="invitationList">invitationList</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> InviteUsersAsyncWithHttpInfo (long? organizationId, OrganizationUserInvitationListRequest invitationList);
                /// <summary>
                /// List countries
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedCountryResponse</returns>
            System.Threading.Tasks.Task<PaginatedCountryResponse> ListCountriesAsync (int? offset = null, int? limit = null);

                /// <summary>
                /// List countries
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedCountryResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedCountryResponse>> ListCountriesAsyncWithHttpInfo (int? offset = null, int? limit = null);
                /// <summary>
                /// Remove role(s) from user
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="username">username</param>
            /// <param name="changeRoleRequest">changeRoleRequest</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task RemoveUserRolesAsync (long? organizationId, string username, ChangeRoleRequest changeRoleRequest);

                /// <summary>
                /// Remove role(s) from user
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="username">username</param>
            /// <param name="changeRoleRequest">changeRoleRequest</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserRolesAsyncWithHttpInfo (long? organizationId, string username, ChangeRoleRequest changeRoleRequest);
                /// <summary>
                /// Update organization logo
                /// </summary>
                /// <remarks>
                /// Updating an organization logo using a multipart file upload.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization where the logo should be updated.</param>
            /// <param name="file">An image containing the new logo.</param>
            /// <returns>Task of PublicImagePresentation</returns>
            System.Threading.Tasks.Task<PublicImagePresentation> SetOrganizationLogoAsync (long? organizationId, System.IO.Stream file);

                /// <summary>
                /// Update organization logo
                /// </summary>
                /// <remarks>
                /// Updating an organization logo using a multipart file upload.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization where the logo should be updated.</param>
            /// <param name="file">An image containing the new logo.</param>
            /// <returns>Task of ApiResponse (PublicImagePresentation)</returns>
                System.Threading.Tasks.Task<ApiResponse<PublicImagePresentation>> SetOrganizationLogoAsyncWithHttpInfo (long? organizationId, System.IO.Stream file);
                /// <summary>
                /// Update organization
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization to be updated.</param>
            /// <param name="organization">Updated organization object</param>
            /// <returns>Task of Organization</returns>
            System.Threading.Tasks.Task<Organization> UpdateOrganizationAsync (long? organizationId, Organization organization);

                /// <summary>
                /// Update organization
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization to be updated.</param>
            /// <param name="organization">Updated organization object</param>
            /// <returns>Task of ApiResponse (Organization)</returns>
                System.Threading.Tasks.Task<ApiResponse<Organization>> UpdateOrganizationAsyncWithHttpInfo (long? organizationId, Organization organization);
                /// <summary>
                /// Store address
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="addressResource">addressResource</param>
            /// <returns>Task of OrganizationAddress</returns>
            System.Threading.Tasks.Task<OrganizationAddress> UpdateOrganizationAddressAsync (long? organizationId, OrganizationAddress addressResource);

                /// <summary>
                /// Store address
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="addressResource">addressResource</param>
            /// <returns>Task of ApiResponse (OrganizationAddress)</returns>
                System.Threading.Tasks.Task<ApiResponse<OrganizationAddress>> UpdateOrganizationAddressAsyncWithHttpInfo (long? organizationId, OrganizationAddress addressResource);
                /// <summary>
                /// Store billing address
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="addressResource">addressResource</param>
            /// <returns>Task of OrganizationAddress</returns>
            System.Threading.Tasks.Task<OrganizationAddress> UpdateOrganizationBillingAddressAsync (long? organizationId, OrganizationAddress addressResource);

                /// <summary>
                /// Store billing address
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="addressResource">addressResource</param>
            /// <returns>Task of ApiResponse (OrganizationAddress)</returns>
                System.Threading.Tasks.Task<ApiResponse<OrganizationAddress>> UpdateOrganizationBillingAddressAsyncWithHttpInfo (long? organizationId, OrganizationAddress addressResource);
            #endregion Asynchronous Operations
        }

        /// <summary>
        /// Represents a collection of functions to interact with the API endpoints
        /// </summary>
    public partial class OrganizationsApi : IOrganizationsApi
        {
        private BlueRain.ID4i.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationsApi(String basePath)
        {
        this.Configuration = new Configuration { BasePath = basePath };

        ExceptionFactory = BlueRain.ID4i.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganizationsApi(Configuration configuration = null)
        {
        if (configuration == null) // use the default one in Configuration
        this.Configuration = Configuration.Default;
        else
        this.Configuration = configuration;

        ExceptionFactory = BlueRain.ID4i.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
        return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
        // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlueRain.ID4i.Client.ExceptionFactory ExceptionFactory
        {
        get
        {
        if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
        {
        throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
        }
        return _exceptionFactory;
        }
        set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
        return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
        this.Configuration.AddDefaultHeader(key, value);
        }

            /// <summary>
            /// Add role(s) to user 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="username">username</param>
        /// <param name="changeRoleRequest">changeRoleRequest</param>
        /// <returns></returns>
            public void AddUserRoles (long? organizationId, string username, ChangeRoleRequest changeRoleRequest)
            {
        AddUserRolesWithHttpInfo(organizationId, username, changeRoleRequest);
            }

            /// <summary>
            /// Add role(s) to user 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="username">username</param>
        /// <param name="changeRoleRequest">changeRoleRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> AddUserRolesWithHttpInfo (long? organizationId, string username, ChangeRoleRequest changeRoleRequest)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->AddUserRoles");
                    // verify the required parameter 'username' is set
                    if (username == null)
                    throw new ApiException(400, "Missing required parameter 'username' when calling OrganizationsApi->AddUserRoles");
                    // verify the required parameter 'changeRoleRequest' is set
                    if (changeRoleRequest == null)
                    throw new ApiException(400, "Missing required parameter 'changeRoleRequest' when calling OrganizationsApi->AddUserRoles");

            var localVarPath = "./api/v1/organizations/{organizationId}/users/{username}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
                if (changeRoleRequest != null && changeRoleRequest.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(changeRoleRequest); // http body (model) parameter
                }
                else
                {
                localVarPostBody = changeRoleRequest; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("AddUserRoles", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Add role(s) to user 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="username">username</param>
            /// <param name="changeRoleRequest">changeRoleRequest</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task AddUserRolesAsync (long? organizationId, string username, ChangeRoleRequest changeRoleRequest)
                {
            await AddUserRolesAsyncWithHttpInfo(organizationId, username, changeRoleRequest);

                }

                /// <summary>
                /// Add role(s) to user 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="username">username</param>
            /// <param name="changeRoleRequest">changeRoleRequest</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> AddUserRolesAsyncWithHttpInfo (long? organizationId, string username, ChangeRoleRequest changeRoleRequest)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->AddUserRoles");
                        // verify the required parameter 'username' is set
                        if (username == null)
                        throw new ApiException(400, "Missing required parameter 'username' when calling OrganizationsApi->AddUserRoles");
                        // verify the required parameter 'changeRoleRequest' is set
                        if (changeRoleRequest == null)
                        throw new ApiException(400, "Missing required parameter 'changeRoleRequest' when calling OrganizationsApi->AddUserRoles");

                var localVarPath = "./api/v1/organizations/{organizationId}/users/{username}/roles";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
                    if (changeRoleRequest != null && changeRoleRequest.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(changeRoleRequest); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = changeRoleRequest; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("AddUserRoles", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Create organization Creating a new organization.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Organization to be created</param>
        /// <returns>Organization</returns>
            public Organization CreateOrganization (Organization organization)
            {
        ApiResponse<Organization> localVarResponse = CreateOrganizationWithHttpInfo(organization);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Create organization Creating a new organization.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Organization to be created</param>
        /// <returns>ApiResponse of Organization</returns>
            public ApiResponse< Organization > CreateOrganizationWithHttpInfo (Organization organization)
            {
                    // verify the required parameter 'organization' is set
                    if (organization == null)
                    throw new ApiException(400, "Missing required parameter 'organization' when calling OrganizationsApi->CreateOrganization");

            var localVarPath = "./api/v1/organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organization != null && organization.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(organization); // http body (model) parameter
                }
                else
                {
                localVarPostBody = organization; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("CreateOrganization", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Organization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Organization) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
            }

                /// <summary>
                /// Create organization Creating a new organization.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organization">Organization to be created</param>
            /// <returns>Task of Organization</returns>
            public async System.Threading.Tasks.Task<Organization> CreateOrganizationAsync (Organization organization)
                {
            ApiResponse<Organization> localVarResponse = await CreateOrganizationAsyncWithHttpInfo(organization);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Create organization Creating a new organization.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organization">Organization to be created</param>
            /// <returns>Task of ApiResponse (Organization)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Organization>> CreateOrganizationAsyncWithHttpInfo (Organization organization)
                {
                        // verify the required parameter 'organization' is set
                        if (organization == null)
                        throw new ApiException(400, "Missing required parameter 'organization' when calling OrganizationsApi->CreateOrganization");

                var localVarPath = "./api/v1/organizations";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organization != null && organization.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(organization); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = organization; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("CreateOrganization", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Organization>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (Organization) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
                }

            /// <summary>
            /// Delete organization 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization to be deleted.</param>
        /// <returns></returns>
            public void DeleteOrganization (long? organizationId)
            {
        DeleteOrganizationWithHttpInfo(organizationId);
            }

            /// <summary>
            /// Delete organization 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> DeleteOrganizationWithHttpInfo (long? organizationId)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->DeleteOrganization");

            var localVarPath = "./api/v1/organizations/{organizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("DeleteOrganization", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Delete organization 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization to be deleted.</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task DeleteOrganizationAsync (long? organizationId)
                {
            await DeleteOrganizationAsyncWithHttpInfo(organizationId);

                }

                /// <summary>
                /// Delete organization 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization to be deleted.</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrganizationAsyncWithHttpInfo (long? organizationId)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->DeleteOrganization");

                var localVarPath = "./api/v1/organizations/{organizationId}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("DeleteOrganization", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Remove billing address 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns></returns>
            public void DeleteOrganizationBillingAddress (long? organizationId)
            {
        DeleteOrganizationBillingAddressWithHttpInfo(organizationId);
            }

            /// <summary>
            /// Remove billing address 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> DeleteOrganizationBillingAddressWithHttpInfo (long? organizationId)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->DeleteOrganizationBillingAddress");

            var localVarPath = "./api/v1/organizations/{organizationId}/addresses/billing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("DeleteOrganizationBillingAddress", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Remove billing address 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task DeleteOrganizationBillingAddressAsync (long? organizationId)
                {
            await DeleteOrganizationBillingAddressAsyncWithHttpInfo(organizationId);

                }

                /// <summary>
                /// Remove billing address 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrganizationBillingAddressAsyncWithHttpInfo (long? organizationId)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->DeleteOrganizationBillingAddress");

                var localVarPath = "./api/v1/organizations/{organizationId}/addresses/billing";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("DeleteOrganizationBillingAddress", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Delete organization logo 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization where the logo should be deleted.</param>
        /// <returns></returns>
            public void DeleteOrganizationLogo (long? organizationId)
            {
        DeleteOrganizationLogoWithHttpInfo(organizationId);
            }

            /// <summary>
            /// Delete organization logo 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization where the logo should be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> DeleteOrganizationLogoWithHttpInfo (long? organizationId)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->DeleteOrganizationLogo");

            var localVarPath = "./api/v1/organizations/{organizationId}/logo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("DeleteOrganizationLogo", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Delete organization logo 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization where the logo should be deleted.</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task DeleteOrganizationLogoAsync (long? organizationId)
                {
            await DeleteOrganizationLogoAsyncWithHttpInfo(organizationId);

                }

                /// <summary>
                /// Delete organization logo 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization where the logo should be deleted.</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrganizationLogoAsyncWithHttpInfo (long? organizationId)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->DeleteOrganizationLogo");

                var localVarPath = "./api/v1/organizations/{organizationId}/logo";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("DeleteOrganizationLogo", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Find organization by id Returns a single organization.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization to be retrieved.</param>
        /// <returns>Organization</returns>
            public Organization FindOrganization (long? organizationId)
            {
        ApiResponse<Organization> localVarResponse = FindOrganizationWithHttpInfo(organizationId);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Find organization by id Returns a single organization.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization to be retrieved.</param>
        /// <returns>ApiResponse of Organization</returns>
            public ApiResponse< Organization > FindOrganizationWithHttpInfo (long? organizationId)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->FindOrganization");

            var localVarPath = "./api/v1/organizations/{organizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("FindOrganization", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Organization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Organization) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
            }

                /// <summary>
                /// Find organization by id Returns a single organization.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization to be retrieved.</param>
            /// <returns>Task of Organization</returns>
            public async System.Threading.Tasks.Task<Organization> FindOrganizationAsync (long? organizationId)
                {
            ApiResponse<Organization> localVarResponse = await FindOrganizationAsyncWithHttpInfo(organizationId);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Find organization by id Returns a single organization.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization to be retrieved.</param>
            /// <returns>Task of ApiResponse (Organization)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Organization>> FindOrganizationAsyncWithHttpInfo (long? organizationId)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->FindOrganization");

                var localVarPath = "./api/v1/organizations/{organizationId}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("FindOrganization", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Organization>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (Organization) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
                }

            /// <summary>
            /// Retrieve address 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns>OrganizationAddress</returns>
            public OrganizationAddress FindOrganizationAddress (long? organizationId)
            {
        ApiResponse<OrganizationAddress> localVarResponse = FindOrganizationAddressWithHttpInfo(organizationId);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Retrieve address 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns>ApiResponse of OrganizationAddress</returns>
            public ApiResponse< OrganizationAddress > FindOrganizationAddressWithHttpInfo (long? organizationId)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->FindOrganizationAddress");

            var localVarPath = "./api/v1/organizations/{organizationId}/addresses/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("FindOrganizationAddress", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<OrganizationAddress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (OrganizationAddress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationAddress)));
            }

                /// <summary>
                /// Retrieve address 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <returns>Task of OrganizationAddress</returns>
            public async System.Threading.Tasks.Task<OrganizationAddress> FindOrganizationAddressAsync (long? organizationId)
                {
            ApiResponse<OrganizationAddress> localVarResponse = await FindOrganizationAddressAsyncWithHttpInfo(organizationId);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Retrieve address 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <returns>Task of ApiResponse (OrganizationAddress)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<OrganizationAddress>> FindOrganizationAddressAsyncWithHttpInfo (long? organizationId)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->FindOrganizationAddress");

                var localVarPath = "./api/v1/organizations/{organizationId}/addresses/default";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("FindOrganizationAddress", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<OrganizationAddress>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (OrganizationAddress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationAddress)));
                }

            /// <summary>
            /// Retrieve billing address 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns>OrganizationAddress</returns>
            public OrganizationAddress FindOrganizationBillingAddress (long? organizationId)
            {
        ApiResponse<OrganizationAddress> localVarResponse = FindOrganizationBillingAddressWithHttpInfo(organizationId);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Retrieve billing address 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <returns>ApiResponse of OrganizationAddress</returns>
            public ApiResponse< OrganizationAddress > FindOrganizationBillingAddressWithHttpInfo (long? organizationId)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->FindOrganizationBillingAddress");

            var localVarPath = "./api/v1/organizations/{organizationId}/addresses/billing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("FindOrganizationBillingAddress", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<OrganizationAddress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (OrganizationAddress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationAddress)));
            }

                /// <summary>
                /// Retrieve billing address 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <returns>Task of OrganizationAddress</returns>
            public async System.Threading.Tasks.Task<OrganizationAddress> FindOrganizationBillingAddressAsync (long? organizationId)
                {
            ApiResponse<OrganizationAddress> localVarResponse = await FindOrganizationBillingAddressAsyncWithHttpInfo(organizationId);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Retrieve billing address 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <returns>Task of ApiResponse (OrganizationAddress)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<OrganizationAddress>> FindOrganizationBillingAddressAsyncWithHttpInfo (long? organizationId)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->FindOrganizationBillingAddress");

                var localVarPath = "./api/v1/organizations/{organizationId}/addresses/billing";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("FindOrganizationBillingAddress", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<OrganizationAddress>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (OrganizationAddress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationAddress)));
                }

            /// <summary>
            /// Get collections of organization Retrieving all collections of an organization in a paginated manner.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <param name="type">Filter by this type (optional)</param>
        /// <param name="label">Filter by this label (optional)</param>
        /// <param name="labelPrefix">Filter by this label prefix (optional)</param>
        /// <returns>PaginatedGuidCollection</returns>
            public PaginatedGuidCollection GetAllCollectionsOfOrganization (long? organizationId, int? offset = null, int? limit = null, string type = null, string label = null, string labelPrefix = null)
            {
        ApiResponse<PaginatedGuidCollection> localVarResponse = GetAllCollectionsOfOrganizationWithHttpInfo(organizationId, offset, limit, type, label, labelPrefix);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Get collections of organization Retrieving all collections of an organization in a paginated manner.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <param name="type">Filter by this type (optional)</param>
        /// <param name="label">Filter by this label (optional)</param>
        /// <param name="labelPrefix">Filter by this label prefix (optional)</param>
        /// <returns>ApiResponse of PaginatedGuidCollection</returns>
            public ApiResponse< PaginatedGuidCollection > GetAllCollectionsOfOrganizationWithHttpInfo (long? organizationId, int? offset = null, int? limit = null, string type = null, string label = null, string labelPrefix = null)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetAllCollectionsOfOrganization");

            var localVarPath = "./api/v1/organizations/{organizationId}/collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
                if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
                if (label != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
                if (labelPrefix != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "labelPrefix", labelPrefix)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetAllCollectionsOfOrganization", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedGuidCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedGuidCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedGuidCollection)));
            }

                /// <summary>
                /// Get collections of organization Retrieving all collections of an organization in a paginated manner.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <param name="type">Filter by this type (optional)</param>
            /// <param name="label">Filter by this label (optional)</param>
            /// <param name="labelPrefix">Filter by this label prefix (optional)</param>
            /// <returns>Task of PaginatedGuidCollection</returns>
            public async System.Threading.Tasks.Task<PaginatedGuidCollection> GetAllCollectionsOfOrganizationAsync (long? organizationId, int? offset = null, int? limit = null, string type = null, string label = null, string labelPrefix = null)
                {
            ApiResponse<PaginatedGuidCollection> localVarResponse = await GetAllCollectionsOfOrganizationAsyncWithHttpInfo(organizationId, offset, limit, type, label, labelPrefix);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Get collections of organization Retrieving all collections of an organization in a paginated manner.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <param name="type">Filter by this type (optional)</param>
            /// <param name="label">Filter by this label (optional)</param>
            /// <param name="labelPrefix">Filter by this label prefix (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedGuidCollection)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedGuidCollection>> GetAllCollectionsOfOrganizationAsyncWithHttpInfo (long? organizationId, int? offset = null, int? limit = null, string type = null, string label = null, string labelPrefix = null)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetAllCollectionsOfOrganization");

                var localVarPath = "./api/v1/organizations/{organizationId}/collections";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
                    if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
                    if (label != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
                    if (labelPrefix != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "labelPrefix", labelPrefix)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetAllCollectionsOfOrganization", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedGuidCollection>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedGuidCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedGuidCollection)));
                }

            /// <summary>
            /// List users and their roles Listing users and their roles in a paginated manner.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedUserRolesResponse</returns>
            public PaginatedUserRolesResponse GetAllOrganizationRoles (long? organizationId, int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedUserRolesResponse> localVarResponse = GetAllOrganizationRolesWithHttpInfo(organizationId, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// List users and their roles Listing users and their roles in a paginated manner.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedUserRolesResponse</returns>
            public ApiResponse< PaginatedUserRolesResponse > GetAllOrganizationRolesWithHttpInfo (long? organizationId, int? offset = null, int? limit = null)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetAllOrganizationRoles");

            var localVarPath = "./api/v1/organizations/{organizationId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetAllOrganizationRoles", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedUserRolesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedUserRolesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedUserRolesResponse)));
            }

                /// <summary>
                /// List users and their roles Listing users and their roles in a paginated manner.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedUserRolesResponse</returns>
            public async System.Threading.Tasks.Task<PaginatedUserRolesResponse> GetAllOrganizationRolesAsync (long? organizationId, int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedUserRolesResponse> localVarResponse = await GetAllOrganizationRolesAsyncWithHttpInfo(organizationId, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// List users and their roles Listing users and their roles in a paginated manner.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedUserRolesResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedUserRolesResponse>> GetAllOrganizationRolesAsyncWithHttpInfo (long? organizationId, int? offset = null, int? limit = null)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetAllOrganizationRoles");

                var localVarPath = "./api/v1/organizations/{organizationId}/roles";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetAllOrganizationRoles", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedUserRolesResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedUserRolesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedUserRolesResponse)));
                }

            /// <summary>
            /// Retrieve organizations of user 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedOrganizationResponse</returns>
            public PaginatedOrganizationResponse GetOrganizationsOfUser (string role = null, int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedOrganizationResponse> localVarResponse = GetOrganizationsOfUserWithHttpInfo(role, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Retrieve organizations of user 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">role (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedOrganizationResponse</returns>
            public ApiResponse< PaginatedOrganizationResponse > GetOrganizationsOfUserWithHttpInfo (string role = null, int? offset = null, int? limit = null)
            {

            var localVarPath = "./api/v1/user/organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (role != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "role", role)); // query parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetOrganizationsOfUser", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedOrganizationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedOrganizationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedOrganizationResponse)));
            }

                /// <summary>
                /// Retrieve organizations of user 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="role">role (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedOrganizationResponse</returns>
            public async System.Threading.Tasks.Task<PaginatedOrganizationResponse> GetOrganizationsOfUserAsync (string role = null, int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedOrganizationResponse> localVarResponse = await GetOrganizationsOfUserAsyncWithHttpInfo(role, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Retrieve organizations of user 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="role">role (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedOrganizationResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedOrganizationResponse>> GetOrganizationsOfUserAsyncWithHttpInfo (string role = null, int? offset = null, int? limit = null)
                {

                var localVarPath = "./api/v1/user/organizations";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (role != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "role", role)); // query parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetOrganizationsOfUser", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedOrganizationResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedOrganizationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedOrganizationResponse)));
                }

            /// <summary>
            /// Get user roles by username 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="username">username</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedStringResponse</returns>
            public PaginatedStringResponse GetUserRoles (long? organizationId, string username, int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedStringResponse> localVarResponse = GetUserRolesWithHttpInfo(organizationId, username, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Get user roles by username 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="username">username</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedStringResponse</returns>
            public ApiResponse< PaginatedStringResponse > GetUserRolesWithHttpInfo (long? organizationId, string username, int? offset = null, int? limit = null)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetUserRoles");
                    // verify the required parameter 'username' is set
                    if (username == null)
                    throw new ApiException(400, "Missing required parameter 'username' when calling OrganizationsApi->GetUserRoles");

            var localVarPath = "./api/v1/organizations/{organizationId}/users/{username}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetUserRoles", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedStringResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedStringResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedStringResponse)));
            }

                /// <summary>
                /// Get user roles by username 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="username">username</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedStringResponse</returns>
            public async System.Threading.Tasks.Task<PaginatedStringResponse> GetUserRolesAsync (long? organizationId, string username, int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedStringResponse> localVarResponse = await GetUserRolesAsyncWithHttpInfo(organizationId, username, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Get user roles by username 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="username">username</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedStringResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedStringResponse>> GetUserRolesAsyncWithHttpInfo (long? organizationId, string username, int? offset = null, int? limit = null)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetUserRoles");
                        // verify the required parameter 'username' is set
                        if (username == null)
                        throw new ApiException(400, "Missing required parameter 'username' when calling OrganizationsApi->GetUserRoles");

                var localVarPath = "./api/v1/organizations/{organizationId}/users/{username}/roles";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetUserRoles", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedStringResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedStringResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedStringResponse)));
                }

            /// <summary>
            /// Find users in organization Finding users in the specified organization in a paginated manner.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedUserPresentationResponse</returns>
            public PaginatedUserPresentationResponse GetUsersOfOrganization (long? organizationId, int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedUserPresentationResponse> localVarResponse = GetUsersOfOrganizationWithHttpInfo(organizationId, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Find users in organization Finding users in the specified organization in a paginated manner.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedUserPresentationResponse</returns>
            public ApiResponse< PaginatedUserPresentationResponse > GetUsersOfOrganizationWithHttpInfo (long? organizationId, int? offset = null, int? limit = null)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetUsersOfOrganization");

            var localVarPath = "./api/v1/organizations/{organizationId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetUsersOfOrganization", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedUserPresentationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedUserPresentationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedUserPresentationResponse)));
            }

                /// <summary>
                /// Find users in organization Finding users in the specified organization in a paginated manner.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedUserPresentationResponse</returns>
            public async System.Threading.Tasks.Task<PaginatedUserPresentationResponse> GetUsersOfOrganizationAsync (long? organizationId, int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedUserPresentationResponse> localVarResponse = await GetUsersOfOrganizationAsyncWithHttpInfo(organizationId, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Find users in organization Finding users in the specified organization in a paginated manner.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedUserPresentationResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedUserPresentationResponse>> GetUsersOfOrganizationAsyncWithHttpInfo (long? organizationId, int? offset = null, int? limit = null)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->GetUsersOfOrganization");

                var localVarPath = "./api/v1/organizations/{organizationId}/users";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetUsersOfOrganization", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedUserPresentationResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedUserPresentationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedUserPresentationResponse)));
                }

            /// <summary>
            /// Invite Users 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="invitationList">invitationList</param>
        /// <returns></returns>
            public void InviteUsers (long? organizationId, OrganizationUserInvitationListRequest invitationList)
            {
        InviteUsersWithHttpInfo(organizationId, invitationList);
            }

            /// <summary>
            /// Invite Users 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="invitationList">invitationList</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> InviteUsersWithHttpInfo (long? organizationId, OrganizationUserInvitationListRequest invitationList)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->InviteUsers");
                    // verify the required parameter 'invitationList' is set
                    if (invitationList == null)
                    throw new ApiException(400, "Missing required parameter 'invitationList' when calling OrganizationsApi->InviteUsers");

            var localVarPath = "./api/v1/organizations/{organizationId}/users/invite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (invitationList != null && invitationList.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(invitationList); // http body (model) parameter
                }
                else
                {
                localVarPostBody = invitationList; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("InviteUsers", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Invite Users 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="invitationList">invitationList</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task InviteUsersAsync (long? organizationId, OrganizationUserInvitationListRequest invitationList)
                {
            await InviteUsersAsyncWithHttpInfo(organizationId, invitationList);

                }

                /// <summary>
                /// Invite Users 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="invitationList">invitationList</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> InviteUsersAsyncWithHttpInfo (long? organizationId, OrganizationUserInvitationListRequest invitationList)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->InviteUsers");
                        // verify the required parameter 'invitationList' is set
                        if (invitationList == null)
                        throw new ApiException(400, "Missing required parameter 'invitationList' when calling OrganizationsApi->InviteUsers");

                var localVarPath = "./api/v1/organizations/{organizationId}/users/invite";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (invitationList != null && invitationList.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(invitationList); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = invitationList; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("InviteUsers", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// List countries 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedCountryResponse</returns>
            public PaginatedCountryResponse ListCountries (int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedCountryResponse> localVarResponse = ListCountriesWithHttpInfo(offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// List countries 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedCountryResponse</returns>
            public ApiResponse< PaginatedCountryResponse > ListCountriesWithHttpInfo (int? offset = null, int? limit = null)
            {

            var localVarPath = "./api/v1/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("ListCountries", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedCountryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedCountryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedCountryResponse)));
            }

                /// <summary>
                /// List countries 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedCountryResponse</returns>
            public async System.Threading.Tasks.Task<PaginatedCountryResponse> ListCountriesAsync (int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedCountryResponse> localVarResponse = await ListCountriesAsyncWithHttpInfo(offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// List countries 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedCountryResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedCountryResponse>> ListCountriesAsyncWithHttpInfo (int? offset = null, int? limit = null)
                {

                var localVarPath = "./api/v1/countries";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("ListCountries", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedCountryResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedCountryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedCountryResponse)));
                }

            /// <summary>
            /// Remove role(s) from user 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="username">username</param>
        /// <param name="changeRoleRequest">changeRoleRequest</param>
        /// <returns></returns>
            public void RemoveUserRoles (long? organizationId, string username, ChangeRoleRequest changeRoleRequest)
            {
        RemoveUserRolesWithHttpInfo(organizationId, username, changeRoleRequest);
            }

            /// <summary>
            /// Remove role(s) from user 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="username">username</param>
        /// <param name="changeRoleRequest">changeRoleRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> RemoveUserRolesWithHttpInfo (long? organizationId, string username, ChangeRoleRequest changeRoleRequest)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->RemoveUserRoles");
                    // verify the required parameter 'username' is set
                    if (username == null)
                    throw new ApiException(400, "Missing required parameter 'username' when calling OrganizationsApi->RemoveUserRoles");
                    // verify the required parameter 'changeRoleRequest' is set
                    if (changeRoleRequest == null)
                    throw new ApiException(400, "Missing required parameter 'changeRoleRequest' when calling OrganizationsApi->RemoveUserRoles");

            var localVarPath = "./api/v1/organizations/{organizationId}/users/{username}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
                if (changeRoleRequest != null && changeRoleRequest.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(changeRoleRequest); // http body (model) parameter
                }
                else
                {
                localVarPostBody = changeRoleRequest; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("RemoveUserRoles", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Remove role(s) from user 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="username">username</param>
            /// <param name="changeRoleRequest">changeRoleRequest</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task RemoveUserRolesAsync (long? organizationId, string username, ChangeRoleRequest changeRoleRequest)
                {
            await RemoveUserRolesAsyncWithHttpInfo(organizationId, username, changeRoleRequest);

                }

                /// <summary>
                /// Remove role(s) from user 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="username">username</param>
            /// <param name="changeRoleRequest">changeRoleRequest</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserRolesAsyncWithHttpInfo (long? organizationId, string username, ChangeRoleRequest changeRoleRequest)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->RemoveUserRoles");
                        // verify the required parameter 'username' is set
                        if (username == null)
                        throw new ApiException(400, "Missing required parameter 'username' when calling OrganizationsApi->RemoveUserRoles");
                        // verify the required parameter 'changeRoleRequest' is set
                        if (changeRoleRequest == null)
                        throw new ApiException(400, "Missing required parameter 'changeRoleRequest' when calling OrganizationsApi->RemoveUserRoles");

                var localVarPath = "./api/v1/organizations/{organizationId}/users/{username}/roles";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
                    if (changeRoleRequest != null && changeRoleRequest.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(changeRoleRequest); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = changeRoleRequest; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("RemoveUserRoles", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Update organization logo Updating an organization logo using a multipart file upload.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization where the logo should be updated.</param>
        /// <param name="file">An image containing the new logo.</param>
        /// <returns>PublicImagePresentation</returns>
            public PublicImagePresentation SetOrganizationLogo (long? organizationId, System.IO.Stream file)
            {
        ApiResponse<PublicImagePresentation> localVarResponse = SetOrganizationLogoWithHttpInfo(organizationId, file);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Update organization logo Updating an organization logo using a multipart file upload.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization where the logo should be updated.</param>
        /// <param name="file">An image containing the new logo.</param>
        /// <returns>ApiResponse of PublicImagePresentation</returns>
            public ApiResponse< PublicImagePresentation > SetOrganizationLogoWithHttpInfo (long? organizationId, System.IO.Stream file)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->SetOrganizationLogo");
                    // verify the required parameter 'file' is set
                    if (file == null)
                    throw new ApiException(400, "Missing required parameter 'file' when calling OrganizationsApi->SetOrganizationLogo");

            var localVarPath = "./api/v1/organizations/{organizationId}/logo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("SetOrganizationLogo", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PublicImagePresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PublicImagePresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicImagePresentation)));
            }

                /// <summary>
                /// Update organization logo Updating an organization logo using a multipart file upload.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization where the logo should be updated.</param>
            /// <param name="file">An image containing the new logo.</param>
            /// <returns>Task of PublicImagePresentation</returns>
            public async System.Threading.Tasks.Task<PublicImagePresentation> SetOrganizationLogoAsync (long? organizationId, System.IO.Stream file)
                {
            ApiResponse<PublicImagePresentation> localVarResponse = await SetOrganizationLogoAsyncWithHttpInfo(organizationId, file);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Update organization logo Updating an organization logo using a multipart file upload.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization where the logo should be updated.</param>
            /// <param name="file">An image containing the new logo.</param>
            /// <returns>Task of ApiResponse (PublicImagePresentation)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PublicImagePresentation>> SetOrganizationLogoAsyncWithHttpInfo (long? organizationId, System.IO.Stream file)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->SetOrganizationLogo");
                        // verify the required parameter 'file' is set
                        if (file == null)
                        throw new ApiException(400, "Missing required parameter 'file' when calling OrganizationsApi->SetOrganizationLogo");

                var localVarPath = "./api/v1/organizations/{organizationId}/logo";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "multipart/form-data"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("SetOrganizationLogo", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PublicImagePresentation>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PublicImagePresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicImagePresentation)));
                }

            /// <summary>
            /// Update organization 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization to be updated.</param>
        /// <param name="organization">Updated organization object</param>
        /// <returns>Organization</returns>
            public Organization UpdateOrganization (long? organizationId, Organization organization)
            {
        ApiResponse<Organization> localVarResponse = UpdateOrganizationWithHttpInfo(organizationId, organization);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Update organization 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization to be updated.</param>
        /// <param name="organization">Updated organization object</param>
        /// <returns>ApiResponse of Organization</returns>
            public ApiResponse< Organization > UpdateOrganizationWithHttpInfo (long? organizationId, Organization organization)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->UpdateOrganization");
                    // verify the required parameter 'organization' is set
                    if (organization == null)
                    throw new ApiException(400, "Missing required parameter 'organization' when calling OrganizationsApi->UpdateOrganization");

            var localVarPath = "./api/v1/organizations/{organizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (organization != null && organization.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(organization); // http body (model) parameter
                }
                else
                {
                localVarPostBody = organization; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("UpdateOrganization", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Organization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Organization) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
            }

                /// <summary>
                /// Update organization 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization to be updated.</param>
            /// <param name="organization">Updated organization object</param>
            /// <returns>Task of Organization</returns>
            public async System.Threading.Tasks.Task<Organization> UpdateOrganizationAsync (long? organizationId, Organization organization)
                {
            ApiResponse<Organization> localVarResponse = await UpdateOrganizationAsyncWithHttpInfo(organizationId, organization);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Update organization 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The id of the organization to be updated.</param>
            /// <param name="organization">Updated organization object</param>
            /// <returns>Task of ApiResponse (Organization)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Organization>> UpdateOrganizationAsyncWithHttpInfo (long? organizationId, Organization organization)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->UpdateOrganization");
                        // verify the required parameter 'organization' is set
                        if (organization == null)
                        throw new ApiException(400, "Missing required parameter 'organization' when calling OrganizationsApi->UpdateOrganization");

                var localVarPath = "./api/v1/organizations/{organizationId}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (organization != null && organization.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(organization); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = organization; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("UpdateOrganization", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Organization>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (Organization) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
                }

            /// <summary>
            /// Store address 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="addressResource">addressResource</param>
        /// <returns>OrganizationAddress</returns>
            public OrganizationAddress UpdateOrganizationAddress (long? organizationId, OrganizationAddress addressResource)
            {
        ApiResponse<OrganizationAddress> localVarResponse = UpdateOrganizationAddressWithHttpInfo(organizationId, addressResource);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Store address 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="addressResource">addressResource</param>
        /// <returns>ApiResponse of OrganizationAddress</returns>
            public ApiResponse< OrganizationAddress > UpdateOrganizationAddressWithHttpInfo (long? organizationId, OrganizationAddress addressResource)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->UpdateOrganizationAddress");
                    // verify the required parameter 'addressResource' is set
                    if (addressResource == null)
                    throw new ApiException(400, "Missing required parameter 'addressResource' when calling OrganizationsApi->UpdateOrganizationAddress");

            var localVarPath = "./api/v1/organizations/{organizationId}/addresses/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (addressResource != null && addressResource.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(addressResource); // http body (model) parameter
                }
                else
                {
                localVarPostBody = addressResource; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("UpdateOrganizationAddress", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<OrganizationAddress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (OrganizationAddress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationAddress)));
            }

                /// <summary>
                /// Store address 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="addressResource">addressResource</param>
            /// <returns>Task of OrganizationAddress</returns>
            public async System.Threading.Tasks.Task<OrganizationAddress> UpdateOrganizationAddressAsync (long? organizationId, OrganizationAddress addressResource)
                {
            ApiResponse<OrganizationAddress> localVarResponse = await UpdateOrganizationAddressAsyncWithHttpInfo(organizationId, addressResource);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Store address 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="addressResource">addressResource</param>
            /// <returns>Task of ApiResponse (OrganizationAddress)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<OrganizationAddress>> UpdateOrganizationAddressAsyncWithHttpInfo (long? organizationId, OrganizationAddress addressResource)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->UpdateOrganizationAddress");
                        // verify the required parameter 'addressResource' is set
                        if (addressResource == null)
                        throw new ApiException(400, "Missing required parameter 'addressResource' when calling OrganizationsApi->UpdateOrganizationAddress");

                var localVarPath = "./api/v1/organizations/{organizationId}/addresses/default";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (addressResource != null && addressResource.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(addressResource); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = addressResource; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("UpdateOrganizationAddress", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<OrganizationAddress>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (OrganizationAddress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationAddress)));
                }

            /// <summary>
            /// Store billing address 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="addressResource">addressResource</param>
        /// <returns>OrganizationAddress</returns>
            public OrganizationAddress UpdateOrganizationBillingAddress (long? organizationId, OrganizationAddress addressResource)
            {
        ApiResponse<OrganizationAddress> localVarResponse = UpdateOrganizationBillingAddressWithHttpInfo(organizationId, addressResource);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Store billing address 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">organizationId</param>
        /// <param name="addressResource">addressResource</param>
        /// <returns>ApiResponse of OrganizationAddress</returns>
            public ApiResponse< OrganizationAddress > UpdateOrganizationBillingAddressWithHttpInfo (long? organizationId, OrganizationAddress addressResource)
            {
                    // verify the required parameter 'organizationId' is set
                    if (organizationId == null)
                    throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->UpdateOrganizationBillingAddress");
                    // verify the required parameter 'addressResource' is set
                    if (addressResource == null)
                    throw new ApiException(400, "Missing required parameter 'addressResource' when calling OrganizationsApi->UpdateOrganizationBillingAddress");

            var localVarPath = "./api/v1/organizations/{organizationId}/addresses/billing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                if (addressResource != null && addressResource.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(addressResource); // http body (model) parameter
                }
                else
                {
                localVarPostBody = addressResource; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("UpdateOrganizationBillingAddress", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<OrganizationAddress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (OrganizationAddress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationAddress)));
            }

                /// <summary>
                /// Store billing address 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="addressResource">addressResource</param>
            /// <returns>Task of OrganizationAddress</returns>
            public async System.Threading.Tasks.Task<OrganizationAddress> UpdateOrganizationBillingAddressAsync (long? organizationId, OrganizationAddress addressResource)
                {
            ApiResponse<OrganizationAddress> localVarResponse = await UpdateOrganizationBillingAddressAsyncWithHttpInfo(organizationId, addressResource);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Store billing address 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">organizationId</param>
            /// <param name="addressResource">addressResource</param>
            /// <returns>Task of ApiResponse (OrganizationAddress)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<OrganizationAddress>> UpdateOrganizationBillingAddressAsyncWithHttpInfo (long? organizationId, OrganizationAddress addressResource)
                {
                        // verify the required parameter 'organizationId' is set
                        if (organizationId == null)
                        throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationsApi->UpdateOrganizationBillingAddress");
                        // verify the required parameter 'addressResource' is set
                        if (addressResource == null)
                        throw new ApiException(400, "Missing required parameter 'addressResource' when calling OrganizationsApi->UpdateOrganizationBillingAddress");

                var localVarPath = "./api/v1/organizations/{organizationId}/addresses/billing";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarPathParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
                    if (addressResource != null && addressResource.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(addressResource); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = addressResource; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("UpdateOrganizationBillingAddress", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<OrganizationAddress>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (OrganizationAddress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationAddress)));
                }

        }
    }