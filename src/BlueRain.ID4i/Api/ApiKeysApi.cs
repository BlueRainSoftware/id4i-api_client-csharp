/* 
 * ID4i API
 *
 * ID4i HTTP API
 *
 * OpenAPI spec version: 0.8.6-SNAPSHOT
 * Contact: info@bluerain.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
    using RestSharp.Portable;
using BlueRain.ID4i.Client;
using BlueRain.ID4i.Model;
using Guid = BlueRain.ID4i.Model.Guid;

namespace BlueRain.ID4i.Api
{
    /// <summary>
        /// Represents a collection of functions to interact with the API endpoints
        /// </summary>
    public interface IApiKeysApi : IApiAccessor
    {
    #region Synchronous Operations
        /// <summary>
            /// Add privilege
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="addApiKeyPrivilegeRequest">addApiKeyPrivilegeRequest</param>
        /// <returns></returns>
        void AddApiKeyPrivilege (string key, AddApiKeyPrivilegeRequest addApiKeyPrivilegeRequest);

        /// <summary>
            /// Add privilege
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="addApiKeyPrivilegeRequest">addApiKeyPrivilegeRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddApiKeyPrivilegeWithHttpInfo (string key, AddApiKeyPrivilegeRequest addApiKeyPrivilegeRequest);
        /// <summary>
            /// Add ID4ns of a privilege
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="privilege">privilege</param>
        /// <param name="id4ns">id4ns</param>
        /// <returns></returns>
        void AddApiKeyPrivilegeForId4ns (string key, string privilege, ListOfId4ns id4ns);

        /// <summary>
            /// Add ID4ns of a privilege
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="privilege">privilege</param>
        /// <param name="id4ns">id4ns</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddApiKeyPrivilegeForId4nsWithHttpInfo (string key, string privilege, ListOfId4ns id4ns);
        /// <summary>
            /// Create API key
            /// </summary>
        /// <remarks>
            /// Creation of a new API key.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationRequest">API key to be created.</param>
        /// <returns>ApiKeyPresentation</returns>
        ApiKeyPresentation CreateNewApiKey (ApiKeyCreationRequest creationRequest);

        /// <summary>
            /// Create API key
            /// </summary>
        /// <remarks>
            /// Creation of a new API key.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationRequest">API key to be created.</param>
        /// <returns>ApiResponse of ApiKeyPresentation</returns>
        ApiResponse<ApiKeyPresentation> CreateNewApiKeyWithHttpInfo (ApiKeyCreationRequest creationRequest);
        /// <summary>
            /// Delete API key
            /// </summary>
        /// <remarks>
            /// Deletion of an API key.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The API key to delete.</param>
        /// <returns></returns>
        void DeleteApiKey (string key);

        /// <summary>
            /// Delete API key
            /// </summary>
        /// <remarks>
            /// Deletion of an API key.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The API key to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApiKeyWithHttpInfo (string key);
        /// <summary>
            /// Show API key
            /// </summary>
        /// <remarks>
            /// Showing the details of an API key.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The API key to show.</param>
        /// <returns>ApiKeyPresentation</returns>
        ApiKeyPresentation GetApiKey (string key);

        /// <summary>
            /// Show API key
            /// </summary>
        /// <remarks>
            /// Showing the details of an API key.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The API key to show.</param>
        /// <returns>ApiResponse of ApiKeyPresentation</returns>
        ApiResponse<ApiKeyPresentation> GetApiKeyWithHttpInfo (string key);
        /// <summary>
            /// List all privileges
            /// </summary>
        /// <remarks>
            /// Listing all possible API key privileges.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4nConcerning">id4nConcerning (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiKeyPrivilegeInfoResponse</returns>
        ApiKeyPrivilegeInfoResponse ListAllApiKeyPrivileges (bool? id4nConcerning = null, int? offset = null, int? limit = null);

        /// <summary>
            /// List all privileges
            /// </summary>
        /// <remarks>
            /// Listing all possible API key privileges.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4nConcerning">id4nConcerning (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of ApiKeyPrivilegeInfoResponse</returns>
        ApiResponse<ApiKeyPrivilegeInfoResponse> ListAllApiKeyPrivilegesWithHttpInfo (bool? id4nConcerning = null, int? offset = null, int? limit = null);
        /// <summary>
            /// Find API key by organization
            /// </summary>
        /// <remarks>
            /// Finding all API key assigned to the specified organization in a paginated manner.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization to search in. (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedApiKeyResponse</returns>
        PaginatedApiKeyResponse ListAllApiKeysOfOrganization (string organizationId = null, int? offset = null, int? limit = null);

        /// <summary>
            /// Find API key by organization
            /// </summary>
        /// <remarks>
            /// Finding all API key assigned to the specified organization in a paginated manner.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization to search in. (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedApiKeyResponse</returns>
        ApiResponse<PaginatedApiKeyResponse> ListAllApiKeysOfOrganizationWithHttpInfo (string organizationId = null, int? offset = null, int? limit = null);
        /// <summary>
            /// List privileges
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiKeyPrivilegePaginatedResponse</returns>
        ApiKeyPrivilegePaginatedResponse ListApiKeyPrivileges (string key, int? offset = null, int? limit = null);

        /// <summary>
            /// List privileges
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of ApiKeyPrivilegePaginatedResponse</returns>
        ApiResponse<ApiKeyPrivilegePaginatedResponse> ListApiKeyPrivilegesWithHttpInfo (string key, int? offset = null, int? limit = null);
        /// <summary>
            /// ID4ns of a privilege
            /// </summary>
        /// <remarks>
            /// Listing ID4ns of a id4n concerning privilege
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="privilege">privilege</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>Id4nPresentationPaginatedResponse</returns>
        Id4nPresentationPaginatedResponse ListId4ns (string key, string privilege, int? offset = null, int? limit = null);

        /// <summary>
            /// ID4ns of a privilege
            /// </summary>
        /// <remarks>
            /// Listing ID4ns of a id4n concerning privilege
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="privilege">privilege</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of Id4nPresentationPaginatedResponse</returns>
        ApiResponse<Id4nPresentationPaginatedResponse> ListId4nsWithHttpInfo (string key, string privilege, int? offset = null, int? limit = null);
        /// <summary>
            /// Remove privilege
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="removeApiKeyPrivilegeRequest">removeApiKeyPrivilegeRequest</param>
        /// <returns></returns>
        void RemoveApiKeyPrivilege (string key, RemoveApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest);

        /// <summary>
            /// Remove privilege
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="removeApiKeyPrivilegeRequest">removeApiKeyPrivilegeRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveApiKeyPrivilegeWithHttpInfo (string key, RemoveApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest);
        /// <summary>
            /// Remove id4ns of a privilege
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="privilege">privilege</param>
        /// <param name="id4ns">id4ns</param>
        /// <returns></returns>
        void RemoveApiKeyPrivilegeForId4ns (string key, string privilege, ListOfId4ns id4ns);

        /// <summary>
            /// Remove id4ns of a privilege
            /// </summary>
        /// <remarks>
            /// 
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="privilege">privilege</param>
        /// <param name="id4ns">id4ns</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveApiKeyPrivilegeForId4nsWithHttpInfo (string key, string privilege, ListOfId4ns id4ns);
        /// <summary>
            /// Update API keys
            /// </summary>
        /// <remarks>
            /// API keys can be updated with new labels, and be activated and deactivated. The secret or UUID cannot be changed.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The API key to be updated.</param>
        /// <param name="apiKeyChange">The new values to apply.</param>
        /// <returns></returns>
        void UpdateApiKey (string key, ApiKeyChangeRequest apiKeyChange);

        /// <summary>
            /// Update API keys
            /// </summary>
        /// <remarks>
            /// API keys can be updated with new labels, and be activated and deactivated. The secret or UUID cannot be changed.
            /// </remarks>
        /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The API key to be updated.</param>
        /// <param name="apiKeyChange">The new values to apply.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateApiKeyWithHttpInfo (string key, ApiKeyChangeRequest apiKeyChange);
        #endregion Synchronous Operations
            #region Asynchronous Operations
                /// <summary>
                /// Add privilege
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="addApiKeyPrivilegeRequest">addApiKeyPrivilegeRequest</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task AddApiKeyPrivilegeAsync (string key, AddApiKeyPrivilegeRequest addApiKeyPrivilegeRequest);

                /// <summary>
                /// Add privilege
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="addApiKeyPrivilegeRequest">addApiKeyPrivilegeRequest</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> AddApiKeyPrivilegeAsyncWithHttpInfo (string key, AddApiKeyPrivilegeRequest addApiKeyPrivilegeRequest);
                /// <summary>
                /// Add ID4ns of a privilege
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="privilege">privilege</param>
            /// <param name="id4ns">id4ns</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task AddApiKeyPrivilegeForId4nsAsync (string key, string privilege, ListOfId4ns id4ns);

                /// <summary>
                /// Add ID4ns of a privilege
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="privilege">privilege</param>
            /// <param name="id4ns">id4ns</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> AddApiKeyPrivilegeForId4nsAsyncWithHttpInfo (string key, string privilege, ListOfId4ns id4ns);
                /// <summary>
                /// Create API key
                /// </summary>
                /// <remarks>
                /// Creation of a new API key.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="creationRequest">API key to be created.</param>
            /// <returns>Task of ApiKeyPresentation</returns>
            System.Threading.Tasks.Task<ApiKeyPresentation> CreateNewApiKeyAsync (ApiKeyCreationRequest creationRequest);

                /// <summary>
                /// Create API key
                /// </summary>
                /// <remarks>
                /// Creation of a new API key.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="creationRequest">API key to be created.</param>
            /// <returns>Task of ApiResponse (ApiKeyPresentation)</returns>
                System.Threading.Tasks.Task<ApiResponse<ApiKeyPresentation>> CreateNewApiKeyAsyncWithHttpInfo (ApiKeyCreationRequest creationRequest);
                /// <summary>
                /// Delete API key
                /// </summary>
                /// <remarks>
                /// Deletion of an API key.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">The API key to delete.</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task DeleteApiKeyAsync (string key);

                /// <summary>
                /// Delete API key
                /// </summary>
                /// <remarks>
                /// Deletion of an API key.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">The API key to delete.</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApiKeyAsyncWithHttpInfo (string key);
                /// <summary>
                /// Show API key
                /// </summary>
                /// <remarks>
                /// Showing the details of an API key.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">The API key to show.</param>
            /// <returns>Task of ApiKeyPresentation</returns>
            System.Threading.Tasks.Task<ApiKeyPresentation> GetApiKeyAsync (string key);

                /// <summary>
                /// Show API key
                /// </summary>
                /// <remarks>
                /// Showing the details of an API key.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">The API key to show.</param>
            /// <returns>Task of ApiResponse (ApiKeyPresentation)</returns>
                System.Threading.Tasks.Task<ApiResponse<ApiKeyPresentation>> GetApiKeyAsyncWithHttpInfo (string key);
                /// <summary>
                /// List all privileges
                /// </summary>
                /// <remarks>
                /// Listing all possible API key privileges.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4nConcerning">id4nConcerning (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiKeyPrivilegeInfoResponse</returns>
            System.Threading.Tasks.Task<ApiKeyPrivilegeInfoResponse> ListAllApiKeyPrivilegesAsync (bool? id4nConcerning = null, int? offset = null, int? limit = null);

                /// <summary>
                /// List all privileges
                /// </summary>
                /// <remarks>
                /// Listing all possible API key privileges.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4nConcerning">id4nConcerning (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (ApiKeyPrivilegeInfoResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<ApiKeyPrivilegeInfoResponse>> ListAllApiKeyPrivilegesAsyncWithHttpInfo (bool? id4nConcerning = null, int? offset = null, int? limit = null);
                /// <summary>
                /// Find API key by organization
                /// </summary>
                /// <remarks>
                /// Finding all API key assigned to the specified organization in a paginated manner.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization to search in. (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedApiKeyResponse</returns>
            System.Threading.Tasks.Task<PaginatedApiKeyResponse> ListAllApiKeysOfOrganizationAsync (string organizationId = null, int? offset = null, int? limit = null);

                /// <summary>
                /// Find API key by organization
                /// </summary>
                /// <remarks>
                /// Finding all API key assigned to the specified organization in a paginated manner.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization to search in. (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedApiKeyResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<PaginatedApiKeyResponse>> ListAllApiKeysOfOrganizationAsyncWithHttpInfo (string organizationId = null, int? offset = null, int? limit = null);
                /// <summary>
                /// List privileges
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiKeyPrivilegePaginatedResponse</returns>
            System.Threading.Tasks.Task<ApiKeyPrivilegePaginatedResponse> ListApiKeyPrivilegesAsync (string key, int? offset = null, int? limit = null);

                /// <summary>
                /// List privileges
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (ApiKeyPrivilegePaginatedResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<ApiKeyPrivilegePaginatedResponse>> ListApiKeyPrivilegesAsyncWithHttpInfo (string key, int? offset = null, int? limit = null);
                /// <summary>
                /// ID4ns of a privilege
                /// </summary>
                /// <remarks>
                /// Listing ID4ns of a id4n concerning privilege
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="privilege">privilege</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of Id4nPresentationPaginatedResponse</returns>
            System.Threading.Tasks.Task<Id4nPresentationPaginatedResponse> ListId4nsAsync (string key, string privilege, int? offset = null, int? limit = null);

                /// <summary>
                /// ID4ns of a privilege
                /// </summary>
                /// <remarks>
                /// Listing ID4ns of a id4n concerning privilege
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="privilege">privilege</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (Id4nPresentationPaginatedResponse)</returns>
                System.Threading.Tasks.Task<ApiResponse<Id4nPresentationPaginatedResponse>> ListId4nsAsyncWithHttpInfo (string key, string privilege, int? offset = null, int? limit = null);
                /// <summary>
                /// Remove privilege
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="removeApiKeyPrivilegeRequest">removeApiKeyPrivilegeRequest</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task RemoveApiKeyPrivilegeAsync (string key, RemoveApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest);

                /// <summary>
                /// Remove privilege
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="removeApiKeyPrivilegeRequest">removeApiKeyPrivilegeRequest</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> RemoveApiKeyPrivilegeAsyncWithHttpInfo (string key, RemoveApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest);
                /// <summary>
                /// Remove id4ns of a privilege
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="privilege">privilege</param>
            /// <param name="id4ns">id4ns</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task RemoveApiKeyPrivilegeForId4nsAsync (string key, string privilege, ListOfId4ns id4ns);

                /// <summary>
                /// Remove id4ns of a privilege
                /// </summary>
                /// <remarks>
                /// 
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="privilege">privilege</param>
            /// <param name="id4ns">id4ns</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> RemoveApiKeyPrivilegeForId4nsAsyncWithHttpInfo (string key, string privilege, ListOfId4ns id4ns);
                /// <summary>
                /// Update API keys
                /// </summary>
                /// <remarks>
                /// API keys can be updated with new labels, and be activated and deactivated. The secret or UUID cannot be changed.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">The API key to be updated.</param>
            /// <param name="apiKeyChange">The new values to apply.</param>
            /// <returns>Task of void</returns>
            System.Threading.Tasks.Task UpdateApiKeyAsync (string key, ApiKeyChangeRequest apiKeyChange);

                /// <summary>
                /// Update API keys
                /// </summary>
                /// <remarks>
                /// API keys can be updated with new labels, and be activated and deactivated. The secret or UUID cannot be changed.
                /// </remarks>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">The API key to be updated.</param>
            /// <param name="apiKeyChange">The new values to apply.</param>
            /// <returns>Task of ApiResponse</returns>
                System.Threading.Tasks.Task<ApiResponse<Object>> UpdateApiKeyAsyncWithHttpInfo (string key, ApiKeyChangeRequest apiKeyChange);
            #endregion Asynchronous Operations
        }

        /// <summary>
        /// Represents a collection of functions to interact with the API endpoints
        /// </summary>
    public partial class ApiKeysApi : IApiKeysApi
        {
        private BlueRain.ID4i.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiKeysApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApiKeysApi(String basePath)
        {
        this.Configuration = new Configuration { BasePath = basePath };

        ExceptionFactory = BlueRain.ID4i.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiKeysApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApiKeysApi(Configuration configuration = null)
        {
        if (configuration == null) // use the default one in Configuration
        this.Configuration = Configuration.Default;
        else
        this.Configuration = configuration;

        ExceptionFactory = BlueRain.ID4i.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
        return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
        // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlueRain.ID4i.Client.ExceptionFactory ExceptionFactory
        {
        get
        {
        if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
        {
        throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
        }
        return _exceptionFactory;
        }
        set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
        return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
        this.Configuration.AddDefaultHeader(key, value);
        }

            /// <summary>
            /// Add privilege 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="addApiKeyPrivilegeRequest">addApiKeyPrivilegeRequest</param>
        /// <returns></returns>
            public void AddApiKeyPrivilege (string key, AddApiKeyPrivilegeRequest addApiKeyPrivilegeRequest)
            {
        AddApiKeyPrivilegeWithHttpInfo(key, addApiKeyPrivilegeRequest);
            }

            /// <summary>
            /// Add privilege 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="addApiKeyPrivilegeRequest">addApiKeyPrivilegeRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> AddApiKeyPrivilegeWithHttpInfo (string key, AddApiKeyPrivilegeRequest addApiKeyPrivilegeRequest)
            {
                    // verify the required parameter 'key' is set
                    if (key == null)
                    throw new ApiException(400, "Missing required parameter 'key' when calling ApiKeysApi->AddApiKeyPrivilege");
                    // verify the required parameter 'addApiKeyPrivilegeRequest' is set
                    if (addApiKeyPrivilegeRequest == null)
                    throw new ApiException(400, "Missing required parameter 'addApiKeyPrivilegeRequest' when calling ApiKeysApi->AddApiKeyPrivilege");

            var localVarPath = "./api/v1/apikeys/{key}/privileges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
                if (addApiKeyPrivilegeRequest != null && addApiKeyPrivilegeRequest.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(addApiKeyPrivilegeRequest); // http body (model) parameter
                }
                else
                {
                localVarPostBody = addApiKeyPrivilegeRequest; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("AddApiKeyPrivilege", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Add privilege 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="addApiKeyPrivilegeRequest">addApiKeyPrivilegeRequest</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task AddApiKeyPrivilegeAsync (string key, AddApiKeyPrivilegeRequest addApiKeyPrivilegeRequest)
                {
            await AddApiKeyPrivilegeAsyncWithHttpInfo(key, addApiKeyPrivilegeRequest);

                }

                /// <summary>
                /// Add privilege 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="addApiKeyPrivilegeRequest">addApiKeyPrivilegeRequest</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> AddApiKeyPrivilegeAsyncWithHttpInfo (string key, AddApiKeyPrivilegeRequest addApiKeyPrivilegeRequest)
                {
                        // verify the required parameter 'key' is set
                        if (key == null)
                        throw new ApiException(400, "Missing required parameter 'key' when calling ApiKeysApi->AddApiKeyPrivilege");
                        // verify the required parameter 'addApiKeyPrivilegeRequest' is set
                        if (addApiKeyPrivilegeRequest == null)
                        throw new ApiException(400, "Missing required parameter 'addApiKeyPrivilegeRequest' when calling ApiKeysApi->AddApiKeyPrivilege");

                var localVarPath = "./api/v1/apikeys/{key}/privileges";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
                    if (addApiKeyPrivilegeRequest != null && addApiKeyPrivilegeRequest.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(addApiKeyPrivilegeRequest); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = addApiKeyPrivilegeRequest; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("AddApiKeyPrivilege", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Add ID4ns of a privilege 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="privilege">privilege</param>
        /// <param name="id4ns">id4ns</param>
        /// <returns></returns>
            public void AddApiKeyPrivilegeForId4ns (string key, string privilege, ListOfId4ns id4ns)
            {
        AddApiKeyPrivilegeForId4nsWithHttpInfo(key, privilege, id4ns);
            }

            /// <summary>
            /// Add ID4ns of a privilege 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="privilege">privilege</param>
        /// <param name="id4ns">id4ns</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> AddApiKeyPrivilegeForId4nsWithHttpInfo (string key, string privilege, ListOfId4ns id4ns)
            {
                    // verify the required parameter 'key' is set
                    if (key == null)
                    throw new ApiException(400, "Missing required parameter 'key' when calling ApiKeysApi->AddApiKeyPrivilegeForId4ns");
                    // verify the required parameter 'privilege' is set
                    if (privilege == null)
                    throw new ApiException(400, "Missing required parameter 'privilege' when calling ApiKeysApi->AddApiKeyPrivilegeForId4ns");
                    // verify the required parameter 'id4ns' is set
                    if (id4ns == null)
                    throw new ApiException(400, "Missing required parameter 'id4ns' when calling ApiKeysApi->AddApiKeyPrivilegeForId4ns");

            var localVarPath = "./api/v1/apikeys/{key}/privileges/{privilege}/id4ns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
                if (privilege != null) localVarPathParams.Add("privilege", Configuration.ApiClient.ParameterToString(privilege)); // path parameter
                if (id4ns != null && id4ns.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(id4ns); // http body (model) parameter
                }
                else
                {
                localVarPostBody = id4ns; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("AddApiKeyPrivilegeForId4ns", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Add ID4ns of a privilege 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="privilege">privilege</param>
            /// <param name="id4ns">id4ns</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task AddApiKeyPrivilegeForId4nsAsync (string key, string privilege, ListOfId4ns id4ns)
                {
            await AddApiKeyPrivilegeForId4nsAsyncWithHttpInfo(key, privilege, id4ns);

                }

                /// <summary>
                /// Add ID4ns of a privilege 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="privilege">privilege</param>
            /// <param name="id4ns">id4ns</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> AddApiKeyPrivilegeForId4nsAsyncWithHttpInfo (string key, string privilege, ListOfId4ns id4ns)
                {
                        // verify the required parameter 'key' is set
                        if (key == null)
                        throw new ApiException(400, "Missing required parameter 'key' when calling ApiKeysApi->AddApiKeyPrivilegeForId4ns");
                        // verify the required parameter 'privilege' is set
                        if (privilege == null)
                        throw new ApiException(400, "Missing required parameter 'privilege' when calling ApiKeysApi->AddApiKeyPrivilegeForId4ns");
                        // verify the required parameter 'id4ns' is set
                        if (id4ns == null)
                        throw new ApiException(400, "Missing required parameter 'id4ns' when calling ApiKeysApi->AddApiKeyPrivilegeForId4ns");

                var localVarPath = "./api/v1/apikeys/{key}/privileges/{privilege}/id4ns";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
                    if (privilege != null) localVarPathParams.Add("privilege", Configuration.ApiClient.ParameterToString(privilege)); // path parameter
                    if (id4ns != null && id4ns.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(id4ns); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = id4ns; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("AddApiKeyPrivilegeForId4ns", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Create API key Creation of a new API key.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationRequest">API key to be created.</param>
        /// <returns>ApiKeyPresentation</returns>
            public ApiKeyPresentation CreateNewApiKey (ApiKeyCreationRequest creationRequest)
            {
        ApiResponse<ApiKeyPresentation> localVarResponse = CreateNewApiKeyWithHttpInfo(creationRequest);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Create API key Creation of a new API key.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationRequest">API key to be created.</param>
        /// <returns>ApiResponse of ApiKeyPresentation</returns>
            public ApiResponse< ApiKeyPresentation > CreateNewApiKeyWithHttpInfo (ApiKeyCreationRequest creationRequest)
            {
                    // verify the required parameter 'creationRequest' is set
                    if (creationRequest == null)
                    throw new ApiException(400, "Missing required parameter 'creationRequest' when calling ApiKeysApi->CreateNewApiKey");

            var localVarPath = "./api/v1/apikeys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (creationRequest != null && creationRequest.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(creationRequest); // http body (model) parameter
                }
                else
                {
                localVarPostBody = creationRequest; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("CreateNewApiKey", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<ApiKeyPresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiKeyPresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyPresentation)));
            }

                /// <summary>
                /// Create API key Creation of a new API key.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="creationRequest">API key to be created.</param>
            /// <returns>Task of ApiKeyPresentation</returns>
            public async System.Threading.Tasks.Task<ApiKeyPresentation> CreateNewApiKeyAsync (ApiKeyCreationRequest creationRequest)
                {
            ApiResponse<ApiKeyPresentation> localVarResponse = await CreateNewApiKeyAsyncWithHttpInfo(creationRequest);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Create API key Creation of a new API key.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="creationRequest">API key to be created.</param>
            /// <returns>Task of ApiResponse (ApiKeyPresentation)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<ApiKeyPresentation>> CreateNewApiKeyAsyncWithHttpInfo (ApiKeyCreationRequest creationRequest)
                {
                        // verify the required parameter 'creationRequest' is set
                        if (creationRequest == null)
                        throw new ApiException(400, "Missing required parameter 'creationRequest' when calling ApiKeysApi->CreateNewApiKey");

                var localVarPath = "./api/v1/apikeys";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (creationRequest != null && creationRequest.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(creationRequest); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = creationRequest; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("CreateNewApiKey", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<ApiKeyPresentation>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (ApiKeyPresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyPresentation)));
                }

            /// <summary>
            /// Delete API key Deletion of an API key.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The API key to delete.</param>
        /// <returns></returns>
            public void DeleteApiKey (string key)
            {
        DeleteApiKeyWithHttpInfo(key);
            }

            /// <summary>
            /// Delete API key Deletion of an API key.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The API key to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> DeleteApiKeyWithHttpInfo (string key)
            {
                    // verify the required parameter 'key' is set
                    if (key == null)
                    throw new ApiException(400, "Missing required parameter 'key' when calling ApiKeysApi->DeleteApiKey");

            var localVarPath = "./api/v1/apikeys/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("DeleteApiKey", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Delete API key Deletion of an API key.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">The API key to delete.</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task DeleteApiKeyAsync (string key)
                {
            await DeleteApiKeyAsyncWithHttpInfo(key);

                }

                /// <summary>
                /// Delete API key Deletion of an API key.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">The API key to delete.</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApiKeyAsyncWithHttpInfo (string key)
                {
                        // verify the required parameter 'key' is set
                        if (key == null)
                        throw new ApiException(400, "Missing required parameter 'key' when calling ApiKeysApi->DeleteApiKey");

                var localVarPath = "./api/v1/apikeys/{key}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("DeleteApiKey", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Show API key Showing the details of an API key.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The API key to show.</param>
        /// <returns>ApiKeyPresentation</returns>
            public ApiKeyPresentation GetApiKey (string key)
            {
        ApiResponse<ApiKeyPresentation> localVarResponse = GetApiKeyWithHttpInfo(key);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Show API key Showing the details of an API key.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The API key to show.</param>
        /// <returns>ApiResponse of ApiKeyPresentation</returns>
            public ApiResponse< ApiKeyPresentation > GetApiKeyWithHttpInfo (string key)
            {
                    // verify the required parameter 'key' is set
                    if (key == null)
                    throw new ApiException(400, "Missing required parameter 'key' when calling ApiKeysApi->GetApiKey");

            var localVarPath = "./api/v1/apikeys/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("GetApiKey", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<ApiKeyPresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiKeyPresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyPresentation)));
            }

                /// <summary>
                /// Show API key Showing the details of an API key.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">The API key to show.</param>
            /// <returns>Task of ApiKeyPresentation</returns>
            public async System.Threading.Tasks.Task<ApiKeyPresentation> GetApiKeyAsync (string key)
                {
            ApiResponse<ApiKeyPresentation> localVarResponse = await GetApiKeyAsyncWithHttpInfo(key);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Show API key Showing the details of an API key.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">The API key to show.</param>
            /// <returns>Task of ApiResponse (ApiKeyPresentation)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<ApiKeyPresentation>> GetApiKeyAsyncWithHttpInfo (string key)
                {
                        // verify the required parameter 'key' is set
                        if (key == null)
                        throw new ApiException(400, "Missing required parameter 'key' when calling ApiKeysApi->GetApiKey");

                var localVarPath = "./api/v1/apikeys/{key}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("GetApiKey", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<ApiKeyPresentation>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (ApiKeyPresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyPresentation)));
                }

            /// <summary>
            /// List all privileges Listing all possible API key privileges.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4nConcerning">id4nConcerning (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiKeyPrivilegeInfoResponse</returns>
            public ApiKeyPrivilegeInfoResponse ListAllApiKeyPrivileges (bool? id4nConcerning = null, int? offset = null, int? limit = null)
            {
        ApiResponse<ApiKeyPrivilegeInfoResponse> localVarResponse = ListAllApiKeyPrivilegesWithHttpInfo(id4nConcerning, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// List all privileges Listing all possible API key privileges.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id4nConcerning">id4nConcerning (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of ApiKeyPrivilegeInfoResponse</returns>
            public ApiResponse< ApiKeyPrivilegeInfoResponse > ListAllApiKeyPrivilegesWithHttpInfo (bool? id4nConcerning = null, int? offset = null, int? limit = null)
            {

            var localVarPath = "./api/v1/apikeys/privileges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (id4nConcerning != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id4nConcerning", id4nConcerning)); // query parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("ListAllApiKeyPrivileges", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<ApiKeyPrivilegeInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiKeyPrivilegeInfoResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyPrivilegeInfoResponse)));
            }

                /// <summary>
                /// List all privileges Listing all possible API key privileges.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4nConcerning">id4nConcerning (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiKeyPrivilegeInfoResponse</returns>
            public async System.Threading.Tasks.Task<ApiKeyPrivilegeInfoResponse> ListAllApiKeyPrivilegesAsync (bool? id4nConcerning = null, int? offset = null, int? limit = null)
                {
            ApiResponse<ApiKeyPrivilegeInfoResponse> localVarResponse = await ListAllApiKeyPrivilegesAsyncWithHttpInfo(id4nConcerning, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// List all privileges Listing all possible API key privileges.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="id4nConcerning">id4nConcerning (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (ApiKeyPrivilegeInfoResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<ApiKeyPrivilegeInfoResponse>> ListAllApiKeyPrivilegesAsyncWithHttpInfo (bool? id4nConcerning = null, int? offset = null, int? limit = null)
                {

                var localVarPath = "./api/v1/apikeys/privileges";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (id4nConcerning != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id4nConcerning", id4nConcerning)); // query parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("ListAllApiKeyPrivileges", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<ApiKeyPrivilegeInfoResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (ApiKeyPrivilegeInfoResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyPrivilegeInfoResponse)));
                }

            /// <summary>
            /// Find API key by organization Finding all API key assigned to the specified organization in a paginated manner.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization to search in. (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>PaginatedApiKeyResponse</returns>
            public PaginatedApiKeyResponse ListAllApiKeysOfOrganization (string organizationId = null, int? offset = null, int? limit = null)
            {
        ApiResponse<PaginatedApiKeyResponse> localVarResponse = ListAllApiKeysOfOrganizationWithHttpInfo(organizationId, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// Find API key by organization Finding all API key assigned to the specified organization in a paginated manner.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The namespace of the organization to search in. (optional)</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of PaginatedApiKeyResponse</returns>
            public ApiResponse< PaginatedApiKeyResponse > ListAllApiKeysOfOrganizationWithHttpInfo (string organizationId = null, int? offset = null, int? limit = null)
            {

            var localVarPath = "./api/v1/apikeys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (organizationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("ListAllApiKeysOfOrganization", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<PaginatedApiKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PaginatedApiKeyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedApiKeyResponse)));
            }

                /// <summary>
                /// Find API key by organization Finding all API key assigned to the specified organization in a paginated manner.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization to search in. (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of PaginatedApiKeyResponse</returns>
            public async System.Threading.Tasks.Task<PaginatedApiKeyResponse> ListAllApiKeysOfOrganizationAsync (string organizationId = null, int? offset = null, int? limit = null)
                {
            ApiResponse<PaginatedApiKeyResponse> localVarResponse = await ListAllApiKeysOfOrganizationAsyncWithHttpInfo(organizationId, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// Find API key by organization Finding all API key assigned to the specified organization in a paginated manner.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="organizationId">The namespace of the organization to search in. (optional)</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (PaginatedApiKeyResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<PaginatedApiKeyResponse>> ListAllApiKeysOfOrganizationAsyncWithHttpInfo (string organizationId = null, int? offset = null, int? limit = null)
                {

                var localVarPath = "./api/v1/apikeys";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (organizationId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("ListAllApiKeysOfOrganization", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<PaginatedApiKeyResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (PaginatedApiKeyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedApiKeyResponse)));
                }

            /// <summary>
            /// List privileges 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiKeyPrivilegePaginatedResponse</returns>
            public ApiKeyPrivilegePaginatedResponse ListApiKeyPrivileges (string key, int? offset = null, int? limit = null)
            {
        ApiResponse<ApiKeyPrivilegePaginatedResponse> localVarResponse = ListApiKeyPrivilegesWithHttpInfo(key, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// List privileges 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of ApiKeyPrivilegePaginatedResponse</returns>
            public ApiResponse< ApiKeyPrivilegePaginatedResponse > ListApiKeyPrivilegesWithHttpInfo (string key, int? offset = null, int? limit = null)
            {
                    // verify the required parameter 'key' is set
                    if (key == null)
                    throw new ApiException(400, "Missing required parameter 'key' when calling ApiKeysApi->ListApiKeyPrivileges");

            var localVarPath = "./api/v1/apikeys/{key}/privileges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("ListApiKeyPrivileges", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<ApiKeyPrivilegePaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiKeyPrivilegePaginatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyPrivilegePaginatedResponse)));
            }

                /// <summary>
                /// List privileges 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiKeyPrivilegePaginatedResponse</returns>
            public async System.Threading.Tasks.Task<ApiKeyPrivilegePaginatedResponse> ListApiKeyPrivilegesAsync (string key, int? offset = null, int? limit = null)
                {
            ApiResponse<ApiKeyPrivilegePaginatedResponse> localVarResponse = await ListApiKeyPrivilegesAsyncWithHttpInfo(key, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// List privileges 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (ApiKeyPrivilegePaginatedResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<ApiKeyPrivilegePaginatedResponse>> ListApiKeyPrivilegesAsyncWithHttpInfo (string key, int? offset = null, int? limit = null)
                {
                        // verify the required parameter 'key' is set
                        if (key == null)
                        throw new ApiException(400, "Missing required parameter 'key' when calling ApiKeysApi->ListApiKeyPrivileges");

                var localVarPath = "./api/v1/apikeys/{key}/privileges";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("ListApiKeyPrivileges", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<ApiKeyPrivilegePaginatedResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (ApiKeyPrivilegePaginatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyPrivilegePaginatedResponse)));
                }

            /// <summary>
            /// ID4ns of a privilege Listing ID4ns of a id4n concerning privilege
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="privilege">privilege</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>Id4nPresentationPaginatedResponse</returns>
            public Id4nPresentationPaginatedResponse ListId4ns (string key, string privilege, int? offset = null, int? limit = null)
            {
        ApiResponse<Id4nPresentationPaginatedResponse> localVarResponse = ListId4nsWithHttpInfo(key, privilege, offset, limit);
            return localVarResponse.Data;
            }

            /// <summary>
            /// ID4ns of a privilege Listing ID4ns of a id4n concerning privilege
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="privilege">privilege</param>
        /// <param name="offset">Start with the n-th element (optional)</param>
        /// <param name="limit">The maximum count of returned elements (optional)</param>
        /// <returns>ApiResponse of Id4nPresentationPaginatedResponse</returns>
            public ApiResponse< Id4nPresentationPaginatedResponse > ListId4nsWithHttpInfo (string key, string privilege, int? offset = null, int? limit = null)
            {
                    // verify the required parameter 'key' is set
                    if (key == null)
                    throw new ApiException(400, "Missing required parameter 'key' when calling ApiKeysApi->ListId4ns");
                    // verify the required parameter 'privilege' is set
                    if (privilege == null)
                    throw new ApiException(400, "Missing required parameter 'privilege' when calling ApiKeysApi->ListId4ns");

            var localVarPath = "./api/v1/apikeys/{key}/privileges/{privilege}/id4ns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
                if (privilege != null) localVarPathParams.Add("privilege", Configuration.ApiClient.ParameterToString(privilege)); // path parameter
                if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("ListId4ns", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Id4nPresentationPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Id4nPresentationPaginatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Id4nPresentationPaginatedResponse)));
            }

                /// <summary>
                /// ID4ns of a privilege Listing ID4ns of a id4n concerning privilege
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="privilege">privilege</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of Id4nPresentationPaginatedResponse</returns>
            public async System.Threading.Tasks.Task<Id4nPresentationPaginatedResponse> ListId4nsAsync (string key, string privilege, int? offset = null, int? limit = null)
                {
            ApiResponse<Id4nPresentationPaginatedResponse> localVarResponse = await ListId4nsAsyncWithHttpInfo(key, privilege, offset, limit);
                return localVarResponse.Data;

                }

                /// <summary>
                /// ID4ns of a privilege Listing ID4ns of a id4n concerning privilege
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="privilege">privilege</param>
            /// <param name="offset">Start with the n-th element (optional)</param>
            /// <param name="limit">The maximum count of returned elements (optional)</param>
            /// <returns>Task of ApiResponse (Id4nPresentationPaginatedResponse)</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Id4nPresentationPaginatedResponse>> ListId4nsAsyncWithHttpInfo (string key, string privilege, int? offset = null, int? limit = null)
                {
                        // verify the required parameter 'key' is set
                        if (key == null)
                        throw new ApiException(400, "Missing required parameter 'key' when calling ApiKeysApi->ListId4ns");
                        // verify the required parameter 'privilege' is set
                        if (privilege == null)
                        throw new ApiException(400, "Missing required parameter 'privilege' when calling ApiKeysApi->ListId4ns");

                var localVarPath = "./api/v1/apikeys/{key}/privileges/{privilege}/id4ns";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
                    if (privilege != null) localVarPathParams.Add("privilege", Configuration.ApiClient.ParameterToString(privilege)); // path parameter
                    if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
                    if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("ListId4ns", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Id4nPresentationPaginatedResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    (Id4nPresentationPaginatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Id4nPresentationPaginatedResponse)));
                }

            /// <summary>
            /// Remove privilege 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="removeApiKeyPrivilegeRequest">removeApiKeyPrivilegeRequest</param>
        /// <returns></returns>
            public void RemoveApiKeyPrivilege (string key, RemoveApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest)
            {
        RemoveApiKeyPrivilegeWithHttpInfo(key, removeApiKeyPrivilegeRequest);
            }

            /// <summary>
            /// Remove privilege 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="removeApiKeyPrivilegeRequest">removeApiKeyPrivilegeRequest</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> RemoveApiKeyPrivilegeWithHttpInfo (string key, RemoveApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest)
            {
                    // verify the required parameter 'key' is set
                    if (key == null)
                    throw new ApiException(400, "Missing required parameter 'key' when calling ApiKeysApi->RemoveApiKeyPrivilege");
                    // verify the required parameter 'removeApiKeyPrivilegeRequest' is set
                    if (removeApiKeyPrivilegeRequest == null)
                    throw new ApiException(400, "Missing required parameter 'removeApiKeyPrivilegeRequest' when calling ApiKeysApi->RemoveApiKeyPrivilege");

            var localVarPath = "./api/v1/apikeys/{key}/privileges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
                if (removeApiKeyPrivilegeRequest != null && removeApiKeyPrivilegeRequest.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(removeApiKeyPrivilegeRequest); // http body (model) parameter
                }
                else
                {
                localVarPostBody = removeApiKeyPrivilegeRequest; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("RemoveApiKeyPrivilege", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Remove privilege 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="removeApiKeyPrivilegeRequest">removeApiKeyPrivilegeRequest</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task RemoveApiKeyPrivilegeAsync (string key, RemoveApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest)
                {
            await RemoveApiKeyPrivilegeAsyncWithHttpInfo(key, removeApiKeyPrivilegeRequest);

                }

                /// <summary>
                /// Remove privilege 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="removeApiKeyPrivilegeRequest">removeApiKeyPrivilegeRequest</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveApiKeyPrivilegeAsyncWithHttpInfo (string key, RemoveApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest)
                {
                        // verify the required parameter 'key' is set
                        if (key == null)
                        throw new ApiException(400, "Missing required parameter 'key' when calling ApiKeysApi->RemoveApiKeyPrivilege");
                        // verify the required parameter 'removeApiKeyPrivilegeRequest' is set
                        if (removeApiKeyPrivilegeRequest == null)
                        throw new ApiException(400, "Missing required parameter 'removeApiKeyPrivilegeRequest' when calling ApiKeysApi->RemoveApiKeyPrivilege");

                var localVarPath = "./api/v1/apikeys/{key}/privileges";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
                    if (removeApiKeyPrivilegeRequest != null && removeApiKeyPrivilegeRequest.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(removeApiKeyPrivilegeRequest); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = removeApiKeyPrivilegeRequest; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("RemoveApiKeyPrivilege", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Remove id4ns of a privilege 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="privilege">privilege</param>
        /// <param name="id4ns">id4ns</param>
        /// <returns></returns>
            public void RemoveApiKeyPrivilegeForId4ns (string key, string privilege, ListOfId4ns id4ns)
            {
        RemoveApiKeyPrivilegeForId4nsWithHttpInfo(key, privilege, id4ns);
            }

            /// <summary>
            /// Remove id4ns of a privilege 
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="privilege">privilege</param>
        /// <param name="id4ns">id4ns</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> RemoveApiKeyPrivilegeForId4nsWithHttpInfo (string key, string privilege, ListOfId4ns id4ns)
            {
                    // verify the required parameter 'key' is set
                    if (key == null)
                    throw new ApiException(400, "Missing required parameter 'key' when calling ApiKeysApi->RemoveApiKeyPrivilegeForId4ns");
                    // verify the required parameter 'privilege' is set
                    if (privilege == null)
                    throw new ApiException(400, "Missing required parameter 'privilege' when calling ApiKeysApi->RemoveApiKeyPrivilegeForId4ns");
                    // verify the required parameter 'id4ns' is set
                    if (id4ns == null)
                    throw new ApiException(400, "Missing required parameter 'id4ns' when calling ApiKeysApi->RemoveApiKeyPrivilegeForId4ns");

            var localVarPath = "./api/v1/apikeys/{key}/privileges/{privilege}/id4ns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
                if (privilege != null) localVarPathParams.Add("privilege", Configuration.ApiClient.ParameterToString(privilege)); // path parameter
                if (id4ns != null && id4ns.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(id4ns); // http body (model) parameter
                }
                else
                {
                localVarPostBody = id4ns; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("RemoveApiKeyPrivilegeForId4ns", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Remove id4ns of a privilege 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="privilege">privilege</param>
            /// <param name="id4ns">id4ns</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task RemoveApiKeyPrivilegeForId4nsAsync (string key, string privilege, ListOfId4ns id4ns)
                {
            await RemoveApiKeyPrivilegeForId4nsAsyncWithHttpInfo(key, privilege, id4ns);

                }

                /// <summary>
                /// Remove id4ns of a privilege 
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">key</param>
            /// <param name="privilege">privilege</param>
            /// <param name="id4ns">id4ns</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveApiKeyPrivilegeForId4nsAsyncWithHttpInfo (string key, string privilege, ListOfId4ns id4ns)
                {
                        // verify the required parameter 'key' is set
                        if (key == null)
                        throw new ApiException(400, "Missing required parameter 'key' when calling ApiKeysApi->RemoveApiKeyPrivilegeForId4ns");
                        // verify the required parameter 'privilege' is set
                        if (privilege == null)
                        throw new ApiException(400, "Missing required parameter 'privilege' when calling ApiKeysApi->RemoveApiKeyPrivilegeForId4ns");
                        // verify the required parameter 'id4ns' is set
                        if (id4ns == null)
                        throw new ApiException(400, "Missing required parameter 'id4ns' when calling ApiKeysApi->RemoveApiKeyPrivilegeForId4ns");

                var localVarPath = "./api/v1/apikeys/{key}/privileges/{privilege}/id4ns";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
                    if (privilege != null) localVarPathParams.Add("privilege", Configuration.ApiClient.ParameterToString(privilege)); // path parameter
                    if (id4ns != null && id4ns.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(id4ns); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = id4ns; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("RemoveApiKeyPrivilegeForId4ns", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

            /// <summary>
            /// Update API keys API keys can be updated with new labels, and be activated and deactivated. The secret or UUID cannot be changed.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The API key to be updated.</param>
        /// <param name="apiKeyChange">The new values to apply.</param>
        /// <returns></returns>
            public void UpdateApiKey (string key, ApiKeyChangeRequest apiKeyChange)
            {
        UpdateApiKeyWithHttpInfo(key, apiKeyChange);
            }

            /// <summary>
            /// Update API keys API keys can be updated with new labels, and be activated and deactivated. The secret or UUID cannot be changed.
            /// </summary>
            /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The API key to be updated.</param>
        /// <param name="apiKeyChange">The new values to apply.</param>
        /// <returns>ApiResponse of Object(void)</returns>
            public ApiResponse<Object> UpdateApiKeyWithHttpInfo (string key, ApiKeyChangeRequest apiKeyChange)
            {
                    // verify the required parameter 'key' is set
                    if (key == null)
                    throw new ApiException(400, "Missing required parameter 'key' when calling ApiKeysApi->UpdateApiKey");
                    // verify the required parameter 'apiKeyChange' is set
                    if (apiKeyChange == null)
                    throw new ApiException(400, "Missing required parameter 'apiKeyChange' when calling ApiKeysApi->UpdateApiKey");

            var localVarPath = "./api/v1/apikeys/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
                if (apiKeyChange != null && apiKeyChange.GetType() != typeof(byte[]))
                {
                localVarPostBody = Configuration.ApiClient.Serialize(apiKeyChange); // http body (model) parameter
                }
                else
                {
                localVarPostBody = apiKeyChange; // byte array
                }

                // authentication (Authorization) required
                        if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                        {
                        localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                        }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
            Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
            Exception exception = ExceptionFactory("UpdateApiKey", localVarResponse);
            if (exception != null) throw exception;
            }

                return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
            }

                /// <summary>
                /// Update API keys API keys can be updated with new labels, and be activated and deactivated. The secret or UUID cannot be changed.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">The API key to be updated.</param>
            /// <param name="apiKeyChange">The new values to apply.</param>
            /// <returns>Task of void</returns>
            public async System.Threading.Tasks.Task UpdateApiKeyAsync (string key, ApiKeyChangeRequest apiKeyChange)
                {
            await UpdateApiKeyAsyncWithHttpInfo(key, apiKeyChange);

                }

                /// <summary>
                /// Update API keys API keys can be updated with new labels, and be activated and deactivated. The secret or UUID cannot be changed.
                /// </summary>
                /// <exception cref="BlueRain.ID4i.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="key">The API key to be updated.</param>
            /// <param name="apiKeyChange">The new values to apply.</param>
            /// <returns>Task of ApiResponse</returns>
                public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateApiKeyAsyncWithHttpInfo (string key, ApiKeyChangeRequest apiKeyChange)
                {
                        // verify the required parameter 'key' is set
                        if (key == null)
                        throw new ApiException(400, "Missing required parameter 'key' when calling ApiKeysApi->UpdateApiKey");
                        // verify the required parameter 'apiKeyChange' is set
                        if (apiKeyChange == null)
                        throw new ApiException(400, "Missing required parameter 'apiKeyChange' when calling ApiKeysApi->UpdateApiKey");

                var localVarPath = "./api/v1/apikeys/{key}";
                var localVarPathParams = new Dictionary<String, String>();
                var localVarQueryParams = new List<KeyValuePair<String, String>>();
                var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
                var localVarFormParams = new Dictionary<String, String>();
                var localVarFileParams = new Dictionary<String, FileParameter>();
                Object localVarPostBody = null;

                // to determine the Content-Type header
                String[] localVarHttpContentTypes = new String[] {
                    "application/xml", 
                    "application/json"
                };
                String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                // to determine the Accept header
                String[] localVarHttpHeaderAccepts = new String[] {
                    "application/xml",
                    "application/json"
                };
                String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

                    if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
                    if (apiKeyChange != null && apiKeyChange.GetType() != typeof(byte[]))
                    {
                    localVarPostBody = Configuration.ApiClient.Serialize(apiKeyChange); // http body (model) parameter
                    }
                    else
                    {
                    localVarPostBody = apiKeyChange; // byte array
                    }

                    // authentication (Authorization) required
                            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
                            {
                            localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
                            }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int) localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                Exception exception = ExceptionFactory("UpdateApiKey", localVarResponse);
                if (exception != null) throw exception;
                }

                    return new ApiResponse<Object>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                    null);
                }

        }
    }