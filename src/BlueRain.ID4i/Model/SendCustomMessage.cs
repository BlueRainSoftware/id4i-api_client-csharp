/* 
 * ID4i API
 *
 * ID4i HTTP API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@bluerain.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = BlueRain.ID4i.Client.SwaggerDateConverter;

namespace BlueRain.ID4i.Model
{
    /// <summary>
    /// SendCustomMessage
    /// </summary>
    [DataContract]
    public partial class SendCustomMessage :  IEquatable<SendCustomMessage>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendCustomMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SendCustomMessage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendCustomMessage" /> class.
        /// </summary>
        /// <param name="Data">Custom data in a map. You may use JSON content (required).</param>
        /// <param name="Name">The name of the message (organisation specific) (required).</param>
        public SendCustomMessage(Dictionary<string, string> Data = default(Dictionary<string, string>), string Name = default(string))
        {
            // to ensure "Data" is required (not null)
            if (Data == null)
            {
                throw new InvalidDataException("Data is a required property for SendCustomMessage and cannot be null");
            }
            else
            {
                this.Data = Data;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for SendCustomMessage and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
        }
        
        /// <summary>
        /// Custom data in a map. You may use JSON content
        /// </summary>
        /// <value>Custom data in a map. You may use JSON content</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public Dictionary<string, string> Data { get; set; }

        /// <summary>
        /// The name of the message (organisation specific)
        /// </summary>
        /// <value>The name of the message (organisation specific)</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendCustomMessage {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendCustomMessage);
        }

        /// <summary>
        /// Returns true if SendCustomMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of SendCustomMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendCustomMessage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }
    }

}
