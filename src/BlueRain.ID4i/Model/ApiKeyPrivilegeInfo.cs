/* 
 * ID4i API
 *
 * ID4i HTTP API
 *
 * OpenAPI spec version: 0.7.4-SNAPSHOT
 * Contact: info@bluerain.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = BlueRain.ID4i.Client.SwaggerDateConverter;

namespace BlueRain.ID4i.Model
{
    /// <summary>
    /// ApiKeyPrivilegeInfo
    /// </summary>
    [DataContract]
    public partial class ApiKeyPrivilegeInfo :  IEquatable<ApiKeyPrivilegeInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiKeyPrivilegeInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApiKeyPrivilegeInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiKeyPrivilegeInfo" /> class.
        /// </summary>
        /// <param name="AllowsBillableOperations">AllowsBillableOperations.</param>
        /// <param name="HelpText">HelpText.</param>
        /// <param name="Id4nAssociated">Id4nAssociated (required).</param>
        /// <param name="Name">Name (required).</param>
        public ApiKeyPrivilegeInfo(bool? AllowsBillableOperations = default(bool?), string HelpText = default(string), bool? Id4nAssociated = default(bool?), string Name = default(string))
        {
            // to ensure "Id4nAssociated" is required (not null)
            if (Id4nAssociated == null)
            {
                throw new InvalidDataException("Id4nAssociated is a required property for ApiKeyPrivilegeInfo and cannot be null");
            }
            else
            {
                this.Id4nAssociated = Id4nAssociated;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for ApiKeyPrivilegeInfo and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.AllowsBillableOperations = AllowsBillableOperations;
            this.HelpText = HelpText;
        }
        
        /// <summary>
        /// Gets or Sets AllowsBillableOperations
        /// </summary>
        [DataMember(Name="allowsBillableOperations", EmitDefaultValue=false)]
        public bool? AllowsBillableOperations { get; set; }

        /// <summary>
        /// Gets or Sets HelpText
        /// </summary>
        [DataMember(Name="helpText", EmitDefaultValue=false)]
        public string HelpText { get; set; }

        /// <summary>
        /// Gets or Sets Id4nAssociated
        /// </summary>
        [DataMember(Name="id4nAssociated", EmitDefaultValue=false)]
        public bool? Id4nAssociated { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiKeyPrivilegeInfo {\n");
            sb.Append("  AllowsBillableOperations: ").Append(AllowsBillableOperations).Append("\n");
            sb.Append("  HelpText: ").Append(HelpText).Append("\n");
            sb.Append("  Id4nAssociated: ").Append(Id4nAssociated).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiKeyPrivilegeInfo);
        }

        /// <summary>
        /// Returns true if ApiKeyPrivilegeInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiKeyPrivilegeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiKeyPrivilegeInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowsBillableOperations == input.AllowsBillableOperations ||
                    (this.AllowsBillableOperations != null &&
                    this.AllowsBillableOperations.Equals(input.AllowsBillableOperations))
                ) && 
                (
                    this.HelpText == input.HelpText ||
                    (this.HelpText != null &&
                    this.HelpText.Equals(input.HelpText))
                ) && 
                (
                    this.Id4nAssociated == input.Id4nAssociated ||
                    (this.Id4nAssociated != null &&
                    this.Id4nAssociated.Equals(input.Id4nAssociated))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowsBillableOperations != null)
                    hashCode = hashCode * 59 + this.AllowsBillableOperations.GetHashCode();
                if (this.HelpText != null)
                    hashCode = hashCode * 59 + this.HelpText.GetHashCode();
                if (this.Id4nAssociated != null)
                    hashCode = hashCode * 59 + this.Id4nAssociated.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }
    }

}
